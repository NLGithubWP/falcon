syntax = "proto3";

package com.nus.dbsytem.falcon.v0;

import public "common.proto";

message EncryptedStatPerSplit {
    repeated FixedPointEncodedNumber encrypted_stat = 1;  // encrypted stat for each branch of each class
}

message EncryptedStatistics {
    int32 client_id = 1;               // client id
    int32 node_index = 2;              // node index
    int32 local_split_num = 3;    // total split num on a client
    int32 classes_num = 4;   // classes_num * 2 (if regression, classes_num = 2)
    repeated FixedPointEncodedNumber left_sample_nums_of_splits = 5;  // sample_nums of left branch of total splits
    repeated FixedPointEncodedNumber right_sample_nums_of_splits = 6;  // sample_nums of right branch of total splits
    repeated EncryptedStatPerSplit encrypted_stats_of_splits = 7; // two-dimensional encrypted statistics
}

message NodeUpdateInfo {
    int32 source_client_id = 1;              // client who sends the message
    int32 best_client_id = 2;                // client owns the best split in the current node, should be same as first parameter
    int32 best_feature_id = 3;               // best feature id on the best_client_id
    int32 best_split_id = 4;                 // best split id for the best_feature_id
    FixedPointEncodedNumber left_branch_impurity  = 5;   // impurity of the left child node
    FixedPointEncodedNumber right_branch_impurity= 6;  // impurity of the right child node
    repeated FixedPointEncodedNumber left_branch_sample_ivs = 7;   // sample iv of the left child node
    repeated FixedPointEncodedNumber right_branch_sample_ivs = 8;  // sample iv of the right child node
}

message SplitInfo {
    int32 global_split_num = 1;                // total split num of all clients
    repeated int32 split_num_vec = 2;          // split_num of each client
}

// store the tree model on disk
message Node {
    int32 node_type = 1;        // node type, default is internal node
    int32 depth = 2;            // the depth of the current node, root node is 0, -1: not decided
    int32 is_self_feature = 3;  // if the node belongs to the party itself, 0: no, 1: yes, -1: not decided
    int32 best_party_id = 4;    // the party that owns the selected feature on this node, -1: not decided
    int32 best_feature_id = 5;  // the feature on this node, -1: not self feature, 0 -- d_i: self feature id
    int32 best_split_id = 6;    // the split of the feature on this node, -1: not decided
    double split_threshold = 7; // the split threshold if it is its own feature
    int32 node_sample_num = 8;  // the number of samples where the element in sample_iv is [1]
    repeated int32 node_sample_distribution = 9;    // the number of samples for each class on the node
    FixedPointEncodedNumber impurity = 10;          // node impurity, Gini index for classification, variance for regression
    FixedPointEncodedNumber label = 11;             // if is_leaf is true, a label is assigned
    int32 left_child = 12;      // left branch id of the current node, if not a leaf node, -1: not decided
    int32 right_child = 13;     // right branch id of the current node, if not a leaf node, -1: not decided
}

// decision tree model
message TreeModel {
    int32 tree_type = 1;            // classification or regression
    int32 class_num = 2;            // number of classes if classification
    int32 max_depth = 3;            // maximum tree depth
    repeated Node nodes = 4;        // array of Node
    int32 internal_node_num = 5;    // internal node count
    int32 total_node_num = 6;       // total node count
    int32 capacity = 7;             // tree capacity
}

// ensemble tree model: random forest
message ForestModel {
    int32 tree_size = 1;            // the number of estimator stored
    int32 tree_type = 2;            // the model type: classification or regression
    repeated TreeModel trees = 3;   // the stored trees
}

// ensemble tree model: gbdt
message GbdtModel {
    int32 tree_size = 1;            // the number of total trees stored, n_estimator * class_num
    int32 tree_type = 2;            // the model type: classification or regression
    int32 n_estimator = 3;          // the number of estimator for gbdt model
    int32 class_num = 4;            // the number of classes, 1 for regression
    double learning_rate = 5;       // the shrinkage rate during the training
    repeated double dummy_predictors = 6; // the dummy predictors for the trees
    repeated TreeModel trees = 7;   // the stored trees
}
