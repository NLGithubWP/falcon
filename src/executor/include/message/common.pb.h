// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {
class EncodedNumberArray;
class EncodedNumberArrayDefaultTypeInternal;
extern EncodedNumberArrayDefaultTypeInternal _EncodedNumberArray_default_instance_;
class FixedPointEncodedNumber;
class FixedPointEncodedNumberDefaultTypeInternal;
extern FixedPointEncodedNumberDefaultTypeInternal _FixedPointEncodedNumber_default_instance_;
class IntArray;
class IntArrayDefaultTypeInternal;
extern IntArrayDefaultTypeInternal _IntArray_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::nus::dbsytem::falcon::v0::EncodedNumberArray* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::EncodedNumberArray>(Arena*);
template<> ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber>(Arena*);
template<> ::com::nus::dbsytem::falcon::v0::IntArray* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::IntArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {

// ===================================================================

class IntArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.IntArray) */ {
 public:
  inline IntArray() : IntArray(nullptr) {}
  virtual ~IntArray();

  IntArray(const IntArray& from);
  IntArray(IntArray&& from) noexcept
    : IntArray() {
    *this = ::std::move(from);
  }

  inline IntArray& operator=(const IntArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntArray& operator=(IntArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntArray& default_instance();

  static inline const IntArray* internal_default_instance() {
    return reinterpret_cast<const IntArray*>(
               &_IntArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IntArray& a, IntArray& b) {
    a.Swap(&b);
  }
  inline void Swap(IntArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntArray* New() const final {
    return CreateMaybeMessage<IntArray>(nullptr);
  }

  IntArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntArray& from);
  void MergeFrom(const IntArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.IntArray";
  }
  protected:
  explicit IntArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntItemFieldNumber = 1,
  };
  // repeated int32 int_item = 1;
  int int_item_size() const;
  private:
  int _internal_int_item_size() const;
  public:
  void clear_int_item();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_item(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int_item() const;
  void _internal_add_int_item(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int_item();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int_item(int index) const;
  void set_int_item(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int_item(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int_item() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int_item();

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.IntArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int_item_;
  mutable std::atomic<int> _int_item_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class FixedPointEncodedNumber PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber) */ {
 public:
  inline FixedPointEncodedNumber() : FixedPointEncodedNumber(nullptr) {}
  virtual ~FixedPointEncodedNumber();

  FixedPointEncodedNumber(const FixedPointEncodedNumber& from);
  FixedPointEncodedNumber(FixedPointEncodedNumber&& from) noexcept
    : FixedPointEncodedNumber() {
    *this = ::std::move(from);
  }

  inline FixedPointEncodedNumber& operator=(const FixedPointEncodedNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedPointEncodedNumber& operator=(FixedPointEncodedNumber&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FixedPointEncodedNumber& default_instance();

  static inline const FixedPointEncodedNumber* internal_default_instance() {
    return reinterpret_cast<const FixedPointEncodedNumber*>(
               &_FixedPointEncodedNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FixedPointEncodedNumber& a, FixedPointEncodedNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedPointEncodedNumber* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedPointEncodedNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FixedPointEncodedNumber* New() const final {
    return CreateMaybeMessage<FixedPointEncodedNumber>(nullptr);
  }

  FixedPointEncodedNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FixedPointEncodedNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FixedPointEncodedNumber& from);
  void MergeFrom(const FixedPointEncodedNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedPointEncodedNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber";
  }
  protected:
  explicit FixedPointEncodedNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNFieldNumber = 1,
    kValueFieldNumber = 2,
    kExponentFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string n = 1;
  void clear_n();
  const std::string& n() const;
  void set_n(const std::string& value);
  void set_n(std::string&& value);
  void set_n(const char* value);
  void set_n(const char* value, size_t size);
  std::string* mutable_n();
  std::string* release_n();
  void set_allocated_n(std::string* n);
  private:
  const std::string& _internal_n() const;
  void _internal_set_n(const std::string& value);
  std::string* _internal_mutable_n();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 exponent = 3;
  void clear_exponent();
  ::PROTOBUF_NAMESPACE_ID::int32 exponent() const;
  void set_exponent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exponent() const;
  void _internal_set_exponent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 exponent_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class EncodedNumberArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.EncodedNumberArray) */ {
 public:
  inline EncodedNumberArray() : EncodedNumberArray(nullptr) {}
  virtual ~EncodedNumberArray();

  EncodedNumberArray(const EncodedNumberArray& from);
  EncodedNumberArray(EncodedNumberArray&& from) noexcept
    : EncodedNumberArray() {
    *this = ::std::move(from);
  }

  inline EncodedNumberArray& operator=(const EncodedNumberArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncodedNumberArray& operator=(EncodedNumberArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncodedNumberArray& default_instance();

  static inline const EncodedNumberArray* internal_default_instance() {
    return reinterpret_cast<const EncodedNumberArray*>(
               &_EncodedNumberArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EncodedNumberArray& a, EncodedNumberArray& b) {
    a.Swap(&b);
  }
  inline void Swap(EncodedNumberArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncodedNumberArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncodedNumberArray* New() const final {
    return CreateMaybeMessage<EncodedNumberArray>(nullptr);
  }

  EncodedNumberArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncodedNumberArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncodedNumberArray& from);
  void MergeFrom(const EncodedNumberArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncodedNumberArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.EncodedNumberArray";
  }
  protected:
  explicit EncodedNumberArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedNumberFieldNumber = 1,
  };
  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber encoded_number = 1;
  int encoded_number_size() const;
  private:
  int _internal_encoded_number_size() const;
  public:
  void clear_encoded_number();
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* mutable_encoded_number(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
      mutable_encoded_number();
  private:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& _internal_encoded_number(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* _internal_add_encoded_number();
  public:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& encoded_number(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* add_encoded_number();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
      encoded_number() const;

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.EncodedNumberArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber > encoded_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IntArray

// repeated int32 int_item = 1;
inline int IntArray::_internal_int_item_size() const {
  return int_item_.size();
}
inline int IntArray::int_item_size() const {
  return _internal_int_item_size();
}
inline void IntArray::clear_int_item() {
  int_item_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntArray::_internal_int_item(int index) const {
  return int_item_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntArray::int_item(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.IntArray.int_item)
  return _internal_int_item(index);
}
inline void IntArray::set_int_item(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_item_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.IntArray.int_item)
}
inline void IntArray::_internal_add_int_item(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_item_.Add(value);
}
inline void IntArray::add_int_item(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int_item(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.IntArray.int_item)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntArray::_internal_int_item() const {
  return int_item_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntArray::int_item() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.IntArray.int_item)
  return _internal_int_item();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntArray::_internal_mutable_int_item() {
  return &int_item_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntArray::mutable_int_item() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.IntArray.int_item)
  return _internal_mutable_int_item();
}

// -------------------------------------------------------------------

// FixedPointEncodedNumber

// string n = 1;
inline void FixedPointEncodedNumber::clear_n() {
  n_.ClearToEmpty();
}
inline const std::string& FixedPointEncodedNumber::n() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.n)
  return _internal_n();
}
inline void FixedPointEncodedNumber::set_n(const std::string& value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.n)
}
inline std::string* FixedPointEncodedNumber::mutable_n() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.n)
  return _internal_mutable_n();
}
inline const std::string& FixedPointEncodedNumber::_internal_n() const {
  return n_.Get();
}
inline void FixedPointEncodedNumber::_internal_set_n(const std::string& value) {
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FixedPointEncodedNumber::set_n(std::string&& value) {
  
  n_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.n)
}
inline void FixedPointEncodedNumber::set_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.n)
}
inline void FixedPointEncodedNumber::set_n(const char* value,
    size_t size) {
  
  n_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.n)
}
inline std::string* FixedPointEncodedNumber::_internal_mutable_n() {
  
  return n_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FixedPointEncodedNumber::release_n() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.n)
  return n_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FixedPointEncodedNumber::set_allocated_n(std::string* n) {
  if (n != nullptr) {
    
  } else {
    
  }
  n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.n)
}

// string value = 2;
inline void FixedPointEncodedNumber::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& FixedPointEncodedNumber::value() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.value)
  return _internal_value();
}
inline void FixedPointEncodedNumber::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.value)
}
inline std::string* FixedPointEncodedNumber::mutable_value() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.value)
  return _internal_mutable_value();
}
inline const std::string& FixedPointEncodedNumber::_internal_value() const {
  return value_.Get();
}
inline void FixedPointEncodedNumber::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FixedPointEncodedNumber::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.value)
}
inline void FixedPointEncodedNumber::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.value)
}
inline void FixedPointEncodedNumber::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.value)
}
inline std::string* FixedPointEncodedNumber::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FixedPointEncodedNumber::release_value() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FixedPointEncodedNumber::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.value)
}

// int32 exponent = 3;
inline void FixedPointEncodedNumber::clear_exponent() {
  exponent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedPointEncodedNumber::_internal_exponent() const {
  return exponent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedPointEncodedNumber::exponent() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.exponent)
  return _internal_exponent();
}
inline void FixedPointEncodedNumber::_internal_set_exponent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exponent_ = value;
}
inline void FixedPointEncodedNumber::set_exponent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exponent(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.exponent)
}

// int32 type = 4;
inline void FixedPointEncodedNumber::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedPointEncodedNumber::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedPointEncodedNumber::type() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.type)
  return _internal_type();
}
inline void FixedPointEncodedNumber::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void FixedPointEncodedNumber::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber.type)
}

// -------------------------------------------------------------------

// EncodedNumberArray

// repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber encoded_number = 1;
inline int EncodedNumberArray::_internal_encoded_number_size() const {
  return encoded_number_.size();
}
inline int EncodedNumberArray::encoded_number_size() const {
  return _internal_encoded_number_size();
}
inline void EncodedNumberArray::clear_encoded_number() {
  encoded_number_.Clear();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncodedNumberArray::mutable_encoded_number(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.EncodedNumberArray.encoded_number)
  return encoded_number_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
EncodedNumberArray::mutable_encoded_number() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.EncodedNumberArray.encoded_number)
  return &encoded_number_;
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& EncodedNumberArray::_internal_encoded_number(int index) const {
  return encoded_number_.Get(index);
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& EncodedNumberArray::encoded_number(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.EncodedNumberArray.encoded_number)
  return _internal_encoded_number(index);
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncodedNumberArray::_internal_add_encoded_number() {
  return encoded_number_.Add();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncodedNumberArray::add_encoded_number() {
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.EncodedNumberArray.encoded_number)
  return _internal_add_encoded_number();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
EncodedNumberArray::encoded_number() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.EncodedNumberArray.encoded_number)
  return encoded_number_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
