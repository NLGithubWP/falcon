// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serving.proto

#include "serving.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_serving_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServingInfo_serving_2eproto;
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {
class CreateServingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateServingRequest> _instance;
} _CreateServingRequest_default_instance_;
class CreateServingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateServingResponse> _instance;
} _CreateServingResponse_default_instance_;
class EnableServingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableServingRequest> _instance;
} _EnableServingRequest_default_instance_;
class EnableServingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableServingResponse> _instance;
} _EnableServingResponse_default_instance_;
class UpdateServingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateServingRequest> _instance;
} _UpdateServingRequest_default_instance_;
class UpdateServingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateServingResponse> _instance;
} _UpdateServingResponse_default_instance_;
class QueryServingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryServingRequest> _instance;
} _QueryServingRequest_default_instance_;
class ServingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServingInfo> _instance;
} _ServingInfo_default_instance_;
class QueryServingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryServingResponse> _instance;
} _QueryServingResponse_default_instance_;
class DisableServingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableServingRequest> _instance;
} _DisableServingRequest_default_instance_;
class DisableServingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableServingResponse> _instance;
} _DisableServingResponse_default_instance_;
class DeleteServingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteServingRequest> _instance;
} _DeleteServingRequest_default_instance_;
class DeleteServingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteServingResponse> _instance;
} _DeleteServingResponse_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com
static void InitDefaultsscc_info_CreateServingRequest_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_CreateServingRequest_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::CreateServingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateServingRequest_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateServingRequest_serving_2eproto}, {}};

static void InitDefaultsscc_info_CreateServingResponse_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_CreateServingResponse_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::CreateServingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateServingResponse_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateServingResponse_serving_2eproto}, {}};

static void InitDefaultsscc_info_DeleteServingRequest_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_DeleteServingRequest_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::DeleteServingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteServingRequest_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteServingRequest_serving_2eproto}, {}};

static void InitDefaultsscc_info_DeleteServingResponse_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_DeleteServingResponse_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::DeleteServingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteServingResponse_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteServingResponse_serving_2eproto}, {}};

static void InitDefaultsscc_info_DisableServingRequest_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_DisableServingRequest_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::DisableServingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableServingRequest_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableServingRequest_serving_2eproto}, {}};

static void InitDefaultsscc_info_DisableServingResponse_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_DisableServingResponse_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::DisableServingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableServingResponse_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableServingResponse_serving_2eproto}, {}};

static void InitDefaultsscc_info_EnableServingRequest_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_EnableServingRequest_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::EnableServingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableServingRequest_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableServingRequest_serving_2eproto}, {}};

static void InitDefaultsscc_info_EnableServingResponse_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_EnableServingResponse_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::EnableServingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableServingResponse_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableServingResponse_serving_2eproto}, {}};

static void InitDefaultsscc_info_QueryServingRequest_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_QueryServingRequest_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::QueryServingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryServingRequest_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryServingRequest_serving_2eproto}, {}};

static void InitDefaultsscc_info_QueryServingResponse_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_QueryServingResponse_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::QueryServingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryServingResponse_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryServingResponse_serving_2eproto}, {
      &scc_info_ServingInfo_serving_2eproto.base,}};

static void InitDefaultsscc_info_ServingInfo_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_ServingInfo_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::ServingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServingInfo_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServingInfo_serving_2eproto}, {}};

static void InitDefaultsscc_info_UpdateServingRequest_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_UpdateServingRequest_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::UpdateServingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateServingRequest_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateServingRequest_serving_2eproto}, {}};

static void InitDefaultsscc_info_UpdateServingResponse_serving_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_UpdateServingResponse_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::UpdateServingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateServingResponse_serving_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateServingResponse_serving_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_serving_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_serving_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_serving_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_serving_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::CreateServingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::CreateServingRequest, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::CreateServingRequest, serving_name_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::CreateServingRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::CreateServingRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::CreateServingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::CreateServingResponse, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::CreateServingResponse, is_success_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::CreateServingResponse, error_code_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::CreateServingResponse, error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::EnableServingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::EnableServingRequest, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::EnableServingRequest, model_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::EnableServingRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::EnableServingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::EnableServingResponse, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::EnableServingResponse, is_success_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::EnableServingResponse, error_code_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::EnableServingResponse, error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::UpdateServingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::UpdateServingRequest, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::UpdateServingRequest, new_model_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::UpdateServingRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::UpdateServingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::UpdateServingResponse, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::UpdateServingResponse, is_success_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::UpdateServingResponse, error_code_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::UpdateServingResponse, error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::QueryServingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::QueryServingRequest, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::QueryServingRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::ServingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::ServingInfo, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::ServingInfo, served_model_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::ServingInfo, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::QueryServingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::QueryServingResponse, serving_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DisableServingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DisableServingRequest, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DisableServingRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DisableServingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DisableServingResponse, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DisableServingResponse, is_success_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DisableServingResponse, error_code_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DisableServingResponse, error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DeleteServingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DeleteServingRequest, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DeleteServingRequest, party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DeleteServingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DeleteServingResponse, serving_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DeleteServingResponse, is_success_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DeleteServingResponse, error_code_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::DeleteServingResponse, error_msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::nus::dbsystem::falcon::v0::CreateServingRequest)},
  { 9, -1, sizeof(::com::nus::dbsystem::falcon::v0::CreateServingResponse)},
  { 18, -1, sizeof(::com::nus::dbsystem::falcon::v0::EnableServingRequest)},
  { 26, -1, sizeof(::com::nus::dbsystem::falcon::v0::EnableServingResponse)},
  { 35, -1, sizeof(::com::nus::dbsystem::falcon::v0::UpdateServingRequest)},
  { 43, -1, sizeof(::com::nus::dbsystem::falcon::v0::UpdateServingResponse)},
  { 52, -1, sizeof(::com::nus::dbsystem::falcon::v0::QueryServingRequest)},
  { 59, -1, sizeof(::com::nus::dbsystem::falcon::v0::ServingInfo)},
  { 67, -1, sizeof(::com::nus::dbsystem::falcon::v0::QueryServingResponse)},
  { 73, -1, sizeof(::com::nus::dbsystem::falcon::v0::DisableServingRequest)},
  { 80, -1, sizeof(::com::nus::dbsystem::falcon::v0::DisableServingResponse)},
  { 89, -1, sizeof(::com::nus::dbsystem::falcon::v0::DeleteServingRequest)},
  { 96, -1, sizeof(::com::nus::dbsystem::falcon::v0::DeleteServingResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_CreateServingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_CreateServingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_EnableServingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_EnableServingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_UpdateServingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_UpdateServingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_QueryServingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_ServingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_QueryServingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_DisableServingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_DisableServingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_DeleteServingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_DeleteServingResponse_default_instance_),
};

const char descriptor_table_protodef_serving_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rserving.proto\022\032com.nus.dbsystem.falcon"
  ".v0\"d\n\024CreateServingRequest\022\022\n\nserving_i"
  "d\030\001 \001(\005\022\024\n\014serving_name\030\002 \001(\t\022\020\n\010model_i"
  "d\030\003 \001(\005\022\020\n\010party_id\030\004 \001(\005\"f\n\025CreateServi"
  "ngResponse\022\022\n\nserving_id\030\001 \001(\005\022\022\n\nis_suc"
  "cess\030\002 \001(\005\022\022\n\nerror_code\030\003 \001(\005\022\021\n\terror_"
  "msg\030\004 \001(\t\"N\n\024EnableServingRequest\022\022\n\nser"
  "ving_id\030\001 \001(\005\022\020\n\010model_id\030\002 \001(\005\022\020\n\010party"
  "_id\030\003 \001(\005\"f\n\025EnableServingResponse\022\022\n\nse"
  "rving_id\030\001 \001(\005\022\022\n\nis_success\030\002 \001(\005\022\022\n\ner"
  "ror_code\030\003 \001(\005\022\021\n\terror_msg\030\004 \001(\t\"R\n\024Upd"
  "ateServingRequest\022\022\n\nserving_id\030\001 \001(\005\022\024\n"
  "\014new_model_id\030\002 \001(\005\022\020\n\010party_id\030\003 \001(\005\"f\n"
  "\025UpdateServingResponse\022\022\n\nserving_id\030\001 \001"
  "(\005\022\022\n\nis_success\030\002 \001(\005\022\022\n\nerror_code\030\003 \001"
  "(\005\022\021\n\terror_msg\030\004 \001(\t\";\n\023QueryServingReq"
  "uest\022\022\n\nserving_id\030\001 \003(\005\022\020\n\010party_id\030\002 \001"
  "(\005\"u\n\013ServingInfo\022\022\n\nserving_id\030\001 \001(\005\022\027\n"
  "\017served_model_id\030\002 \001(\005\0229\n\006status\030\003 \001(\0162)"
  ".com.nus.dbsystem.falcon.v0.ServingStatu"
  "s\"V\n\024QueryServingResponse\022>\n\rserving_inf"
  "os\030\001 \003(\0132\'.com.nus.dbsystem.falcon.v0.Se"
  "rvingInfo\"=\n\025DisableServingRequest\022\022\n\nse"
  "rving_id\030\001 \001(\005\022\020\n\010party_id\030\002 \001(\005\"g\n\026Disa"
  "bleServingResponse\022\022\n\nserving_id\030\001 \001(\005\022\022"
  "\n\nis_success\030\002 \001(\005\022\022\n\nerror_code\030\003 \001(\005\022\021"
  "\n\terror_msg\030\004 \001(\t\"<\n\024DeleteServingReques"
  "t\022\022\n\nserving_id\030\001 \001(\005\022\020\n\010party_id\030\002 \001(\005\""
  "f\n\025DeleteServingResponse\022\022\n\nserving_id\030\001"
  " \001(\005\022\022\n\nis_success\030\002 \001(\005\022\022\n\nerror_code\030\003"
  " \001(\005\022\021\n\terror_msg\030\004 \001(\t*5\n\rServingStatus"
  "\022\013\n\007created\020\000\022\n\n\006online\020\001\022\013\n\007offline\020\002b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_serving_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_serving_2eproto_sccs[13] = {
  &scc_info_CreateServingRequest_serving_2eproto.base,
  &scc_info_CreateServingResponse_serving_2eproto.base,
  &scc_info_DeleteServingRequest_serving_2eproto.base,
  &scc_info_DeleteServingResponse_serving_2eproto.base,
  &scc_info_DisableServingRequest_serving_2eproto.base,
  &scc_info_DisableServingResponse_serving_2eproto.base,
  &scc_info_EnableServingRequest_serving_2eproto.base,
  &scc_info_EnableServingResponse_serving_2eproto.base,
  &scc_info_QueryServingRequest_serving_2eproto.base,
  &scc_info_QueryServingResponse_serving_2eproto.base,
  &scc_info_ServingInfo_serving_2eproto.base,
  &scc_info_UpdateServingRequest_serving_2eproto.base,
  &scc_info_UpdateServingResponse_serving_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_serving_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serving_2eproto = {
  false, false, descriptor_table_protodef_serving_2eproto, "serving.proto", 1286,
  &descriptor_table_serving_2eproto_once, descriptor_table_serving_2eproto_sccs, descriptor_table_serving_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_serving_2eproto::offsets,
  file_level_metadata_serving_2eproto, 13, file_level_enum_descriptors_serving_2eproto, file_level_service_descriptors_serving_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_serving_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_serving_2eproto)), true);
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_serving_2eproto);
  return file_level_enum_descriptors_serving_2eproto[0];
}
bool ServingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CreateServingRequest::_Internal {
 public:
};

CreateServingRequest::CreateServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.CreateServingRequest)
}
CreateServingRequest::CreateServingRequest(const CreateServingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serving_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serving_name().empty()) {
    serving_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serving_name(), 
      GetArena());
  }
  ::memcpy(&serving_id_, &from.serving_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
    reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.CreateServingRequest)
}

void CreateServingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateServingRequest_serving_2eproto.base);
  serving_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serving_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
}

CreateServingRequest::~CreateServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateServingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serving_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateServingRequest::ArenaDtor(void* object) {
  CreateServingRequest* _this = reinterpret_cast< CreateServingRequest* >(object);
  (void)_this;
}
void CreateServingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateServingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateServingRequest& CreateServingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateServingRequest_serving_2eproto.base);
  return *internal_default_instance();
}


void CreateServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serving_name_.ClearToEmpty();
  ::memset(&serving_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&party_id_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateServingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serving_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serving_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serving_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 party_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateServingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serving_id(), target);
  }

  // string serving_name = 2;
  if (this->serving_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serving_name().data(), static_cast<int>(this->_internal_serving_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serving_name(), target);
  }

  // int32 model_id = 3;
  if (this->model_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_model_id(), target);
  }

  // int32 party_id = 4;
  if (this->party_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  return target;
}

size_t CreateServingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serving_name = 2;
  if (this->serving_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serving_name());
  }

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serving_id());
  }

  // int32 model_id = 3;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_id());
  }

  // int32 party_id = 4;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateServingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateServingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateServingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.CreateServingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.CreateServingRequest)
    MergeFrom(*source);
  }
}

void CreateServingRequest::MergeFrom(const CreateServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serving_name().size() > 0) {
    _internal_set_serving_name(from._internal_serving_name());
  }
  if (from.serving_id() != 0) {
    _internal_set_serving_id(from._internal_serving_id());
  }
  if (from.model_id() != 0) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from.party_id() != 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void CreateServingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServingRequest::CopyFrom(const CreateServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateServingRequest::IsInitialized() const {
  return true;
}

void CreateServingRequest::InternalSwap(CreateServingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serving_name_.Swap(&other->serving_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateServingRequest, party_id_)
      + sizeof(CreateServingRequest::party_id_)
      - PROTOBUF_FIELD_OFFSET(CreateServingRequest, serving_id_)>(
          reinterpret_cast<char*>(&serving_id_),
          reinterpret_cast<char*>(&other->serving_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateServingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateServingResponse::_Internal {
 public:
};

CreateServingResponse::CreateServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.CreateServingResponse)
}
CreateServingResponse::CreateServingResponse(const CreateServingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArena());
  }
  ::memcpy(&serving_id_, &from.serving_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.CreateServingResponse)
}

void CreateServingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateServingResponse_serving_2eproto.base);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serving_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
}

CreateServingResponse::~CreateServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateServingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateServingResponse::ArenaDtor(void* object) {
  CreateServingResponse* _this = reinterpret_cast< CreateServingResponse* >(object);
  (void)_this;
}
void CreateServingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateServingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateServingResponse& CreateServingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateServingResponse_serving_2eproto.base);
  return *internal_default_instance();
}


void CreateServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmpty();
  ::memset(&serving_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateServingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serving_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateServingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serving_id(), target);
  }

  // int32 is_success = 2;
  if (this->is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_success(), target);
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_error_code(), target);
  }

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  return target;
}

size_t CreateServingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serving_id());
  }

  // int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_success());
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateServingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateServingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateServingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.CreateServingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.CreateServingResponse)
    MergeFrom(*source);
  }
}

void CreateServingResponse::MergeFrom(const CreateServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from.serving_id() != 0) {
    _internal_set_serving_id(from._internal_serving_id());
  }
  if (from.is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void CreateServingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServingResponse::CopyFrom(const CreateServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateServingResponse::IsInitialized() const {
  return true;
}

void CreateServingResponse::InternalSwap(CreateServingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateServingResponse, error_code_)
      + sizeof(CreateServingResponse::error_code_)
      - PROTOBUF_FIELD_OFFSET(CreateServingResponse, serving_id_)>(
          reinterpret_cast<char*>(&serving_id_),
          reinterpret_cast<char*>(&other->serving_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateServingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnableServingRequest::_Internal {
 public:
};

EnableServingRequest::EnableServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.EnableServingRequest)
}
EnableServingRequest::EnableServingRequest(const EnableServingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&serving_id_, &from.serving_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
    reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.EnableServingRequest)
}

void EnableServingRequest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serving_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
}

EnableServingRequest::~EnableServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnableServingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableServingRequest::ArenaDtor(void* object) {
  EnableServingRequest* _this = reinterpret_cast< EnableServingRequest* >(object);
  (void)_this;
}
void EnableServingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableServingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableServingRequest& EnableServingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableServingRequest_serving_2eproto.base);
  return *internal_default_instance();
}


void EnableServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&serving_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&party_id_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableServingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serving_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 party_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableServingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serving_id(), target);
  }

  // int32 model_id = 2;
  if (this->model_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_model_id(), target);
  }

  // int32 party_id = 3;
  if (this->party_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  return target;
}

size_t EnableServingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serving_id());
  }

  // int32 model_id = 2;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_model_id());
  }

  // int32 party_id = 3;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableServingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableServingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnableServingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.EnableServingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.EnableServingRequest)
    MergeFrom(*source);
  }
}

void EnableServingRequest::MergeFrom(const EnableServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serving_id() != 0) {
    _internal_set_serving_id(from._internal_serving_id());
  }
  if (from.model_id() != 0) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from.party_id() != 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void EnableServingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableServingRequest::CopyFrom(const EnableServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableServingRequest::IsInitialized() const {
  return true;
}

void EnableServingRequest::InternalSwap(EnableServingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnableServingRequest, party_id_)
      + sizeof(EnableServingRequest::party_id_)
      - PROTOBUF_FIELD_OFFSET(EnableServingRequest, serving_id_)>(
          reinterpret_cast<char*>(&serving_id_),
          reinterpret_cast<char*>(&other->serving_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableServingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnableServingResponse::_Internal {
 public:
};

EnableServingResponse::EnableServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.EnableServingResponse)
}
EnableServingResponse::EnableServingResponse(const EnableServingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArena());
  }
  ::memcpy(&serving_id_, &from.serving_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.EnableServingResponse)
}

void EnableServingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnableServingResponse_serving_2eproto.base);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serving_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
}

EnableServingResponse::~EnableServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnableServingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnableServingResponse::ArenaDtor(void* object) {
  EnableServingResponse* _this = reinterpret_cast< EnableServingResponse* >(object);
  (void)_this;
}
void EnableServingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableServingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableServingResponse& EnableServingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableServingResponse_serving_2eproto.base);
  return *internal_default_instance();
}


void EnableServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmpty();
  ::memset(&serving_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableServingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serving_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableServingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serving_id(), target);
  }

  // int32 is_success = 2;
  if (this->is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_success(), target);
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_error_code(), target);
  }

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  return target;
}

size_t EnableServingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serving_id());
  }

  // int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_success());
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableServingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableServingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnableServingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.EnableServingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.EnableServingResponse)
    MergeFrom(*source);
  }
}

void EnableServingResponse::MergeFrom(const EnableServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from.serving_id() != 0) {
    _internal_set_serving_id(from._internal_serving_id());
  }
  if (from.is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void EnableServingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableServingResponse::CopyFrom(const EnableServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableServingResponse::IsInitialized() const {
  return true;
}

void EnableServingResponse::InternalSwap(EnableServingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnableServingResponse, error_code_)
      + sizeof(EnableServingResponse::error_code_)
      - PROTOBUF_FIELD_OFFSET(EnableServingResponse, serving_id_)>(
          reinterpret_cast<char*>(&serving_id_),
          reinterpret_cast<char*>(&other->serving_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableServingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateServingRequest::_Internal {
 public:
};

UpdateServingRequest::UpdateServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
}
UpdateServingRequest::UpdateServingRequest(const UpdateServingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&serving_id_, &from.serving_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
    reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
}

void UpdateServingRequest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serving_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
}

UpdateServingRequest::~UpdateServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateServingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateServingRequest::ArenaDtor(void* object) {
  UpdateServingRequest* _this = reinterpret_cast< UpdateServingRequest* >(object);
  (void)_this;
}
void UpdateServingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateServingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateServingRequest& UpdateServingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateServingRequest_serving_2eproto.base);
  return *internal_default_instance();
}


void UpdateServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&serving_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&party_id_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateServingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serving_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 new_model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          new_model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 party_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateServingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serving_id(), target);
  }

  // int32 new_model_id = 2;
  if (this->new_model_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_model_id(), target);
  }

  // int32 party_id = 3;
  if (this->party_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  return target;
}

size_t UpdateServingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serving_id());
  }

  // int32 new_model_id = 2;
  if (this->new_model_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_new_model_id());
  }

  // int32 party_id = 3;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateServingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateServingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateServingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
    MergeFrom(*source);
  }
}

void UpdateServingRequest::MergeFrom(const UpdateServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serving_id() != 0) {
    _internal_set_serving_id(from._internal_serving_id());
  }
  if (from.new_model_id() != 0) {
    _internal_set_new_model_id(from._internal_new_model_id());
  }
  if (from.party_id() != 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void UpdateServingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateServingRequest::CopyFrom(const UpdateServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateServingRequest::IsInitialized() const {
  return true;
}

void UpdateServingRequest::InternalSwap(UpdateServingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateServingRequest, party_id_)
      + sizeof(UpdateServingRequest::party_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateServingRequest, serving_id_)>(
          reinterpret_cast<char*>(&serving_id_),
          reinterpret_cast<char*>(&other->serving_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateServingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateServingResponse::_Internal {
 public:
};

UpdateServingResponse::UpdateServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
}
UpdateServingResponse::UpdateServingResponse(const UpdateServingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArena());
  }
  ::memcpy(&serving_id_, &from.serving_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
}

void UpdateServingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateServingResponse_serving_2eproto.base);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serving_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
}

UpdateServingResponse::~UpdateServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateServingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateServingResponse::ArenaDtor(void* object) {
  UpdateServingResponse* _this = reinterpret_cast< UpdateServingResponse* >(object);
  (void)_this;
}
void UpdateServingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateServingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateServingResponse& UpdateServingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateServingResponse_serving_2eproto.base);
  return *internal_default_instance();
}


void UpdateServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmpty();
  ::memset(&serving_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateServingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serving_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateServingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serving_id(), target);
  }

  // int32 is_success = 2;
  if (this->is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_success(), target);
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_error_code(), target);
  }

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  return target;
}

size_t UpdateServingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serving_id());
  }

  // int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_success());
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateServingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateServingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateServingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
    MergeFrom(*source);
  }
}

void UpdateServingResponse::MergeFrom(const UpdateServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from.serving_id() != 0) {
    _internal_set_serving_id(from._internal_serving_id());
  }
  if (from.is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void UpdateServingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateServingResponse::CopyFrom(const UpdateServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateServingResponse::IsInitialized() const {
  return true;
}

void UpdateServingResponse::InternalSwap(UpdateServingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateServingResponse, error_code_)
      + sizeof(UpdateServingResponse::error_code_)
      - PROTOBUF_FIELD_OFFSET(UpdateServingResponse, serving_id_)>(
          reinterpret_cast<char*>(&serving_id_),
          reinterpret_cast<char*>(&other->serving_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateServingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryServingRequest::_Internal {
 public:
};

QueryServingRequest::QueryServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  serving_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.QueryServingRequest)
}
QueryServingRequest::QueryServingRequest(const QueryServingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      serving_id_(from.serving_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_ = from.party_id_;
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.QueryServingRequest)
}

void QueryServingRequest::SharedCtor() {
  party_id_ = 0;
}

QueryServingRequest::~QueryServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryServingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryServingRequest::ArenaDtor(void* object) {
  QueryServingRequest* _this = reinterpret_cast< QueryServingRequest* >(object);
  (void)_this;
}
void QueryServingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryServingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryServingRequest& QueryServingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryServingRequest_serving_2eproto.base);
  return *internal_default_instance();
}


void QueryServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serving_id_.Clear();
  party_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryServingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_serving_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_serving_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 party_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryServingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 serving_id = 1;
  {
    int byte_size = _serving_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_serving_id(), byte_size, target);
    }
  }

  // int32 party_id = 2;
  if (this->party_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  return target;
}

size_t QueryServingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 serving_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->serving_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _serving_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 party_id = 2;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryServingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryServingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryServingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.QueryServingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.QueryServingRequest)
    MergeFrom(*source);
  }
}

void QueryServingRequest::MergeFrom(const QueryServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  serving_id_.MergeFrom(from.serving_id_);
  if (from.party_id() != 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void QueryServingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryServingRequest::CopyFrom(const QueryServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryServingRequest::IsInitialized() const {
  return true;
}

void QueryServingRequest::InternalSwap(QueryServingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serving_id_.InternalSwap(&other->serving_id_);
  swap(party_id_, other->party_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryServingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServingInfo::_Internal {
 public:
};

ServingInfo::ServingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.ServingInfo)
}
ServingInfo::ServingInfo(const ServingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&serving_id_, &from.serving_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&serving_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.ServingInfo)
}

void ServingInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serving_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(status_));
}

ServingInfo::~ServingInfo() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.ServingInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServingInfo::ArenaDtor(void* object) {
  ServingInfo* _this = reinterpret_cast< ServingInfo* >(object);
  (void)_this;
}
void ServingInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServingInfo& ServingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServingInfo_serving_2eproto.base);
  return *internal_default_instance();
}


void ServingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&serving_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serving_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 served_model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          served_model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::nus::dbsystem::falcon::v0::ServingStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serving_id(), target);
  }

  // int32 served_model_id = 2;
  if (this->served_model_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_served_model_id(), target);
  }

  // .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.ServingInfo)
  return target;
}

size_t ServingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serving_id());
  }

  // int32 served_model_id = 2;
  if (this->served_model_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_served_model_id());
  }

  // .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.ServingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.ServingInfo)
    MergeFrom(*source);
  }
}

void ServingInfo::MergeFrom(const ServingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serving_id() != 0) {
    _internal_set_serving_id(from._internal_serving_id());
  }
  if (from.served_model_id() != 0) {
    _internal_set_served_model_id(from._internal_served_model_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ServingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServingInfo::CopyFrom(const ServingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServingInfo::IsInitialized() const {
  return true;
}

void ServingInfo::InternalSwap(ServingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServingInfo, status_)
      + sizeof(ServingInfo::status_)
      - PROTOBUF_FIELD_OFFSET(ServingInfo, serving_id_)>(
          reinterpret_cast<char*>(&serving_id_),
          reinterpret_cast<char*>(&other->serving_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryServingResponse::_Internal {
 public:
};

QueryServingResponse::QueryServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  serving_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.QueryServingResponse)
}
QueryServingResponse::QueryServingResponse(const QueryServingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      serving_infos_(from.serving_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.QueryServingResponse)
}

void QueryServingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryServingResponse_serving_2eproto.base);
}

QueryServingResponse::~QueryServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryServingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryServingResponse::ArenaDtor(void* object) {
  QueryServingResponse* _this = reinterpret_cast< QueryServingResponse* >(object);
  (void)_this;
}
void QueryServingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryServingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryServingResponse& QueryServingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryServingResponse_serving_2eproto.base);
  return *internal_default_instance();
}


void QueryServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serving_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryServingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_serving_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryServingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_serving_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_serving_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  return target;
}

size_t QueryServingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
  total_size += 1UL * this->_internal_serving_infos_size();
  for (const auto& msg : this->serving_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryServingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryServingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryServingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.QueryServingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.QueryServingResponse)
    MergeFrom(*source);
  }
}

void QueryServingResponse::MergeFrom(const QueryServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  serving_infos_.MergeFrom(from.serving_infos_);
}

void QueryServingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryServingResponse::CopyFrom(const QueryServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryServingResponse::IsInitialized() const {
  return true;
}

void QueryServingResponse::InternalSwap(QueryServingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serving_infos_.InternalSwap(&other->serving_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryServingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DisableServingRequest::_Internal {
 public:
};

DisableServingRequest::DisableServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.DisableServingRequest)
}
DisableServingRequest::DisableServingRequest(const DisableServingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&serving_id_, &from.serving_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
    reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.DisableServingRequest)
}

void DisableServingRequest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serving_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
}

DisableServingRequest::~DisableServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisableServingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisableServingRequest::ArenaDtor(void* object) {
  DisableServingRequest* _this = reinterpret_cast< DisableServingRequest* >(object);
  (void)_this;
}
void DisableServingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableServingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableServingRequest& DisableServingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableServingRequest_serving_2eproto.base);
  return *internal_default_instance();
}


void DisableServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&serving_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&party_id_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisableServingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serving_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 party_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableServingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serving_id(), target);
  }

  // int32 party_id = 2;
  if (this->party_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  return target;
}

size_t DisableServingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serving_id());
  }

  // int32 party_id = 2;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableServingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableServingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisableServingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.DisableServingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.DisableServingRequest)
    MergeFrom(*source);
  }
}

void DisableServingRequest::MergeFrom(const DisableServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serving_id() != 0) {
    _internal_set_serving_id(from._internal_serving_id());
  }
  if (from.party_id() != 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void DisableServingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableServingRequest::CopyFrom(const DisableServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableServingRequest::IsInitialized() const {
  return true;
}

void DisableServingRequest::InternalSwap(DisableServingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisableServingRequest, party_id_)
      + sizeof(DisableServingRequest::party_id_)
      - PROTOBUF_FIELD_OFFSET(DisableServingRequest, serving_id_)>(
          reinterpret_cast<char*>(&serving_id_),
          reinterpret_cast<char*>(&other->serving_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisableServingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DisableServingResponse::_Internal {
 public:
};

DisableServingResponse::DisableServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.DisableServingResponse)
}
DisableServingResponse::DisableServingResponse(const DisableServingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArena());
  }
  ::memcpy(&serving_id_, &from.serving_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.DisableServingResponse)
}

void DisableServingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisableServingResponse_serving_2eproto.base);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serving_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
}

DisableServingResponse::~DisableServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisableServingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisableServingResponse::ArenaDtor(void* object) {
  DisableServingResponse* _this = reinterpret_cast< DisableServingResponse* >(object);
  (void)_this;
}
void DisableServingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisableServingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableServingResponse& DisableServingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableServingResponse_serving_2eproto.base);
  return *internal_default_instance();
}


void DisableServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmpty();
  ::memset(&serving_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisableServingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serving_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableServingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serving_id(), target);
  }

  // int32 is_success = 2;
  if (this->is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_success(), target);
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_error_code(), target);
  }

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  return target;
}

size_t DisableServingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serving_id());
  }

  // int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_success());
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableServingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableServingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisableServingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.DisableServingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.DisableServingResponse)
    MergeFrom(*source);
  }
}

void DisableServingResponse::MergeFrom(const DisableServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from.serving_id() != 0) {
    _internal_set_serving_id(from._internal_serving_id());
  }
  if (from.is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void DisableServingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableServingResponse::CopyFrom(const DisableServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableServingResponse::IsInitialized() const {
  return true;
}

void DisableServingResponse::InternalSwap(DisableServingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisableServingResponse, error_code_)
      + sizeof(DisableServingResponse::error_code_)
      - PROTOBUF_FIELD_OFFSET(DisableServingResponse, serving_id_)>(
          reinterpret_cast<char*>(&serving_id_),
          reinterpret_cast<char*>(&other->serving_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisableServingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteServingRequest::_Internal {
 public:
};

DeleteServingRequest::DeleteServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
}
DeleteServingRequest::DeleteServingRequest(const DeleteServingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&serving_id_, &from.serving_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
    reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
}

void DeleteServingRequest::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serving_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&party_id_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
}

DeleteServingRequest::~DeleteServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteServingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteServingRequest::ArenaDtor(void* object) {
  DeleteServingRequest* _this = reinterpret_cast< DeleteServingRequest* >(object);
  (void)_this;
}
void DeleteServingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteServingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteServingRequest& DeleteServingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteServingRequest_serving_2eproto.base);
  return *internal_default_instance();
}


void DeleteServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&serving_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&party_id_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(party_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteServingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serving_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 party_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteServingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serving_id(), target);
  }

  // int32 party_id = 2;
  if (this->party_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  return target;
}

size_t DeleteServingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serving_id());
  }

  // int32 party_id = 2;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_party_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteServingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteServingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteServingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
    MergeFrom(*source);
  }
}

void DeleteServingRequest::MergeFrom(const DeleteServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serving_id() != 0) {
    _internal_set_serving_id(from._internal_serving_id());
  }
  if (from.party_id() != 0) {
    _internal_set_party_id(from._internal_party_id());
  }
}

void DeleteServingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteServingRequest::CopyFrom(const DeleteServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServingRequest::IsInitialized() const {
  return true;
}

void DeleteServingRequest::InternalSwap(DeleteServingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteServingRequest, party_id_)
      + sizeof(DeleteServingRequest::party_id_)
      - PROTOBUF_FIELD_OFFSET(DeleteServingRequest, serving_id_)>(
          reinterpret_cast<char*>(&serving_id_),
          reinterpret_cast<char*>(&other->serving_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteServingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteServingResponse::_Internal {
 public:
};

DeleteServingResponse::DeleteServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
}
DeleteServingResponse::DeleteServingResponse(const DeleteServingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArena());
  }
  ::memcpy(&serving_id_, &from.serving_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
}

void DeleteServingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteServingResponse_serving_2eproto.base);
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&serving_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
}

DeleteServingResponse::~DeleteServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteServingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteServingResponse::ArenaDtor(void* object) {
  DeleteServingResponse* _this = reinterpret_cast< DeleteServingResponse* >(object);
  (void)_this;
}
void DeleteServingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteServingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteServingResponse& DeleteServingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteServingResponse_serving_2eproto.base);
  return *internal_default_instance();
}


void DeleteServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmpty();
  ::memset(&serving_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&serving_id_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteServingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serving_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serving_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteServingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serving_id(), target);
  }

  // int32 is_success = 2;
  if (this->is_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_success(), target);
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_error_code(), target);
  }

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  return target;
}

size_t DeleteServingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 4;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serving_id());
  }

  // int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_success());
  }

  // int32 error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteServingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteServingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteServingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
    MergeFrom(*source);
  }
}

void DeleteServingResponse::MergeFrom(const DeleteServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from.serving_id() != 0) {
    _internal_set_serving_id(from._internal_serving_id());
  }
  if (from.is_success() != 0) {
    _internal_set_is_success(from._internal_is_success());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void DeleteServingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteServingResponse::CopyFrom(const DeleteServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServingResponse::IsInitialized() const {
  return true;
}

void DeleteServingResponse::InternalSwap(DeleteServingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteServingResponse, error_code_)
      + sizeof(DeleteServingResponse::error_code_)
      - PROTOBUF_FIELD_OFFSET(DeleteServingResponse, serving_id_)>(
          reinterpret_cast<char*>(&serving_id_),
          reinterpret_cast<char*>(&other->serving_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteServingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::CreateServingRequest* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::CreateServingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::CreateServingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::CreateServingResponse* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::CreateServingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::CreateServingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::EnableServingRequest* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::EnableServingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::EnableServingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::EnableServingResponse* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::EnableServingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::EnableServingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::UpdateServingRequest* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::UpdateServingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::UpdateServingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::UpdateServingResponse* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::UpdateServingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::UpdateServingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::QueryServingRequest* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::QueryServingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::QueryServingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::ServingInfo* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::ServingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::ServingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::QueryServingResponse* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::QueryServingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::QueryServingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::DisableServingRequest* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::DisableServingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::DisableServingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::DisableServingResponse* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::DisableServingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::DisableServingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::DeleteServingRequest* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::DeleteServingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::DeleteServingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::DeleteServingResponse* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::DeleteServingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::DeleteServingResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
