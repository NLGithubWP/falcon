// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2eproto;
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {
class ModelPublishRequest;
class ModelPublishRequestDefaultTypeInternal;
extern ModelPublishRequestDefaultTypeInternal _ModelPublishRequest_default_instance_;
class ModelPublishResponse;
class ModelPublishResponseDefaultTypeInternal;
extern ModelPublishResponseDefaultTypeInternal _ModelPublishResponse_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::nus::dbsystem::falcon::v0::ModelPublishRequest* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::ModelPublishRequest>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::ModelPublishResponse* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::ModelPublishResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

// ===================================================================

class ModelPublishRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.ModelPublishRequest) */ {
 public:
  inline ModelPublishRequest() : ModelPublishRequest(nullptr) {}
  virtual ~ModelPublishRequest();

  ModelPublishRequest(const ModelPublishRequest& from);
  ModelPublishRequest(ModelPublishRequest&& from) noexcept
    : ModelPublishRequest() {
    *this = ::std::move(from);
  }

  inline ModelPublishRequest& operator=(const ModelPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelPublishRequest& operator=(ModelPublishRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelPublishRequest& default_instance();

  static inline const ModelPublishRequest* internal_default_instance() {
    return reinterpret_cast<const ModelPublishRequest*>(
               &_ModelPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelPublishRequest& a, ModelPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelPublishRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelPublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelPublishRequest* New() const final {
    return CreateMaybeMessage<ModelPublishRequest>(nullptr);
  }

  ModelPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelPublishRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelPublishRequest& from);
  void MergeFrom(const ModelPublishRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelPublishRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.ModelPublishRequest";
  }
  protected:
  explicit ModelPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 1,
    kInitiatorPartyIdFieldNumber = 2,
  };
  // int32 model_id = 1;
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 initiator_party_id = 2;
  void clear_initiator_party_id();
  ::PROTOBUF_NAMESPACE_ID::int32 initiator_party_id() const;
  void set_initiator_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_initiator_party_id() const;
  void _internal_set_initiator_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 initiator_party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class ModelPublishResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.ModelPublishResponse) */ {
 public:
  inline ModelPublishResponse() : ModelPublishResponse(nullptr) {}
  virtual ~ModelPublishResponse();

  ModelPublishResponse(const ModelPublishResponse& from);
  ModelPublishResponse(ModelPublishResponse&& from) noexcept
    : ModelPublishResponse() {
    *this = ::std::move(from);
  }

  inline ModelPublishResponse& operator=(const ModelPublishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelPublishResponse& operator=(ModelPublishResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelPublishResponse& default_instance();

  static inline const ModelPublishResponse* internal_default_instance() {
    return reinterpret_cast<const ModelPublishResponse*>(
               &_ModelPublishResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelPublishResponse& a, ModelPublishResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelPublishResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelPublishResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelPublishResponse* New() const final {
    return CreateMaybeMessage<ModelPublishResponse>(nullptr);
  }

  ModelPublishResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelPublishResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelPublishResponse& from);
  void MergeFrom(const ModelPublishResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelPublishResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.ModelPublishResponse";
  }
  protected:
  explicit ModelPublishResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 5,
    kModelIdFieldNumber = 1,
    kInitiatorPartyIdFieldNumber = 2,
    kIsSuccessFieldNumber = 3,
    kErrorCodeFieldNumber = 4,
  };
  // string error_msg = 5;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 model_id = 1;
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 initiator_party_id = 2;
  void clear_initiator_party_id();
  ::PROTOBUF_NAMESPACE_ID::int32 initiator_party_id() const;
  void set_initiator_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_initiator_party_id() const;
  void _internal_set_initiator_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_success = 3;
  void clear_is_success();
  ::PROTOBUF_NAMESPACE_ID::int32 is_success() const;
  void set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_success() const;
  void _internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 error_code = 4;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 initiator_party_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_success_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelPublishRequest

// int32 model_id = 1;
inline void ModelPublishRequest::clear_model_id() {
  model_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishRequest::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishRequest::model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishRequest.model_id)
  return _internal_model_id();
}
inline void ModelPublishRequest::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_id_ = value;
}
inline void ModelPublishRequest::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishRequest.model_id)
}

// int32 initiator_party_id = 2;
inline void ModelPublishRequest::clear_initiator_party_id() {
  initiator_party_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishRequest::_internal_initiator_party_id() const {
  return initiator_party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishRequest::initiator_party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishRequest.initiator_party_id)
  return _internal_initiator_party_id();
}
inline void ModelPublishRequest::_internal_set_initiator_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  initiator_party_id_ = value;
}
inline void ModelPublishRequest::set_initiator_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_initiator_party_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishRequest.initiator_party_id)
}

// -------------------------------------------------------------------

// ModelPublishResponse

// int32 model_id = 1;
inline void ModelPublishResponse::clear_model_id() {
  model_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishResponse::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishResponse::model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishResponse.model_id)
  return _internal_model_id();
}
inline void ModelPublishResponse::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_id_ = value;
}
inline void ModelPublishResponse::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishResponse.model_id)
}

// int32 initiator_party_id = 2;
inline void ModelPublishResponse::clear_initiator_party_id() {
  initiator_party_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishResponse::_internal_initiator_party_id() const {
  return initiator_party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishResponse::initiator_party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishResponse.initiator_party_id)
  return _internal_initiator_party_id();
}
inline void ModelPublishResponse::_internal_set_initiator_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  initiator_party_id_ = value;
}
inline void ModelPublishResponse::set_initiator_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_initiator_party_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishResponse.initiator_party_id)
}

// int32 is_success = 3;
inline void ModelPublishResponse::clear_is_success() {
  is_success_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishResponse::_internal_is_success() const {
  return is_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishResponse.is_success)
  return _internal_is_success();
}
inline void ModelPublishResponse::_internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_success_ = value;
}
inline void ModelPublishResponse::set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishResponse.is_success)
}

// int32 error_code = 4;
inline void ModelPublishResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishResponse::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelPublishResponse::error_code() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_code)
  return _internal_error_code();
}
inline void ModelPublishResponse::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void ModelPublishResponse::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_code)
}

// string error_msg = 5;
inline void ModelPublishResponse::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& ModelPublishResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
  return _internal_error_msg();
}
inline void ModelPublishResponse::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
}
inline std::string* ModelPublishResponse::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& ModelPublishResponse::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void ModelPublishResponse::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModelPublishResponse::set_error_msg(std::string&& value) {
  
  error_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
}
inline void ModelPublishResponse::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
}
inline void ModelPublishResponse::set_error_msg(const char* value,
    size_t size) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
}
inline std::string* ModelPublishResponse::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModelPublishResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelPublishResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_2eproto
