// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phe_keys.proto

#include "phe_keys.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {
class PHEKeysDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PHEKeys> _instance;
} _PHEKeys_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com
static void InitDefaultsscc_info_PHEKeys_phe_5fkeys_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_PHEKeys_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::PHEKeys();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PHEKeys_phe_5fkeys_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PHEKeys_phe_5fkeys_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_phe_5fkeys_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_phe_5fkeys_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_phe_5fkeys_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_phe_5fkeys_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::PHEKeys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::PHEKeys, public_key_s_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::PHEKeys, public_key_w_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::PHEKeys, public_key_l_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::PHEKeys, public_key_n_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::PHEKeys, public_key_g_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::PHEKeys, public_key_delta_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::PHEKeys, auth_server_i_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::PHEKeys, auth_server_si_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::nus::dbsystem::falcon::v0::PHEKeys)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_PHEKeys_default_instance_),
};

const char descriptor_table_protodef_phe_5fkeys_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016phe_keys.proto\022\032com.nus.dbsystem.falco"
  "n.v0\"\300\001\n\007PHEKeys\022\024\n\014public_key_s\030\001 \001(\005\022\024"
  "\n\014public_key_w\030\002 \001(\005\022\024\n\014public_key_l\030\003 \001"
  "(\005\022\024\n\014public_key_n\030\004 \003(\t\022\024\n\014public_key_g"
  "\030\005 \001(\t\022\030\n\020public_key_delta\030\006 \001(\t\022\025\n\rauth"
  "_server_i\030\007 \001(\005\022\026\n\016auth_server_si\030\010 \001(\tb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_phe_5fkeys_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_phe_5fkeys_2eproto_sccs[1] = {
  &scc_info_PHEKeys_phe_5fkeys_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_phe_5fkeys_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_phe_5fkeys_2eproto = {
  false, false, descriptor_table_protodef_phe_5fkeys_2eproto, "phe_keys.proto", 247,
  &descriptor_table_phe_5fkeys_2eproto_once, descriptor_table_phe_5fkeys_2eproto_sccs, descriptor_table_phe_5fkeys_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_phe_5fkeys_2eproto::offsets,
  file_level_metadata_phe_5fkeys_2eproto, 1, file_level_enum_descriptors_phe_5fkeys_2eproto, file_level_service_descriptors_phe_5fkeys_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_phe_5fkeys_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_phe_5fkeys_2eproto)), true);
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

// ===================================================================

class PHEKeys::_Internal {
 public:
};

PHEKeys::PHEKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  public_key_n_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.PHEKeys)
}
PHEKeys::PHEKeys(const PHEKeys& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      public_key_n_(from.public_key_n_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_g_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key_g().empty()) {
    public_key_g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key_g(), 
      GetArena());
  }
  public_key_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key_delta().empty()) {
    public_key_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key_delta(), 
      GetArena());
  }
  auth_server_si_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_server_si().empty()) {
    auth_server_si_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_server_si(), 
      GetArena());
  }
  ::memcpy(&public_key_s_, &from.public_key_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_server_i_) -
    reinterpret_cast<char*>(&public_key_s_)) + sizeof(auth_server_i_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.PHEKeys)
}

void PHEKeys::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PHEKeys_phe_5fkeys_2eproto.base);
  public_key_g_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_server_si_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&public_key_s_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&auth_server_i_) -
      reinterpret_cast<char*>(&public_key_s_)) + sizeof(auth_server_i_));
}

PHEKeys::~PHEKeys() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.PHEKeys)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PHEKeys::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_key_g_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_server_si_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PHEKeys::ArenaDtor(void* object) {
  PHEKeys* _this = reinterpret_cast< PHEKeys* >(object);
  (void)_this;
}
void PHEKeys::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PHEKeys::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PHEKeys& PHEKeys::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PHEKeys_phe_5fkeys_2eproto.base);
  return *internal_default_instance();
}


void PHEKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_n_.Clear();
  public_key_g_.ClearToEmpty();
  public_key_delta_.ClearToEmpty();
  auth_server_si_.ClearToEmpty();
  ::memset(&public_key_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_server_i_) -
      reinterpret_cast<char*>(&public_key_s_)) + sizeof(auth_server_i_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PHEKeys::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 public_key_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          public_key_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 public_key_w = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          public_key_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 public_key_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          public_key_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string public_key_n = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_public_key_n();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string public_key_g = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_public_key_g();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key_delta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_public_key_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 auth_server_i = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          auth_server_i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_server_si = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_auth_server_si();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PHEKeys::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 public_key_s = 1;
  if (this->public_key_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_public_key_s(), target);
  }

  // int32 public_key_w = 2;
  if (this->public_key_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_public_key_w(), target);
  }

  // int32 public_key_l = 3;
  if (this->public_key_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_public_key_l(), target);
  }

  // repeated string public_key_n = 4;
  for (int i = 0, n = this->_internal_public_key_n_size(); i < n; i++) {
    const auto& s = this->_internal_public_key_n(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n");
    target = stream->WriteString(4, s, target);
  }

  // string public_key_g = 5;
  if (this->public_key_g().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key_g().data(), static_cast<int>(this->_internal_public_key_g().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_public_key_g(), target);
  }

  // string public_key_delta = 6;
  if (this->public_key_delta().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key_delta().data(), static_cast<int>(this->_internal_public_key_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_public_key_delta(), target);
  }

  // int32 auth_server_i = 7;
  if (this->auth_server_i() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_auth_server_i(), target);
  }

  // string auth_server_si = 8;
  if (this->auth_server_si().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_server_si().data(), static_cast<int>(this->_internal_auth_server_si().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_auth_server_si(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.PHEKeys)
  return target;
}

size_t PHEKeys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string public_key_n = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(public_key_n_.size());
  for (int i = 0, n = public_key_n_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      public_key_n_.Get(i));
  }

  // string public_key_g = 5;
  if (this->public_key_g().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key_g());
  }

  // string public_key_delta = 6;
  if (this->public_key_delta().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key_delta());
  }

  // string auth_server_si = 8;
  if (this->auth_server_si().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_server_si());
  }

  // int32 public_key_s = 1;
  if (this->public_key_s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_public_key_s());
  }

  // int32 public_key_w = 2;
  if (this->public_key_w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_public_key_w());
  }

  // int32 public_key_l = 3;
  if (this->public_key_l() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_public_key_l());
  }

  // int32 auth_server_i = 7;
  if (this->auth_server_i() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auth_server_i());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PHEKeys::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  GOOGLE_DCHECK_NE(&from, this);
  const PHEKeys* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PHEKeys>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.PHEKeys)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.PHEKeys)
    MergeFrom(*source);
  }
}

void PHEKeys::MergeFrom(const PHEKeys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_key_n_.MergeFrom(from.public_key_n_);
  if (from.public_key_g().size() > 0) {
    _internal_set_public_key_g(from._internal_public_key_g());
  }
  if (from.public_key_delta().size() > 0) {
    _internal_set_public_key_delta(from._internal_public_key_delta());
  }
  if (from.auth_server_si().size() > 0) {
    _internal_set_auth_server_si(from._internal_auth_server_si());
  }
  if (from.public_key_s() != 0) {
    _internal_set_public_key_s(from._internal_public_key_s());
  }
  if (from.public_key_w() != 0) {
    _internal_set_public_key_w(from._internal_public_key_w());
  }
  if (from.public_key_l() != 0) {
    _internal_set_public_key_l(from._internal_public_key_l());
  }
  if (from.auth_server_i() != 0) {
    _internal_set_auth_server_i(from._internal_auth_server_i());
  }
}

void PHEKeys::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PHEKeys::CopyFrom(const PHEKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PHEKeys::IsInitialized() const {
  return true;
}

void PHEKeys::InternalSwap(PHEKeys* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  public_key_n_.InternalSwap(&other->public_key_n_);
  public_key_g_.Swap(&other->public_key_g_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_key_delta_.Swap(&other->public_key_delta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auth_server_si_.Swap(&other->auth_server_si_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PHEKeys, auth_server_i_)
      + sizeof(PHEKeys::auth_server_i_)
      - PROTOBUF_FIELD_OFFSET(PHEKeys, public_key_s_)>(
          reinterpret_cast<char*>(&public_key_s_),
          reinterpret_cast<char*>(&other->public_key_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PHEKeys::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::PHEKeys* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::PHEKeys >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::PHEKeys >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
