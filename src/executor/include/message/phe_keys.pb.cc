// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phe_keys.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "phe_keys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

namespace {

const ::google::protobuf::Descriptor* PHEKeys_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PHEKeys_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_phe_5fkeys_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_phe_5fkeys_2eproto() {
  protobuf_AddDesc_phe_5fkeys_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "phe_keys.proto");
  GOOGLE_CHECK(file != NULL);
  PHEKeys_descriptor_ = file->message_type(0);
  static const int PHEKeys_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHEKeys, public_key_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHEKeys, public_key_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHEKeys, public_key_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHEKeys, public_key_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHEKeys, public_key_g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHEKeys, public_key_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHEKeys, auth_server_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHEKeys, auth_server_si_),
  };
  PHEKeys_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PHEKeys_descriptor_,
      PHEKeys::default_instance_,
      PHEKeys_offsets_,
      -1,
      -1,
      -1,
      sizeof(PHEKeys),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHEKeys, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHEKeys, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_phe_5fkeys_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PHEKeys_descriptor_, &PHEKeys::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_phe_5fkeys_2eproto() {
  delete PHEKeys::default_instance_;
  delete PHEKeys_reflection_;
}

void protobuf_AddDesc_phe_5fkeys_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_phe_5fkeys_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016phe_keys.proto\022\032com.nus.dbsystem.falco"
    "n.v0\"\300\001\n\007PHEKeys\022\024\n\014public_key_s\030\001 \001(\005\022\024"
    "\n\014public_key_w\030\002 \001(\005\022\024\n\014public_key_l\030\003 \001"
    "(\005\022\024\n\014public_key_n\030\004 \003(\t\022\024\n\014public_key_g"
    "\030\005 \001(\t\022\030\n\020public_key_delta\030\006 \001(\t\022\025\n\rauth"
    "_server_i\030\007 \001(\005\022\026\n\016auth_server_si\030\010 \001(\tb"
    "\006proto3", 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "phe_keys.proto", &protobuf_RegisterTypes);
  PHEKeys::default_instance_ = new PHEKeys();
  PHEKeys::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_phe_5fkeys_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_phe_5fkeys_2eproto {
  StaticDescriptorInitializer_phe_5fkeys_2eproto() {
    protobuf_AddDesc_phe_5fkeys_2eproto();
  }
} static_descriptor_initializer_phe_5fkeys_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PHEKeys::kPublicKeySFieldNumber;
const int PHEKeys::kPublicKeyWFieldNumber;
const int PHEKeys::kPublicKeyLFieldNumber;
const int PHEKeys::kPublicKeyNFieldNumber;
const int PHEKeys::kPublicKeyGFieldNumber;
const int PHEKeys::kPublicKeyDeltaFieldNumber;
const int PHEKeys::kAuthServerIFieldNumber;
const int PHEKeys::kAuthServerSiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PHEKeys::PHEKeys()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.PHEKeys)
}

void PHEKeys::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PHEKeys::PHEKeys(const PHEKeys& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.PHEKeys)
}

void PHEKeys::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  public_key_s_ = 0;
  public_key_w_ = 0;
  public_key_l_ = 0;
  public_key_g_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_delta_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_server_i_ = 0;
  auth_server_si_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PHEKeys::~PHEKeys() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.PHEKeys)
  SharedDtor();
}

void PHEKeys::SharedDtor() {
  public_key_g_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_delta_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_server_si_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PHEKeys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PHEKeys::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PHEKeys_descriptor_;
}

const PHEKeys& PHEKeys::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_phe_5fkeys_2eproto();
  return *default_instance_;
}

PHEKeys* PHEKeys::default_instance_ = NULL;

PHEKeys* PHEKeys::New(::google::protobuf::Arena* arena) const {
  PHEKeys* n = new PHEKeys;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PHEKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.PHEKeys)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PHEKeys, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PHEKeys*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(public_key_s_, public_key_w_);
  ZR_(public_key_l_, auth_server_i_);
  public_key_g_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_delta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_server_si_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  public_key_n_.Clear();
}

bool PHEKeys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 public_key_s = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_key_s_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_public_key_w;
        break;
      }

      // optional int32 public_key_w = 2;
      case 2: {
        if (tag == 16) {
         parse_public_key_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_key_w_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_public_key_l;
        break;
      }

      // optional int32 public_key_l = 3;
      case 3: {
        if (tag == 24) {
         parse_public_key_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &public_key_l_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_public_key_n;
        break;
      }

      // repeated string public_key_n = 4;
      case 4: {
        if (tag == 34) {
         parse_public_key_n:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_public_key_n()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key_n(this->public_key_n_size() - 1).data(),
            this->public_key_n(this->public_key_n_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_public_key_n;
        if (input->ExpectTag(42)) goto parse_public_key_g;
        break;
      }

      // optional string public_key_g = 5;
      case 5: {
        if (tag == 42) {
         parse_public_key_g:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key_g()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key_g().data(), this->public_key_g().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_public_key_delta;
        break;
      }

      // optional string public_key_delta = 6;
      case 6: {
        if (tag == 50) {
         parse_public_key_delta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key_delta()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_key_delta().data(), this->public_key_delta().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_auth_server_i;
        break;
      }

      // optional int32 auth_server_i = 7;
      case 7: {
        if (tag == 56) {
         parse_auth_server_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auth_server_i_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_auth_server_si;
        break;
      }

      // optional string auth_server_si = 8;
      case 8: {
        if (tag == 66) {
         parse_auth_server_si:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_server_si()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth_server_si().data(), this->auth_server_si().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.PHEKeys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.PHEKeys)
  return false;
#undef DO_
}

void PHEKeys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  // optional int32 public_key_s = 1;
  if (this->public_key_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->public_key_s(), output);
  }

  // optional int32 public_key_w = 2;
  if (this->public_key_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->public_key_w(), output);
  }

  // optional int32 public_key_l = 3;
  if (this->public_key_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->public_key_l(), output);
  }

  // repeated string public_key_n = 4;
  for (int i = 0; i < this->public_key_n_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_n(i).data(), this->public_key_n(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->public_key_n(i), output);
  }

  // optional string public_key_g = 5;
  if (this->public_key_g().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_g().data(), this->public_key_g().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->public_key_g(), output);
  }

  // optional string public_key_delta = 6;
  if (this->public_key_delta().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_delta().data(), this->public_key_delta().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->public_key_delta(), output);
  }

  // optional int32 auth_server_i = 7;
  if (this->auth_server_i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->auth_server_i(), output);
  }

  // optional string auth_server_si = 8;
  if (this->auth_server_si().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_server_si().data(), this->auth_server_si().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->auth_server_si(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.PHEKeys)
}

::google::protobuf::uint8* PHEKeys::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  // optional int32 public_key_s = 1;
  if (this->public_key_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->public_key_s(), target);
  }

  // optional int32 public_key_w = 2;
  if (this->public_key_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->public_key_w(), target);
  }

  // optional int32 public_key_l = 3;
  if (this->public_key_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->public_key_l(), target);
  }

  // repeated string public_key_n = 4;
  for (int i = 0; i < this->public_key_n_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_n(i).data(), this->public_key_n(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->public_key_n(i), target);
  }

  // optional string public_key_g = 5;
  if (this->public_key_g().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_g().data(), this->public_key_g().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->public_key_g(), target);
  }

  // optional string public_key_delta = 6;
  if (this->public_key_delta().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_key_delta().data(), this->public_key_delta().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->public_key_delta(), target);
  }

  // optional int32 auth_server_i = 7;
  if (this->auth_server_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->auth_server_i(), target);
  }

  // optional string auth_server_si = 8;
  if (this->auth_server_si().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_server_si().data(), this->auth_server_si().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->auth_server_si(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.PHEKeys)
  return target;
}

int PHEKeys::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  int total_size = 0;

  // optional int32 public_key_s = 1;
  if (this->public_key_s() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_key_s());
  }

  // optional int32 public_key_w = 2;
  if (this->public_key_w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_key_w());
  }

  // optional int32 public_key_l = 3;
  if (this->public_key_l() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->public_key_l());
  }

  // optional string public_key_g = 5;
  if (this->public_key_g().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key_g());
  }

  // optional string public_key_delta = 6;
  if (this->public_key_delta().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_key_delta());
  }

  // optional int32 auth_server_i = 7;
  if (this->auth_server_i() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->auth_server_i());
  }

  // optional string auth_server_si = 8;
  if (this->auth_server_si().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_server_si());
  }

  // repeated string public_key_n = 4;
  total_size += 1 * this->public_key_n_size();
  for (int i = 0; i < this->public_key_n_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->public_key_n(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PHEKeys::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PHEKeys* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PHEKeys>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.PHEKeys)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.PHEKeys)
    MergeFrom(*source);
  }
}

void PHEKeys::MergeFrom(const PHEKeys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  public_key_n_.MergeFrom(from.public_key_n_);
  if (from.public_key_s() != 0) {
    set_public_key_s(from.public_key_s());
  }
  if (from.public_key_w() != 0) {
    set_public_key_w(from.public_key_w());
  }
  if (from.public_key_l() != 0) {
    set_public_key_l(from.public_key_l());
  }
  if (from.public_key_g().size() > 0) {

    public_key_g_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_g_);
  }
  if (from.public_key_delta().size() > 0) {

    public_key_delta_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_delta_);
  }
  if (from.auth_server_i() != 0) {
    set_auth_server_i(from.auth_server_i());
  }
  if (from.auth_server_si().size() > 0) {

    auth_server_si_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_server_si_);
  }
}

void PHEKeys::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PHEKeys::CopyFrom(const PHEKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.PHEKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PHEKeys::IsInitialized() const {

  return true;
}

void PHEKeys::Swap(PHEKeys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PHEKeys::InternalSwap(PHEKeys* other) {
  std::swap(public_key_s_, other->public_key_s_);
  std::swap(public_key_w_, other->public_key_w_);
  std::swap(public_key_l_, other->public_key_l_);
  public_key_n_.UnsafeArenaSwap(&other->public_key_n_);
  public_key_g_.Swap(&other->public_key_g_);
  public_key_delta_.Swap(&other->public_key_delta_);
  std::swap(auth_server_i_, other->auth_server_i_);
  auth_server_si_.Swap(&other->auth_server_si_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PHEKeys::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PHEKeys_descriptor_;
  metadata.reflection = PHEKeys_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PHEKeys

// optional int32 public_key_s = 1;
void PHEKeys::clear_public_key_s() {
  public_key_s_ = 0;
}
 ::google::protobuf::int32 PHEKeys::public_key_s() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_s)
  return public_key_s_;
}
 void PHEKeys::set_public_key_s(::google::protobuf::int32 value) {
  
  public_key_s_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_s)
}

// optional int32 public_key_w = 2;
void PHEKeys::clear_public_key_w() {
  public_key_w_ = 0;
}
 ::google::protobuf::int32 PHEKeys::public_key_w() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_w)
  return public_key_w_;
}
 void PHEKeys::set_public_key_w(::google::protobuf::int32 value) {
  
  public_key_w_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_w)
}

// optional int32 public_key_l = 3;
void PHEKeys::clear_public_key_l() {
  public_key_l_ = 0;
}
 ::google::protobuf::int32 PHEKeys::public_key_l() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_l)
  return public_key_l_;
}
 void PHEKeys::set_public_key_l(::google::protobuf::int32 value) {
  
  public_key_l_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_l)
}

// repeated string public_key_n = 4;
int PHEKeys::public_key_n_size() const {
  return public_key_n_.size();
}
void PHEKeys::clear_public_key_n() {
  public_key_n_.Clear();
}
 const ::std::string& PHEKeys::public_key_n(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  return public_key_n_.Get(index);
}
 ::std::string* PHEKeys::mutable_public_key_n(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  return public_key_n_.Mutable(index);
}
 void PHEKeys::set_public_key_n(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  public_key_n_.Mutable(index)->assign(value);
}
 void PHEKeys::set_public_key_n(int index, const char* value) {
  public_key_n_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
}
 void PHEKeys::set_public_key_n(int index, const char* value, size_t size) {
  public_key_n_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
}
 ::std::string* PHEKeys::add_public_key_n() {
  // @@protoc_insertion_point(field_add_mutable:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  return public_key_n_.Add();
}
 void PHEKeys::add_public_key_n(const ::std::string& value) {
  public_key_n_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
}
 void PHEKeys::add_public_key_n(const char* value) {
  public_key_n_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
}
 void PHEKeys::add_public_key_n(const char* value, size_t size) {
  public_key_n_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PHEKeys::public_key_n() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  return public_key_n_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PHEKeys::mutable_public_key_n() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  return &public_key_n_;
}

// optional string public_key_g = 5;
void PHEKeys::clear_public_key_g() {
  public_key_g_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PHEKeys::public_key_g() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
  return public_key_g_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PHEKeys::set_public_key_g(const ::std::string& value) {
  
  public_key_g_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
}
 void PHEKeys::set_public_key_g(const char* value) {
  
  public_key_g_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
}
 void PHEKeys::set_public_key_g(const char* value, size_t size) {
  
  public_key_g_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
}
 ::std::string* PHEKeys::mutable_public_key_g() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
  return public_key_g_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PHEKeys::release_public_key_g() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
  
  return public_key_g_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PHEKeys::set_allocated_public_key_g(::std::string* public_key_g) {
  if (public_key_g != NULL) {
    
  } else {
    
  }
  public_key_g_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_g);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
}

// optional string public_key_delta = 6;
void PHEKeys::clear_public_key_delta() {
  public_key_delta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PHEKeys::public_key_delta() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
  return public_key_delta_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PHEKeys::set_public_key_delta(const ::std::string& value) {
  
  public_key_delta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
}
 void PHEKeys::set_public_key_delta(const char* value) {
  
  public_key_delta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
}
 void PHEKeys::set_public_key_delta(const char* value, size_t size) {
  
  public_key_delta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
}
 ::std::string* PHEKeys::mutable_public_key_delta() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
  return public_key_delta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PHEKeys::release_public_key_delta() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
  
  return public_key_delta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PHEKeys::set_allocated_public_key_delta(::std::string* public_key_delta) {
  if (public_key_delta != NULL) {
    
  } else {
    
  }
  public_key_delta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_delta);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
}

// optional int32 auth_server_i = 7;
void PHEKeys::clear_auth_server_i() {
  auth_server_i_ = 0;
}
 ::google::protobuf::int32 PHEKeys::auth_server_i() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_i)
  return auth_server_i_;
}
 void PHEKeys::set_auth_server_i(::google::protobuf::int32 value) {
  
  auth_server_i_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_i)
}

// optional string auth_server_si = 8;
void PHEKeys::clear_auth_server_si() {
  auth_server_si_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PHEKeys::auth_server_si() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
  return auth_server_si_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PHEKeys::set_auth_server_si(const ::std::string& value) {
  
  auth_server_si_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
}
 void PHEKeys::set_auth_server_si(const char* value) {
  
  auth_server_si_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
}
 void PHEKeys::set_auth_server_si(const char* value, size_t size) {
  
  auth_server_si_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
}
 ::std::string* PHEKeys::mutable_auth_server_si() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
  return auth_server_si_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PHEKeys::release_auth_server_si() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
  
  return auth_server_si_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PHEKeys::set_allocated_auth_server_si(::std::string* auth_server_si) {
  if (auth_server_si != NULL) {
    
  } else {
    
  }
  auth_server_si_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_server_si);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)
