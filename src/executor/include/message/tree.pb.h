// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tree.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tree_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tree_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tree_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tree_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tree_2eproto;
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {
class EncryptedStatPerSplit;
class EncryptedStatPerSplitDefaultTypeInternal;
extern EncryptedStatPerSplitDefaultTypeInternal _EncryptedStatPerSplit_default_instance_;
class EncryptedStatistics;
class EncryptedStatisticsDefaultTypeInternal;
extern EncryptedStatisticsDefaultTypeInternal _EncryptedStatistics_default_instance_;
class NodeUpdateInfo;
class NodeUpdateInfoDefaultTypeInternal;
extern NodeUpdateInfoDefaultTypeInternal _NodeUpdateInfo_default_instance_;
class SplitInfo;
class SplitInfoDefaultTypeInternal;
extern SplitInfoDefaultTypeInternal _SplitInfo_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit>(Arena*);
template<> ::com::nus::dbsytem::falcon::v0::EncryptedStatistics* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::EncryptedStatistics>(Arena*);
template<> ::com::nus::dbsytem::falcon::v0::NodeUpdateInfo* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::NodeUpdateInfo>(Arena*);
template<> ::com::nus::dbsytem::falcon::v0::SplitInfo* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::SplitInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {

// ===================================================================

class EncryptedStatPerSplit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit) */ {
 public:
  inline EncryptedStatPerSplit() : EncryptedStatPerSplit(nullptr) {}
  virtual ~EncryptedStatPerSplit();

  EncryptedStatPerSplit(const EncryptedStatPerSplit& from);
  EncryptedStatPerSplit(EncryptedStatPerSplit&& from) noexcept
    : EncryptedStatPerSplit() {
    *this = ::std::move(from);
  }

  inline EncryptedStatPerSplit& operator=(const EncryptedStatPerSplit& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedStatPerSplit& operator=(EncryptedStatPerSplit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptedStatPerSplit& default_instance();

  static inline const EncryptedStatPerSplit* internal_default_instance() {
    return reinterpret_cast<const EncryptedStatPerSplit*>(
               &_EncryptedStatPerSplit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EncryptedStatPerSplit& a, EncryptedStatPerSplit& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedStatPerSplit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedStatPerSplit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptedStatPerSplit* New() const final {
    return CreateMaybeMessage<EncryptedStatPerSplit>(nullptr);
  }

  EncryptedStatPerSplit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptedStatPerSplit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptedStatPerSplit& from);
  void MergeFrom(const EncryptedStatPerSplit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedStatPerSplit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit";
  }
  protected:
  explicit EncryptedStatPerSplit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tree_2eproto);
    return ::descriptor_table_tree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedStatFieldNumber = 1,
  };
  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber encrypted_stat = 1;
  int encrypted_stat_size() const;
  private:
  int _internal_encrypted_stat_size() const;
  public:
  void clear_encrypted_stat();
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* mutable_encrypted_stat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
      mutable_encrypted_stat();
  private:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& _internal_encrypted_stat(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* _internal_add_encrypted_stat();
  public:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& encrypted_stat(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* add_encrypted_stat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
      encrypted_stat() const;

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber > encrypted_stat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tree_2eproto;
};
// -------------------------------------------------------------------

class EncryptedStatistics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.EncryptedStatistics) */ {
 public:
  inline EncryptedStatistics() : EncryptedStatistics(nullptr) {}
  virtual ~EncryptedStatistics();

  EncryptedStatistics(const EncryptedStatistics& from);
  EncryptedStatistics(EncryptedStatistics&& from) noexcept
    : EncryptedStatistics() {
    *this = ::std::move(from);
  }

  inline EncryptedStatistics& operator=(const EncryptedStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedStatistics& operator=(EncryptedStatistics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptedStatistics& default_instance();

  static inline const EncryptedStatistics* internal_default_instance() {
    return reinterpret_cast<const EncryptedStatistics*>(
               &_EncryptedStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EncryptedStatistics& a, EncryptedStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedStatistics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedStatistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptedStatistics* New() const final {
    return CreateMaybeMessage<EncryptedStatistics>(nullptr);
  }

  EncryptedStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptedStatistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptedStatistics& from);
  void MergeFrom(const EncryptedStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.EncryptedStatistics";
  }
  protected:
  explicit EncryptedStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tree_2eproto);
    return ::descriptor_table_tree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftSampleNumsOfSplitsFieldNumber = 5,
    kRightSampleNumsOfSplitsFieldNumber = 6,
    kEncryptedStatsOfSplitsFieldNumber = 7,
    kClientIdFieldNumber = 1,
    kNodeIndexFieldNumber = 2,
    kLocalSplitNumFieldNumber = 3,
    kClassesNumFieldNumber = 4,
  };
  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_sample_nums_of_splits = 5;
  int left_sample_nums_of_splits_size() const;
  private:
  int _internal_left_sample_nums_of_splits_size() const;
  public:
  void clear_left_sample_nums_of_splits();
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* mutable_left_sample_nums_of_splits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
      mutable_left_sample_nums_of_splits();
  private:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& _internal_left_sample_nums_of_splits(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* _internal_add_left_sample_nums_of_splits();
  public:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& left_sample_nums_of_splits(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* add_left_sample_nums_of_splits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
      left_sample_nums_of_splits() const;

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_sample_nums_of_splits = 6;
  int right_sample_nums_of_splits_size() const;
  private:
  int _internal_right_sample_nums_of_splits_size() const;
  public:
  void clear_right_sample_nums_of_splits();
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* mutable_right_sample_nums_of_splits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
      mutable_right_sample_nums_of_splits();
  private:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& _internal_right_sample_nums_of_splits(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* _internal_add_right_sample_nums_of_splits();
  public:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& right_sample_nums_of_splits(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* add_right_sample_nums_of_splits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
      right_sample_nums_of_splits() const;

  // repeated .com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit encrypted_stats_of_splits = 7;
  int encrypted_stats_of_splits_size() const;
  private:
  int _internal_encrypted_stats_of_splits_size() const;
  public:
  void clear_encrypted_stats_of_splits();
  ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit* mutable_encrypted_stats_of_splits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit >*
      mutable_encrypted_stats_of_splits();
  private:
  const ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit& _internal_encrypted_stats_of_splits(int index) const;
  ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit* _internal_add_encrypted_stats_of_splits();
  public:
  const ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit& encrypted_stats_of_splits(int index) const;
  ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit* add_encrypted_stats_of_splits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit >&
      encrypted_stats_of_splits() const;

  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 node_index = 2;
  void clear_node_index();
  ::PROTOBUF_NAMESPACE_ID::int32 node_index() const;
  void set_node_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_index() const;
  void _internal_set_node_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 local_split_num = 3;
  void clear_local_split_num();
  ::PROTOBUF_NAMESPACE_ID::int32 local_split_num() const;
  void set_local_split_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_local_split_num() const;
  void _internal_set_local_split_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 classes_num = 4;
  void clear_classes_num();
  ::PROTOBUF_NAMESPACE_ID::int32 classes_num() const;
  void set_classes_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_classes_num() const;
  void _internal_set_classes_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber > left_sample_nums_of_splits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber > right_sample_nums_of_splits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit > encrypted_stats_of_splits_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 local_split_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 classes_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tree_2eproto;
};
// -------------------------------------------------------------------

class NodeUpdateInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.NodeUpdateInfo) */ {
 public:
  inline NodeUpdateInfo() : NodeUpdateInfo(nullptr) {}
  virtual ~NodeUpdateInfo();

  NodeUpdateInfo(const NodeUpdateInfo& from);
  NodeUpdateInfo(NodeUpdateInfo&& from) noexcept
    : NodeUpdateInfo() {
    *this = ::std::move(from);
  }

  inline NodeUpdateInfo& operator=(const NodeUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeUpdateInfo& operator=(NodeUpdateInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeUpdateInfo& default_instance();

  static inline const NodeUpdateInfo* internal_default_instance() {
    return reinterpret_cast<const NodeUpdateInfo*>(
               &_NodeUpdateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NodeUpdateInfo& a, NodeUpdateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeUpdateInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeUpdateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeUpdateInfo* New() const final {
    return CreateMaybeMessage<NodeUpdateInfo>(nullptr);
  }

  NodeUpdateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeUpdateInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeUpdateInfo& from);
  void MergeFrom(const NodeUpdateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeUpdateInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.NodeUpdateInfo";
  }
  protected:
  explicit NodeUpdateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tree_2eproto);
    return ::descriptor_table_tree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftBranchSampleIvsFieldNumber = 7,
    kRightBranchSampleIvsFieldNumber = 8,
    kLeftBranchImpurityFieldNumber = 5,
    kRightBranchImpurityFieldNumber = 6,
    kSourceClientIdFieldNumber = 1,
    kBestClientIdFieldNumber = 2,
    kBestFeatureIdFieldNumber = 3,
    kBestSplitIdFieldNumber = 4,
  };
  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_branch_sample_ivs = 7;
  int left_branch_sample_ivs_size() const;
  private:
  int _internal_left_branch_sample_ivs_size() const;
  public:
  void clear_left_branch_sample_ivs();
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* mutable_left_branch_sample_ivs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
      mutable_left_branch_sample_ivs();
  private:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& _internal_left_branch_sample_ivs(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* _internal_add_left_branch_sample_ivs();
  public:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& left_branch_sample_ivs(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* add_left_branch_sample_ivs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
      left_branch_sample_ivs() const;

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_branch_sample_ivs = 8;
  int right_branch_sample_ivs_size() const;
  private:
  int _internal_right_branch_sample_ivs_size() const;
  public:
  void clear_right_branch_sample_ivs();
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* mutable_right_branch_sample_ivs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
      mutable_right_branch_sample_ivs();
  private:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& _internal_right_branch_sample_ivs(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* _internal_add_right_branch_sample_ivs();
  public:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& right_branch_sample_ivs(int index) const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* add_right_branch_sample_ivs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
      right_branch_sample_ivs() const;

  // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_branch_impurity = 5;
  bool has_left_branch_impurity() const;
  private:
  bool _internal_has_left_branch_impurity() const;
  public:
  void clear_left_branch_impurity();
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& left_branch_impurity() const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* release_left_branch_impurity();
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* mutable_left_branch_impurity();
  void set_allocated_left_branch_impurity(::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* left_branch_impurity);
  private:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& _internal_left_branch_impurity() const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* _internal_mutable_left_branch_impurity();
  public:
  void unsafe_arena_set_allocated_left_branch_impurity(
      ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* left_branch_impurity);
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* unsafe_arena_release_left_branch_impurity();

  // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_branch_impurity = 6;
  bool has_right_branch_impurity() const;
  private:
  bool _internal_has_right_branch_impurity() const;
  public:
  void clear_right_branch_impurity();
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& right_branch_impurity() const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* release_right_branch_impurity();
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* mutable_right_branch_impurity();
  void set_allocated_right_branch_impurity(::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* right_branch_impurity);
  private:
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& _internal_right_branch_impurity() const;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* _internal_mutable_right_branch_impurity();
  public:
  void unsafe_arena_set_allocated_right_branch_impurity(
      ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* right_branch_impurity);
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* unsafe_arena_release_right_branch_impurity();

  // int32 source_client_id = 1;
  void clear_source_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 source_client_id() const;
  void set_source_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source_client_id() const;
  void _internal_set_source_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 best_client_id = 2;
  void clear_best_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 best_client_id() const;
  void set_best_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_best_client_id() const;
  void _internal_set_best_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 best_feature_id = 3;
  void clear_best_feature_id();
  ::PROTOBUF_NAMESPACE_ID::int32 best_feature_id() const;
  void set_best_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_best_feature_id() const;
  void _internal_set_best_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 best_split_id = 4;
  void clear_best_split_id();
  ::PROTOBUF_NAMESPACE_ID::int32 best_split_id() const;
  void set_best_split_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_best_split_id() const;
  void _internal_set_best_split_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber > left_branch_sample_ivs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber > right_branch_sample_ivs_;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* left_branch_impurity_;
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* right_branch_impurity_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 best_client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 best_feature_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 best_split_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tree_2eproto;
};
// -------------------------------------------------------------------

class SplitInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.SplitInfo) */ {
 public:
  inline SplitInfo() : SplitInfo(nullptr) {}
  virtual ~SplitInfo();

  SplitInfo(const SplitInfo& from);
  SplitInfo(SplitInfo&& from) noexcept
    : SplitInfo() {
    *this = ::std::move(from);
  }

  inline SplitInfo& operator=(const SplitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitInfo& operator=(SplitInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitInfo& default_instance();

  static inline const SplitInfo* internal_default_instance() {
    return reinterpret_cast<const SplitInfo*>(
               &_SplitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SplitInfo& a, SplitInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitInfo* New() const final {
    return CreateMaybeMessage<SplitInfo>(nullptr);
  }

  SplitInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitInfo& from);
  void MergeFrom(const SplitInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.SplitInfo";
  }
  protected:
  explicit SplitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tree_2eproto);
    return ::descriptor_table_tree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSplitNumVecFieldNumber = 2,
    kGlobalSplitNumFieldNumber = 1,
  };
  // repeated int32 split_num_vec = 2;
  int split_num_vec_size() const;
  private:
  int _internal_split_num_vec_size() const;
  public:
  void clear_split_num_vec();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_num_vec(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_split_num_vec() const;
  void _internal_add_split_num_vec(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_split_num_vec();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 split_num_vec(int index) const;
  void set_split_num_vec(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_split_num_vec(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      split_num_vec() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_split_num_vec();

  // int32 global_split_num = 1;
  void clear_global_split_num();
  ::PROTOBUF_NAMESPACE_ID::int32 global_split_num() const;
  void set_global_split_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_global_split_num() const;
  void _internal_set_global_split_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.SplitInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > split_num_vec_;
  mutable std::atomic<int> _split_num_vec_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 global_split_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tree_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EncryptedStatPerSplit

// repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber encrypted_stat = 1;
inline int EncryptedStatPerSplit::_internal_encrypted_stat_size() const {
  return encrypted_stat_.size();
}
inline int EncryptedStatPerSplit::encrypted_stat_size() const {
  return _internal_encrypted_stat_size();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncryptedStatPerSplit::mutable_encrypted_stat(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit.encrypted_stat)
  return encrypted_stat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
EncryptedStatPerSplit::mutable_encrypted_stat() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit.encrypted_stat)
  return &encrypted_stat_;
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& EncryptedStatPerSplit::_internal_encrypted_stat(int index) const {
  return encrypted_stat_.Get(index);
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& EncryptedStatPerSplit::encrypted_stat(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit.encrypted_stat)
  return _internal_encrypted_stat(index);
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncryptedStatPerSplit::_internal_add_encrypted_stat() {
  return encrypted_stat_.Add();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncryptedStatPerSplit::add_encrypted_stat() {
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit.encrypted_stat)
  return _internal_add_encrypted_stat();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
EncryptedStatPerSplit::encrypted_stat() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit.encrypted_stat)
  return encrypted_stat_;
}

// -------------------------------------------------------------------

// EncryptedStatistics

// int32 client_id = 1;
inline void EncryptedStatistics::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EncryptedStatistics::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EncryptedStatistics::client_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.EncryptedStatistics.client_id)
  return _internal_client_id();
}
inline void EncryptedStatistics::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void EncryptedStatistics::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.EncryptedStatistics.client_id)
}

// int32 node_index = 2;
inline void EncryptedStatistics::clear_node_index() {
  node_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EncryptedStatistics::_internal_node_index() const {
  return node_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EncryptedStatistics::node_index() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.EncryptedStatistics.node_index)
  return _internal_node_index();
}
inline void EncryptedStatistics::_internal_set_node_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  node_index_ = value;
}
inline void EncryptedStatistics::set_node_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_index(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.EncryptedStatistics.node_index)
}

// int32 local_split_num = 3;
inline void EncryptedStatistics::clear_local_split_num() {
  local_split_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EncryptedStatistics::_internal_local_split_num() const {
  return local_split_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EncryptedStatistics::local_split_num() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.EncryptedStatistics.local_split_num)
  return _internal_local_split_num();
}
inline void EncryptedStatistics::_internal_set_local_split_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  local_split_num_ = value;
}
inline void EncryptedStatistics::set_local_split_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_local_split_num(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.EncryptedStatistics.local_split_num)
}

// int32 classes_num = 4;
inline void EncryptedStatistics::clear_classes_num() {
  classes_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EncryptedStatistics::_internal_classes_num() const {
  return classes_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EncryptedStatistics::classes_num() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.EncryptedStatistics.classes_num)
  return _internal_classes_num();
}
inline void EncryptedStatistics::_internal_set_classes_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  classes_num_ = value;
}
inline void EncryptedStatistics::set_classes_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_classes_num(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.EncryptedStatistics.classes_num)
}

// repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_sample_nums_of_splits = 5;
inline int EncryptedStatistics::_internal_left_sample_nums_of_splits_size() const {
  return left_sample_nums_of_splits_.size();
}
inline int EncryptedStatistics::left_sample_nums_of_splits_size() const {
  return _internal_left_sample_nums_of_splits_size();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncryptedStatistics::mutable_left_sample_nums_of_splits(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.EncryptedStatistics.left_sample_nums_of_splits)
  return left_sample_nums_of_splits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
EncryptedStatistics::mutable_left_sample_nums_of_splits() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.EncryptedStatistics.left_sample_nums_of_splits)
  return &left_sample_nums_of_splits_;
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& EncryptedStatistics::_internal_left_sample_nums_of_splits(int index) const {
  return left_sample_nums_of_splits_.Get(index);
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& EncryptedStatistics::left_sample_nums_of_splits(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.EncryptedStatistics.left_sample_nums_of_splits)
  return _internal_left_sample_nums_of_splits(index);
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncryptedStatistics::_internal_add_left_sample_nums_of_splits() {
  return left_sample_nums_of_splits_.Add();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncryptedStatistics::add_left_sample_nums_of_splits() {
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.EncryptedStatistics.left_sample_nums_of_splits)
  return _internal_add_left_sample_nums_of_splits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
EncryptedStatistics::left_sample_nums_of_splits() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.EncryptedStatistics.left_sample_nums_of_splits)
  return left_sample_nums_of_splits_;
}

// repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_sample_nums_of_splits = 6;
inline int EncryptedStatistics::_internal_right_sample_nums_of_splits_size() const {
  return right_sample_nums_of_splits_.size();
}
inline int EncryptedStatistics::right_sample_nums_of_splits_size() const {
  return _internal_right_sample_nums_of_splits_size();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncryptedStatistics::mutable_right_sample_nums_of_splits(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.EncryptedStatistics.right_sample_nums_of_splits)
  return right_sample_nums_of_splits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
EncryptedStatistics::mutable_right_sample_nums_of_splits() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.EncryptedStatistics.right_sample_nums_of_splits)
  return &right_sample_nums_of_splits_;
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& EncryptedStatistics::_internal_right_sample_nums_of_splits(int index) const {
  return right_sample_nums_of_splits_.Get(index);
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& EncryptedStatistics::right_sample_nums_of_splits(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.EncryptedStatistics.right_sample_nums_of_splits)
  return _internal_right_sample_nums_of_splits(index);
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncryptedStatistics::_internal_add_right_sample_nums_of_splits() {
  return right_sample_nums_of_splits_.Add();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* EncryptedStatistics::add_right_sample_nums_of_splits() {
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.EncryptedStatistics.right_sample_nums_of_splits)
  return _internal_add_right_sample_nums_of_splits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
EncryptedStatistics::right_sample_nums_of_splits() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.EncryptedStatistics.right_sample_nums_of_splits)
  return right_sample_nums_of_splits_;
}

// repeated .com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit encrypted_stats_of_splits = 7;
inline int EncryptedStatistics::_internal_encrypted_stats_of_splits_size() const {
  return encrypted_stats_of_splits_.size();
}
inline int EncryptedStatistics::encrypted_stats_of_splits_size() const {
  return _internal_encrypted_stats_of_splits_size();
}
inline void EncryptedStatistics::clear_encrypted_stats_of_splits() {
  encrypted_stats_of_splits_.Clear();
}
inline ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit* EncryptedStatistics::mutable_encrypted_stats_of_splits(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.EncryptedStatistics.encrypted_stats_of_splits)
  return encrypted_stats_of_splits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit >*
EncryptedStatistics::mutable_encrypted_stats_of_splits() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.EncryptedStatistics.encrypted_stats_of_splits)
  return &encrypted_stats_of_splits_;
}
inline const ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit& EncryptedStatistics::_internal_encrypted_stats_of_splits(int index) const {
  return encrypted_stats_of_splits_.Get(index);
}
inline const ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit& EncryptedStatistics::encrypted_stats_of_splits(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.EncryptedStatistics.encrypted_stats_of_splits)
  return _internal_encrypted_stats_of_splits(index);
}
inline ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit* EncryptedStatistics::_internal_add_encrypted_stats_of_splits() {
  return encrypted_stats_of_splits_.Add();
}
inline ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit* EncryptedStatistics::add_encrypted_stats_of_splits() {
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.EncryptedStatistics.encrypted_stats_of_splits)
  return _internal_add_encrypted_stats_of_splits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit >&
EncryptedStatistics::encrypted_stats_of_splits() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.EncryptedStatistics.encrypted_stats_of_splits)
  return encrypted_stats_of_splits_;
}

// -------------------------------------------------------------------

// NodeUpdateInfo

// int32 source_client_id = 1;
inline void NodeUpdateInfo::clear_source_client_id() {
  source_client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeUpdateInfo::_internal_source_client_id() const {
  return source_client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeUpdateInfo::source_client_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.source_client_id)
  return _internal_source_client_id();
}
inline void NodeUpdateInfo::_internal_set_source_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_client_id_ = value;
}
inline void NodeUpdateInfo::set_source_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source_client_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.source_client_id)
}

// int32 best_client_id = 2;
inline void NodeUpdateInfo::clear_best_client_id() {
  best_client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeUpdateInfo::_internal_best_client_id() const {
  return best_client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeUpdateInfo::best_client_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.best_client_id)
  return _internal_best_client_id();
}
inline void NodeUpdateInfo::_internal_set_best_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  best_client_id_ = value;
}
inline void NodeUpdateInfo::set_best_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_best_client_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.best_client_id)
}

// int32 best_feature_id = 3;
inline void NodeUpdateInfo::clear_best_feature_id() {
  best_feature_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeUpdateInfo::_internal_best_feature_id() const {
  return best_feature_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeUpdateInfo::best_feature_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.best_feature_id)
  return _internal_best_feature_id();
}
inline void NodeUpdateInfo::_internal_set_best_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  best_feature_id_ = value;
}
inline void NodeUpdateInfo::set_best_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_best_feature_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.best_feature_id)
}

// int32 best_split_id = 4;
inline void NodeUpdateInfo::clear_best_split_id() {
  best_split_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeUpdateInfo::_internal_best_split_id() const {
  return best_split_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeUpdateInfo::best_split_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.best_split_id)
  return _internal_best_split_id();
}
inline void NodeUpdateInfo::_internal_set_best_split_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  best_split_id_ = value;
}
inline void NodeUpdateInfo::set_best_split_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_best_split_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.best_split_id)
}

// .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_branch_impurity = 5;
inline bool NodeUpdateInfo::_internal_has_left_branch_impurity() const {
  return this != internal_default_instance() && left_branch_impurity_ != nullptr;
}
inline bool NodeUpdateInfo::has_left_branch_impurity() const {
  return _internal_has_left_branch_impurity();
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& NodeUpdateInfo::_internal_left_branch_impurity() const {
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* p = left_branch_impurity_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber&>(
      ::com::nus::dbsytem::falcon::v0::_FixedPointEncodedNumber_default_instance_);
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& NodeUpdateInfo::left_branch_impurity() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.left_branch_impurity)
  return _internal_left_branch_impurity();
}
inline void NodeUpdateInfo::unsafe_arena_set_allocated_left_branch_impurity(
    ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* left_branch_impurity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_branch_impurity_);
  }
  left_branch_impurity_ = left_branch_impurity;
  if (left_branch_impurity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.left_branch_impurity)
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::release_left_branch_impurity() {
  
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* temp = left_branch_impurity_;
  left_branch_impurity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::unsafe_arena_release_left_branch_impurity() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.left_branch_impurity)
  
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* temp = left_branch_impurity_;
  left_branch_impurity_ = nullptr;
  return temp;
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::_internal_mutable_left_branch_impurity() {
  
  if (left_branch_impurity_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber>(GetArena());
    left_branch_impurity_ = p;
  }
  return left_branch_impurity_;
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::mutable_left_branch_impurity() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.left_branch_impurity)
  return _internal_mutable_left_branch_impurity();
}
inline void NodeUpdateInfo::set_allocated_left_branch_impurity(::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* left_branch_impurity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_branch_impurity_);
  }
  if (left_branch_impurity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_branch_impurity)->GetArena();
    if (message_arena != submessage_arena) {
      left_branch_impurity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_branch_impurity, submessage_arena);
    }
    
  } else {
    
  }
  left_branch_impurity_ = left_branch_impurity;
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.left_branch_impurity)
}

// .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_branch_impurity = 6;
inline bool NodeUpdateInfo::_internal_has_right_branch_impurity() const {
  return this != internal_default_instance() && right_branch_impurity_ != nullptr;
}
inline bool NodeUpdateInfo::has_right_branch_impurity() const {
  return _internal_has_right_branch_impurity();
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& NodeUpdateInfo::_internal_right_branch_impurity() const {
  const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* p = right_branch_impurity_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber&>(
      ::com::nus::dbsytem::falcon::v0::_FixedPointEncodedNumber_default_instance_);
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& NodeUpdateInfo::right_branch_impurity() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.right_branch_impurity)
  return _internal_right_branch_impurity();
}
inline void NodeUpdateInfo::unsafe_arena_set_allocated_right_branch_impurity(
    ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* right_branch_impurity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_branch_impurity_);
  }
  right_branch_impurity_ = right_branch_impurity;
  if (right_branch_impurity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.right_branch_impurity)
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::release_right_branch_impurity() {
  
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* temp = right_branch_impurity_;
  right_branch_impurity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::unsafe_arena_release_right_branch_impurity() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.right_branch_impurity)
  
  ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* temp = right_branch_impurity_;
  right_branch_impurity_ = nullptr;
  return temp;
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::_internal_mutable_right_branch_impurity() {
  
  if (right_branch_impurity_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber>(GetArena());
    right_branch_impurity_ = p;
  }
  return right_branch_impurity_;
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::mutable_right_branch_impurity() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.right_branch_impurity)
  return _internal_mutable_right_branch_impurity();
}
inline void NodeUpdateInfo::set_allocated_right_branch_impurity(::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* right_branch_impurity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_branch_impurity_);
  }
  if (right_branch_impurity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_branch_impurity)->GetArena();
    if (message_arena != submessage_arena) {
      right_branch_impurity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_branch_impurity, submessage_arena);
    }
    
  } else {
    
  }
  right_branch_impurity_ = right_branch_impurity;
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.right_branch_impurity)
}

// repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_branch_sample_ivs = 7;
inline int NodeUpdateInfo::_internal_left_branch_sample_ivs_size() const {
  return left_branch_sample_ivs_.size();
}
inline int NodeUpdateInfo::left_branch_sample_ivs_size() const {
  return _internal_left_branch_sample_ivs_size();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::mutable_left_branch_sample_ivs(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.left_branch_sample_ivs)
  return left_branch_sample_ivs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
NodeUpdateInfo::mutable_left_branch_sample_ivs() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.left_branch_sample_ivs)
  return &left_branch_sample_ivs_;
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& NodeUpdateInfo::_internal_left_branch_sample_ivs(int index) const {
  return left_branch_sample_ivs_.Get(index);
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& NodeUpdateInfo::left_branch_sample_ivs(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.left_branch_sample_ivs)
  return _internal_left_branch_sample_ivs(index);
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::_internal_add_left_branch_sample_ivs() {
  return left_branch_sample_ivs_.Add();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::add_left_branch_sample_ivs() {
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.left_branch_sample_ivs)
  return _internal_add_left_branch_sample_ivs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
NodeUpdateInfo::left_branch_sample_ivs() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.left_branch_sample_ivs)
  return left_branch_sample_ivs_;
}

// repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_branch_sample_ivs = 8;
inline int NodeUpdateInfo::_internal_right_branch_sample_ivs_size() const {
  return right_branch_sample_ivs_.size();
}
inline int NodeUpdateInfo::right_branch_sample_ivs_size() const {
  return _internal_right_branch_sample_ivs_size();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::mutable_right_branch_sample_ivs(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.right_branch_sample_ivs)
  return right_branch_sample_ivs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >*
NodeUpdateInfo::mutable_right_branch_sample_ivs() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.right_branch_sample_ivs)
  return &right_branch_sample_ivs_;
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& NodeUpdateInfo::_internal_right_branch_sample_ivs(int index) const {
  return right_branch_sample_ivs_.Get(index);
}
inline const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& NodeUpdateInfo::right_branch_sample_ivs(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.right_branch_sample_ivs)
  return _internal_right_branch_sample_ivs(index);
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::_internal_add_right_branch_sample_ivs() {
  return right_branch_sample_ivs_.Add();
}
inline ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber* NodeUpdateInfo::add_right_branch_sample_ivs() {
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.right_branch_sample_ivs)
  return _internal_add_right_branch_sample_ivs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber >&
NodeUpdateInfo::right_branch_sample_ivs() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.NodeUpdateInfo.right_branch_sample_ivs)
  return right_branch_sample_ivs_;
}

// -------------------------------------------------------------------

// SplitInfo

// int32 global_split_num = 1;
inline void SplitInfo::clear_global_split_num() {
  global_split_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitInfo::_internal_global_split_num() const {
  return global_split_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitInfo::global_split_num() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.SplitInfo.global_split_num)
  return _internal_global_split_num();
}
inline void SplitInfo::_internal_set_global_split_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  global_split_num_ = value;
}
inline void SplitInfo::set_global_split_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_global_split_num(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.SplitInfo.global_split_num)
}

// repeated int32 split_num_vec = 2;
inline int SplitInfo::_internal_split_num_vec_size() const {
  return split_num_vec_.size();
}
inline int SplitInfo::split_num_vec_size() const {
  return _internal_split_num_vec_size();
}
inline void SplitInfo::clear_split_num_vec() {
  split_num_vec_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitInfo::_internal_split_num_vec(int index) const {
  return split_num_vec_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitInfo::split_num_vec(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.SplitInfo.split_num_vec)
  return _internal_split_num_vec(index);
}
inline void SplitInfo::set_split_num_vec(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  split_num_vec_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.SplitInfo.split_num_vec)
}
inline void SplitInfo::_internal_add_split_num_vec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  split_num_vec_.Add(value);
}
inline void SplitInfo::add_split_num_vec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_split_num_vec(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.SplitInfo.split_num_vec)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SplitInfo::_internal_split_num_vec() const {
  return split_num_vec_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SplitInfo::split_num_vec() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.SplitInfo.split_num_vec)
  return _internal_split_num_vec();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SplitInfo::_internal_mutable_split_num_vec() {
  return &split_num_vec_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SplitInfo::mutable_split_num_vec() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.SplitInfo.split_num_vec)
  return _internal_mutable_split_num_vec();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tree_2eproto
