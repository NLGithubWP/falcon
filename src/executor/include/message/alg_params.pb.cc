// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alg_params.proto

#include "alg_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {
class LogisticRegressionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogisticRegressionParams> _instance;
} _LogisticRegressionParams_default_instance_;
class DecisionTreeParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecisionTreeParams> _instance;
} _DecisionTreeParams_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com
static void InitDefaultsscc_info_DecisionTreeParams_alg_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_DecisionTreeParams_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::DecisionTreeParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecisionTreeParams_alg_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DecisionTreeParams_alg_5fparams_2eproto}, {}};

static void InitDefaultsscc_info_LogisticRegressionParams_alg_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_LogisticRegressionParams_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::LogisticRegressionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogisticRegressionParams_alg_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogisticRegressionParams_alg_5fparams_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_alg_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_alg_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_alg_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_alg_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, batch_size_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, max_iteration_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, converge_threshold_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, with_regularization_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, alpha_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, learning_rate_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, decay_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, penalty_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, optimizer_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, multi_class_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, metric_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams, differential_privacy_budget_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, tree_type_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, criterion_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, split_strategy_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, class_num_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, max_depth_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, max_bins_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, min_samples_split_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, min_samples_leaf_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, max_leaf_nodes_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, min_impurity_decrease_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, min_impurity_split_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::DecisionTreeParams, dp_budget_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::nus::dbsytem::falcon::v0::LogisticRegressionParams)},
  { 17, -1, sizeof(::com::nus::dbsytem::falcon::v0::DecisionTreeParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_LogisticRegressionParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_DecisionTreeParams_default_instance_),
};

const char descriptor_table_protodef_alg_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020alg_params.proto\022\031com.nus.dbsytem.falc"
  "on.v0\"\241\002\n\030LogisticRegressionParams\022\022\n\nba"
  "tch_size\030\001 \001(\005\022\025\n\rmax_iteration\030\002 \001(\005\022\032\n"
  "\022converge_threshold\030\003 \001(\002\022\033\n\023with_regula"
  "rization\030\004 \001(\005\022\r\n\005alpha\030\005 \001(\002\022\025\n\rlearnin"
  "g_rate\030\006 \001(\002\022\r\n\005decay\030\007 \001(\002\022\017\n\007penalty\030\010"
  " \001(\t\022\021\n\toptimizer\030\t \001(\t\022\023\n\013multi_class\030\n"
  " \001(\t\022\016\n\006metric\030\013 \001(\t\022#\n\033differential_pri"
  "vacy_budget\030\014 \001(\002\"\245\002\n\022DecisionTreeParams"
  "\022\021\n\ttree_type\030\001 \001(\t\022\021\n\tcriterion\030\002 \001(\t\022\026"
  "\n\016split_strategy\030\003 \001(\t\022\021\n\tclass_num\030\004 \001("
  "\005\022\021\n\tmax_depth\030\005 \001(\005\022\020\n\010max_bins\030\006 \001(\005\022\031"
  "\n\021min_samples_split\030\007 \001(\005\022\030\n\020min_samples"
  "_leaf\030\010 \001(\005\022\026\n\016max_leaf_nodes\030\t \001(\005\022\035\n\025m"
  "in_impurity_decrease\030\n \001(\001\022\032\n\022min_impuri"
  "ty_split\030\013 \001(\001\022\021\n\tdp_budget\030\014 \001(\001B\010Z\006com"
  "monb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_alg_5fparams_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_alg_5fparams_2eproto_sccs[2] = {
  &scc_info_DecisionTreeParams_alg_5fparams_2eproto.base,
  &scc_info_LogisticRegressionParams_alg_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_alg_5fparams_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_alg_5fparams_2eproto = {
  false, false, descriptor_table_protodef_alg_5fparams_2eproto, "alg_params.proto", 651,
  &descriptor_table_alg_5fparams_2eproto_once, descriptor_table_alg_5fparams_2eproto_sccs, descriptor_table_alg_5fparams_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_alg_5fparams_2eproto::offsets,
  file_level_metadata_alg_5fparams_2eproto, 2, file_level_enum_descriptors_alg_5fparams_2eproto, file_level_service_descriptors_alg_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_alg_5fparams_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_alg_5fparams_2eproto)), true);
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {

// ===================================================================

class LogisticRegressionParams::_Internal {
 public:
};

LogisticRegressionParams::LogisticRegressionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
}
LogisticRegressionParams::LogisticRegressionParams(const LogisticRegressionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  penalty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_penalty().empty()) {
    penalty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_penalty(), 
      GetArena());
  }
  optimizer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_optimizer().empty()) {
    optimizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_optimizer(), 
      GetArena());
  }
  multi_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multi_class().empty()) {
    multi_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_multi_class(), 
      GetArena());
  }
  metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metric().empty()) {
    metric_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metric(), 
      GetArena());
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&differential_privacy_budget_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(differential_privacy_budget_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
}

void LogisticRegressionParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogisticRegressionParams_alg_5fparams_2eproto.base);
  penalty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optimizer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multi_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&batch_size_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&differential_privacy_budget_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(differential_privacy_budget_));
}

LogisticRegressionParams::~LogisticRegressionParams() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogisticRegressionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  penalty_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optimizer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multi_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metric_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogisticRegressionParams::ArenaDtor(void* object) {
  LogisticRegressionParams* _this = reinterpret_cast< LogisticRegressionParams* >(object);
  (void)_this;
}
void LogisticRegressionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogisticRegressionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogisticRegressionParams& LogisticRegressionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogisticRegressionParams_alg_5fparams_2eproto.base);
  return *internal_default_instance();
}


void LogisticRegressionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  penalty_.ClearToEmpty();
  optimizer_.ClearToEmpty();
  multi_class_.ClearToEmpty();
  metric_.ClearToEmpty();
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&differential_privacy_budget_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(differential_privacy_budget_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogisticRegressionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 batch_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_iteration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float converge_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          converge_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 with_regularization = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          with_regularization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float alpha = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float learning_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          learning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float decay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string penalty = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_penalty();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string optimizer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_optimizer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multi_class = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_multi_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metric = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_metric();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float differential_privacy_budget = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          differential_privacy_budget_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogisticRegressionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 batch_size = 1;
  if (this->batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_batch_size(), target);
  }

  // int32 max_iteration = 2;
  if (this->max_iteration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_iteration(), target);
  }

  // float converge_threshold = 3;
  if (!(this->converge_threshold() <= 0 && this->converge_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_converge_threshold(), target);
  }

  // int32 with_regularization = 4;
  if (this->with_regularization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_with_regularization(), target);
  }

  // float alpha = 5;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_alpha(), target);
  }

  // float learning_rate = 6;
  if (!(this->learning_rate() <= 0 && this->learning_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_learning_rate(), target);
  }

  // float decay = 7;
  if (!(this->decay() <= 0 && this->decay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_decay(), target);
  }

  // string penalty = 8;
  if (this->penalty().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_penalty().data(), static_cast<int>(this->_internal_penalty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_penalty(), target);
  }

  // string optimizer = 9;
  if (this->optimizer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optimizer().data(), static_cast<int>(this->_internal_optimizer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_optimizer(), target);
  }

  // string multi_class = 10;
  if (this->multi_class().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multi_class().data(), static_cast<int>(this->_internal_multi_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_multi_class(), target);
  }

  // string metric = 11;
  if (this->metric().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric().data(), static_cast<int>(this->_internal_metric().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_metric(), target);
  }

  // float differential_privacy_budget = 12;
  if (!(this->differential_privacy_budget() <= 0 && this->differential_privacy_budget() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_differential_privacy_budget(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  return target;
}

size_t LogisticRegressionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string penalty = 8;
  if (this->penalty().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_penalty());
  }

  // string optimizer = 9;
  if (this->optimizer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optimizer());
  }

  // string multi_class = 10;
  if (this->multi_class().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multi_class());
  }

  // string metric = 11;
  if (this->metric().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric());
  }

  // int32 batch_size = 1;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_size());
  }

  // int32 max_iteration = 2;
  if (this->max_iteration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_iteration());
  }

  // float converge_threshold = 3;
  if (!(this->converge_threshold() <= 0 && this->converge_threshold() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 with_regularization = 4;
  if (this->with_regularization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_with_regularization());
  }

  // float alpha = 5;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float learning_rate = 6;
  if (!(this->learning_rate() <= 0 && this->learning_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // float decay = 7;
  if (!(this->decay() <= 0 && this->decay() >= 0)) {
    total_size += 1 + 4;
  }

  // float differential_privacy_budget = 12;
  if (!(this->differential_privacy_budget() <= 0 && this->differential_privacy_budget() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogisticRegressionParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LogisticRegressionParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogisticRegressionParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
    MergeFrom(*source);
  }
}

void LogisticRegressionParams::MergeFrom(const LogisticRegressionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.penalty().size() > 0) {
    _internal_set_penalty(from._internal_penalty());
  }
  if (from.optimizer().size() > 0) {
    _internal_set_optimizer(from._internal_optimizer());
  }
  if (from.multi_class().size() > 0) {
    _internal_set_multi_class(from._internal_multi_class());
  }
  if (from.metric().size() > 0) {
    _internal_set_metric(from._internal_metric());
  }
  if (from.batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
  if (from.max_iteration() != 0) {
    _internal_set_max_iteration(from._internal_max_iteration());
  }
  if (!(from.converge_threshold() <= 0 && from.converge_threshold() >= 0)) {
    _internal_set_converge_threshold(from._internal_converge_threshold());
  }
  if (from.with_regularization() != 0) {
    _internal_set_with_regularization(from._internal_with_regularization());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
  if (!(from.learning_rate() <= 0 && from.learning_rate() >= 0)) {
    _internal_set_learning_rate(from._internal_learning_rate());
  }
  if (!(from.decay() <= 0 && from.decay() >= 0)) {
    _internal_set_decay(from._internal_decay());
  }
  if (!(from.differential_privacy_budget() <= 0 && from.differential_privacy_budget() >= 0)) {
    _internal_set_differential_privacy_budget(from._internal_differential_privacy_budget());
  }
}

void LogisticRegressionParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogisticRegressionParams::CopyFrom(const LogisticRegressionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogisticRegressionParams::IsInitialized() const {
  return true;
}

void LogisticRegressionParams::InternalSwap(LogisticRegressionParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  penalty_.Swap(&other->penalty_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optimizer_.Swap(&other->optimizer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  multi_class_.Swap(&other->multi_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metric_.Swap(&other->metric_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogisticRegressionParams, differential_privacy_budget_)
      + sizeof(LogisticRegressionParams::differential_privacy_budget_)
      - PROTOBUF_FIELD_OFFSET(LogisticRegressionParams, batch_size_)>(
          reinterpret_cast<char*>(&batch_size_),
          reinterpret_cast<char*>(&other->batch_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogisticRegressionParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DecisionTreeParams::_Internal {
 public:
};

DecisionTreeParams::DecisionTreeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
}
DecisionTreeParams::DecisionTreeParams(const DecisionTreeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tree_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tree_type().empty()) {
    tree_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tree_type(), 
      GetArena());
  }
  criterion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_criterion().empty()) {
    criterion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_criterion(), 
      GetArena());
  }
  split_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_split_strategy().empty()) {
    split_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_split_strategy(), 
      GetArena());
  }
  ::memcpy(&class_num_, &from.class_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&dp_budget_) -
    reinterpret_cast<char*>(&class_num_)) + sizeof(dp_budget_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
}

void DecisionTreeParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecisionTreeParams_alg_5fparams_2eproto.base);
  tree_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  criterion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  split_strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&class_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dp_budget_) -
      reinterpret_cast<char*>(&class_num_)) + sizeof(dp_budget_));
}

DecisionTreeParams::~DecisionTreeParams() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DecisionTreeParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tree_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  criterion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  split_strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecisionTreeParams::ArenaDtor(void* object) {
  DecisionTreeParams* _this = reinterpret_cast< DecisionTreeParams* >(object);
  (void)_this;
}
void DecisionTreeParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecisionTreeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecisionTreeParams& DecisionTreeParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecisionTreeParams_alg_5fparams_2eproto.base);
  return *internal_default_instance();
}


void DecisionTreeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tree_type_.ClearToEmpty();
  criterion_.ClearToEmpty();
  split_strategy_.ClearToEmpty();
  ::memset(&class_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dp_budget_) -
      reinterpret_cast<char*>(&class_num_)) + sizeof(dp_budget_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecisionTreeParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tree_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tree_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsytem.falcon.v0.DecisionTreeParams.tree_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string criterion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_criterion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsytem.falcon.v0.DecisionTreeParams.criterion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string split_strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_split_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsytem.falcon.v0.DecisionTreeParams.split_strategy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 class_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          class_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_depth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_bins = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_bins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_samples_split = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          min_samples_split_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_samples_leaf = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          min_samples_leaf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_leaf_nodes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          max_leaf_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double min_impurity_decrease = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          min_impurity_decrease_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double min_impurity_split = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          min_impurity_split_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dp_budget = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          dp_budget_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecisionTreeParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tree_type = 1;
  if (this->tree_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tree_type().data(), static_cast<int>(this->_internal_tree_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.DecisionTreeParams.tree_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tree_type(), target);
  }

  // string criterion = 2;
  if (this->criterion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_criterion().data(), static_cast<int>(this->_internal_criterion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.DecisionTreeParams.criterion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_criterion(), target);
  }

  // string split_strategy = 3;
  if (this->split_strategy().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_split_strategy().data(), static_cast<int>(this->_internal_split_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.DecisionTreeParams.split_strategy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_split_strategy(), target);
  }

  // int32 class_num = 4;
  if (this->class_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_class_num(), target);
  }

  // int32 max_depth = 5;
  if (this->max_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_depth(), target);
  }

  // int32 max_bins = 6;
  if (this->max_bins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_bins(), target);
  }

  // int32 min_samples_split = 7;
  if (this->min_samples_split() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_min_samples_split(), target);
  }

  // int32 min_samples_leaf = 8;
  if (this->min_samples_leaf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_min_samples_leaf(), target);
  }

  // int32 max_leaf_nodes = 9;
  if (this->max_leaf_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_leaf_nodes(), target);
  }

  // double min_impurity_decrease = 10;
  if (!(this->min_impurity_decrease() <= 0 && this->min_impurity_decrease() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_min_impurity_decrease(), target);
  }

  // double min_impurity_split = 11;
  if (!(this->min_impurity_split() <= 0 && this->min_impurity_split() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_min_impurity_split(), target);
  }

  // double dp_budget = 12;
  if (!(this->dp_budget() <= 0 && this->dp_budget() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_dp_budget(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
  return target;
}

size_t DecisionTreeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tree_type = 1;
  if (this->tree_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tree_type());
  }

  // string criterion = 2;
  if (this->criterion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_criterion());
  }

  // string split_strategy = 3;
  if (this->split_strategy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_split_strategy());
  }

  // int32 class_num = 4;
  if (this->class_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_class_num());
  }

  // int32 max_depth = 5;
  if (this->max_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_depth());
  }

  // int32 max_bins = 6;
  if (this->max_bins() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_bins());
  }

  // int32 min_samples_split = 7;
  if (this->min_samples_split() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_samples_split());
  }

  // int32 min_samples_leaf = 8;
  if (this->min_samples_leaf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_samples_leaf());
  }

  // int32 max_leaf_nodes = 9;
  if (this->max_leaf_nodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_leaf_nodes());
  }

  // double min_impurity_decrease = 10;
  if (!(this->min_impurity_decrease() <= 0 && this->min_impurity_decrease() >= 0)) {
    total_size += 1 + 8;
  }

  // double min_impurity_split = 11;
  if (!(this->min_impurity_split() <= 0 && this->min_impurity_split() >= 0)) {
    total_size += 1 + 8;
  }

  // double dp_budget = 12;
  if (!(this->dp_budget() <= 0 && this->dp_budget() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionTreeParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionTreeParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecisionTreeParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
    MergeFrom(*source);
  }
}

void DecisionTreeParams::MergeFrom(const DecisionTreeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tree_type().size() > 0) {
    _internal_set_tree_type(from._internal_tree_type());
  }
  if (from.criterion().size() > 0) {
    _internal_set_criterion(from._internal_criterion());
  }
  if (from.split_strategy().size() > 0) {
    _internal_set_split_strategy(from._internal_split_strategy());
  }
  if (from.class_num() != 0) {
    _internal_set_class_num(from._internal_class_num());
  }
  if (from.max_depth() != 0) {
    _internal_set_max_depth(from._internal_max_depth());
  }
  if (from.max_bins() != 0) {
    _internal_set_max_bins(from._internal_max_bins());
  }
  if (from.min_samples_split() != 0) {
    _internal_set_min_samples_split(from._internal_min_samples_split());
  }
  if (from.min_samples_leaf() != 0) {
    _internal_set_min_samples_leaf(from._internal_min_samples_leaf());
  }
  if (from.max_leaf_nodes() != 0) {
    _internal_set_max_leaf_nodes(from._internal_max_leaf_nodes());
  }
  if (!(from.min_impurity_decrease() <= 0 && from.min_impurity_decrease() >= 0)) {
    _internal_set_min_impurity_decrease(from._internal_min_impurity_decrease());
  }
  if (!(from.min_impurity_split() <= 0 && from.min_impurity_split() >= 0)) {
    _internal_set_min_impurity_split(from._internal_min_impurity_split());
  }
  if (!(from.dp_budget() <= 0 && from.dp_budget() >= 0)) {
    _internal_set_dp_budget(from._internal_dp_budget());
  }
}

void DecisionTreeParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTreeParams::CopyFrom(const DecisionTreeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTreeParams::IsInitialized() const {
  return true;
}

void DecisionTreeParams::InternalSwap(DecisionTreeParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tree_type_.Swap(&other->tree_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  criterion_.Swap(&other->criterion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  split_strategy_.Swap(&other->split_strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecisionTreeParams, dp_budget_)
      + sizeof(DecisionTreeParams::dp_budget_)
      - PROTOBUF_FIELD_OFFSET(DecisionTreeParams, class_num_)>(
          reinterpret_cast<char*>(&class_num_),
          reinterpret_cast<char*>(&other->class_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionTreeParams::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::LogisticRegressionParams* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::LogisticRegressionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::LogisticRegressionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::DecisionTreeParams* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::DecisionTreeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::DecisionTreeParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
