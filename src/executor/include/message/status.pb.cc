// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#include "status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeartBeat_status_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobStatus_status_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_status_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskStatus_status_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {
class HeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeat> _instance;
} _HeartBeat_default_instance_;
class TaskStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskStatus> _instance;
} _TaskStatus_default_instance_;
class JobStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatus> _instance;
} _JobStatus_default_instance_;
class ExecutorStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecutorStatus> _instance;
} _ExecutorStatus_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com
static void InitDefaultsscc_info_ExecutorStatus_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_ExecutorStatus_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::ExecutorStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExecutorStatus_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ExecutorStatus_status_2eproto}, {
      &scc_info_HeartBeat_status_2eproto.base,
      &scc_info_JobStatus_status_2eproto.base,}};

static void InitDefaultsscc_info_HeartBeat_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_HeartBeat_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::HeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeartBeat_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HeartBeat_status_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_JobStatus_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_JobStatus_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::JobStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobStatus_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JobStatus_status_2eproto}, {
      &scc_info_TaskStatus_status_2eproto.base,}};

static void InitDefaultsscc_info_TaskStatus_status_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsystem::falcon::v0::_TaskStatus_default_instance_;
    new (ptr) ::com::nus::dbsystem::falcon::v0::TaskStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskStatus_status_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskStatus_status_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_status_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_status_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_status_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_status_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::HeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::HeartBeat, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::TaskStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::TaskStatus, task_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::TaskStatus, task_status_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::TaskStatus, task_result_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::TaskStatus, error_code_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::TaskStatus, error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::JobStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::JobStatus, job_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::JobStatus, job_status_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::JobStatus, job_result_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::JobStatus, error_code_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::JobStatus, error_msg_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::JobStatus, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::ExecutorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::ExecutorStatus, heartbeat_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsystem::falcon::v0::ExecutorStatus, jobs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::nus::dbsystem::falcon::v0::HeartBeat)},
  { 6, -1, sizeof(::com::nus::dbsystem::falcon::v0::TaskStatus)},
  { 16, -1, sizeof(::com::nus::dbsystem::falcon::v0::JobStatus)},
  { 27, -1, sizeof(::com::nus::dbsystem::falcon::v0::ExecutorStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_HeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_TaskStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_JobStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsystem::falcon::v0::_ExecutorStatus_default_instance_),
};

const char descriptor_table_protodef_status_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014status.proto\022\032com.nus.dbsystem.falcon."
  "v0\032\037google/protobuf/timestamp.proto\":\n\tH"
  "eartBeat\022-\n\ttimestamp\030\001 \001(\0132\032.google.pro"
  "tobuf.Timestamp\"\226\001\n\nTaskStatus\022\017\n\007task_i"
  "d\030\001 \001(\005\022;\n\013task_status\030\002 \001(\0162&.com.nus.d"
  "bsystem.falcon.v0.StatusType\022\023\n\013task_res"
  "ult\030\003 \001(\t\022\022\n\nerror_code\030\004 \001(\005\022\021\n\terror_m"
  "sg\030\005 \001(\t\"\311\001\n\tJobStatus\022\016\n\006job_id\030\001 \001(\005\022:"
  "\n\njob_status\030\002 \001(\0162&.com.nus.dbsystem.fa"
  "lcon.v0.StatusType\022\022\n\njob_result\030\003 \001(\t\022\022"
  "\n\nerror_code\030\004 \001(\005\022\021\n\terror_msg\030\005 \001(\t\0225\n"
  "\005tasks\030\006 \003(\0132&.com.nus.dbsystem.falcon.v"
  "0.TaskStatus\"\177\n\016ExecutorStatus\0228\n\theartb"
  "eat\030\001 \001(\0132%.com.nus.dbsystem.falcon.v0.H"
  "eartBeat\0223\n\004jobs\030\002 \003(\0132%.com.nus.dbsyste"
  "m.falcon.v0.JobStatus*C\n\nStatusType\022\017\n\013i"
  "nitialized\020\000\022\013\n\007running\020\001\022\013\n\007succeed\020\002\022\n"
  "\n\006failed\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_status_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_status_2eproto_sccs[4] = {
  &scc_info_ExecutorStatus_status_2eproto.base,
  &scc_info_HeartBeat_status_2eproto.base,
  &scc_info_JobStatus_status_2eproto.base,
  &scc_info_TaskStatus_status_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_status_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_status_2eproto = {
  false, false, descriptor_table_protodef_status_2eproto, "status.proto", 698,
  &descriptor_table_status_2eproto_once, descriptor_table_status_2eproto_sccs, descriptor_table_status_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_status_2eproto::offsets,
  file_level_metadata_status_2eproto, 4, file_level_enum_descriptors_status_2eproto, file_level_service_descriptors_status_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_status_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_status_2eproto)), true);
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_status_2eproto);
  return file_level_enum_descriptors_status_2eproto[0];
}
bool StatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class HeartBeat::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const HeartBeat* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
HeartBeat::_Internal::timestamp(const HeartBeat* msg) {
  return *msg->timestamp_;
}
void HeartBeat::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
HeartBeat::HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.HeartBeat)
}
HeartBeat::HeartBeat(const HeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.HeartBeat)
}

void HeartBeat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeartBeat_status_2eproto.base);
  timestamp_ = nullptr;
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.HeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void HeartBeat::ArenaDtor(void* object) {
  HeartBeat* _this = reinterpret_cast< HeartBeat* >(object);
  (void)_this;
}
void HeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeat& HeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeat_status_2eproto.base);
  return *internal_default_instance();
}


void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.HeartBeat)
  return target;
}

size_t HeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.HeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.HeartBeat)
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void HeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  return true;
}

void HeartBeat::InternalSwap(HeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TaskStatus::_Internal {
 public:
};

TaskStatus::TaskStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.TaskStatus)
}
TaskStatus::TaskStatus(const TaskStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_result().empty()) {
    task_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_result(), 
      GetArena());
  }
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArena());
  }
  ::memcpy(&task_id_, &from.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.TaskStatus)
}

void TaskStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskStatus_status_2eproto.base);
  task_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(error_code_));
}

TaskStatus::~TaskStatus() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.TaskStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskStatus::ArenaDtor(void* object) {
  TaskStatus* _this = reinterpret_cast< TaskStatus* >(object);
  (void)_this;
}
void TaskStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskStatus& TaskStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskStatus_status_2eproto.base);
  return *internal_default_instance();
}


void TaskStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_result_.ClearToEmpty();
  error_msg_.ClearToEmpty();
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_task_status(static_cast<::com::nus::dbsystem::falcon::v0::StatusType>(val));
        } else goto handle_unusual;
        continue;
      // string task_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_task_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.TaskStatus.task_result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 error_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.TaskStatus.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_id = 1;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_task_id(), target);
  }

  // .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
  if (this->task_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_task_status(), target);
  }

  // string task_result = 3;
  if (this->task_result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_result().data(), static_cast<int>(this->_internal_task_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.TaskStatus.task_result");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_task_result(), target);
  }

  // int32 error_code = 4;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_error_code(), target);
  }

  // string error_msg = 5;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.TaskStatus.error_msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.TaskStatus)
  return target;
}

size_t TaskStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_result = 3;
  if (this->task_result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_result());
  }

  // string error_msg = 5;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // int32 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_task_id());
  }

  // .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
  if (this->task_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_task_status());
  }

  // int32 error_code = 4;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.TaskStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.TaskStatus)
    MergeFrom(*source);
  }
}

void TaskStatus::MergeFrom(const TaskStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_result().size() > 0) {
    _internal_set_task_result(from._internal_task_result());
  }
  if (from.error_msg().size() > 0) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.task_status() != 0) {
    _internal_set_task_status(from._internal_task_status());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void TaskStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStatus::CopyFrom(const TaskStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatus::IsInitialized() const {
  return true;
}

void TaskStatus::InternalSwap(TaskStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_result_.Swap(&other->task_result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskStatus, error_code_)
      + sizeof(TaskStatus::error_code_)
      - PROTOBUF_FIELD_OFFSET(TaskStatus, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JobStatus::_Internal {
 public:
};

JobStatus::JobStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.JobStatus)
}
JobStatus::JobStatus(const JobStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  job_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_result().empty()) {
    job_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_job_result(), 
      GetArena());
  }
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_msg().empty()) {
    error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_msg(), 
      GetArena());
  }
  ::memcpy(&job_id_, &from.job_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&job_id_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.JobStatus)
}

void JobStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobStatus_status_2eproto.base);
  job_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&job_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(error_code_));
}

JobStatus::~JobStatus() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.JobStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JobStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  job_result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JobStatus::ArenaDtor(void* object) {
  JobStatus* _this = reinterpret_cast< JobStatus* >(object);
  (void)_this;
}
void JobStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatus& JobStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatus_status_2eproto.base);
  return *internal_default_instance();
}


void JobStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.JobStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  job_result_.ClearToEmpty();
  error_msg_.ClearToEmpty();
  ::memset(&job_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&job_id_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          job_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_job_status(static_cast<::com::nus::dbsystem::falcon::v0::StatusType>(val));
        } else goto handle_unusual;
        continue;
      // string job_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_job_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.JobStatus.job_result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 error_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsystem.falcon.v0.JobStatus.error_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.JobStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_job_id(), target);
  }

  // .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
  if (this->job_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_job_status(), target);
  }

  // string job_result = 3;
  if (this->job_result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_result().data(), static_cast<int>(this->_internal_job_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.JobStatus.job_result");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_job_result(), target);
  }

  // int32 error_code = 4;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_error_code(), target);
  }

  // string error_msg = 5;
  if (this->error_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.JobStatus.error_msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_msg(), target);
  }

  // repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.JobStatus)
  return target;
}

size_t JobStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.JobStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 6;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string job_result = 3;
  if (this->job_result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_result());
  }

  // string error_msg = 5;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // int32 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_job_id());
  }

  // .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
  if (this->job_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_job_status());
  }

  // int32 error_code = 4;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.JobStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.JobStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.JobStatus)
    MergeFrom(*source);
  }
}

void JobStatus::MergeFrom(const JobStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.JobStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.job_result().size() > 0) {
    _internal_set_job_result(from._internal_job_result());
  }
  if (from.error_msg().size() > 0) {
    _internal_set_error_msg(from._internal_error_msg());
  }
  if (from.job_id() != 0) {
    _internal_set_job_id(from._internal_job_id());
  }
  if (from.job_status() != 0) {
    _internal_set_job_status(from._internal_job_status());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void JobStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.JobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatus::CopyFrom(const JobStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.JobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatus::IsInitialized() const {
  return true;
}

void JobStatus::InternalSwap(JobStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  job_result_.Swap(&other->job_result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_msg_.Swap(&other->error_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JobStatus, error_code_)
      + sizeof(JobStatus::error_code_)
      - PROTOBUF_FIELD_OFFSET(JobStatus, job_id_)>(
          reinterpret_cast<char*>(&job_id_),
          reinterpret_cast<char*>(&other->job_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecutorStatus::_Internal {
 public:
  static const ::com::nus::dbsystem::falcon::v0::HeartBeat& heartbeat(const ExecutorStatus* msg);
};

const ::com::nus::dbsystem::falcon::v0::HeartBeat&
ExecutorStatus::_Internal::heartbeat(const ExecutorStatus* msg) {
  return *msg->heartbeat_;
}
ExecutorStatus::ExecutorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  jobs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsystem.falcon.v0.ExecutorStatus)
}
ExecutorStatus::ExecutorStatus(const ExecutorStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      jobs_(from.jobs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_heartbeat()) {
    heartbeat_ = new ::com::nus::dbsystem::falcon::v0::HeartBeat(*from.heartbeat_);
  } else {
    heartbeat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.ExecutorStatus)
}

void ExecutorStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecutorStatus_status_2eproto.base);
  heartbeat_ = nullptr;
}

ExecutorStatus::~ExecutorStatus() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecutorStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete heartbeat_;
}

void ExecutorStatus::ArenaDtor(void* object) {
  ExecutorStatus* _this = reinterpret_cast< ExecutorStatus* >(object);
  (void)_this;
}
void ExecutorStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutorStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutorStatus& ExecutorStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecutorStatus_status_2eproto.base);
  return *internal_default_instance();
}


void ExecutorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jobs_.Clear();
  if (GetArena() == nullptr && heartbeat_ != nullptr) {
    delete heartbeat_;
  }
  heartbeat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutorStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutorStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
  if (this->has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::heartbeat(this), target, stream);
  }

  // repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_jobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_jobs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  return target;
}

size_t ExecutorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
  total_size += 1UL * this->_internal_jobs_size();
  for (const auto& msg : this->jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
  if (this->has_heartbeat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartbeat_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutorStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutorStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecutorStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.ExecutorStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.ExecutorStatus)
    MergeFrom(*source);
  }
}

void ExecutorStatus::MergeFrom(const ExecutorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jobs_.MergeFrom(from.jobs_);
  if (from.has_heartbeat()) {
    _internal_mutable_heartbeat()->::com::nus::dbsystem::falcon::v0::HeartBeat::MergeFrom(from._internal_heartbeat());
  }
}

void ExecutorStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorStatus::CopyFrom(const ExecutorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorStatus::IsInitialized() const {
  return true;
}

void ExecutorStatus::InternalSwap(ExecutorStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  jobs_.InternalSwap(&other->jobs_);
  swap(heartbeat_, other->heartbeat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutorStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::HeartBeat* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::HeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::HeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::TaskStatus* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::TaskStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::TaskStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::JobStatus* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::JobStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::JobStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsystem::falcon::v0::ExecutorStatus* Arena::CreateMaybeMessage< ::com::nus::dbsystem::falcon::v0::ExecutorStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsystem::falcon::v0::ExecutorStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
