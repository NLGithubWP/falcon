// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alg_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_alg_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_alg_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_alg_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_alg_5fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_alg_5fparams_2eproto;
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {
class DecisionTreeParams;
class DecisionTreeParamsDefaultTypeInternal;
extern DecisionTreeParamsDefaultTypeInternal _DecisionTreeParams_default_instance_;
class LogisticRegressionParams;
class LogisticRegressionParamsDefaultTypeInternal;
extern LogisticRegressionParamsDefaultTypeInternal _LogisticRegressionParams_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::nus::dbsytem::falcon::v0::DecisionTreeParams* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::DecisionTreeParams>(Arena*);
template<> ::com::nus::dbsytem::falcon::v0::LogisticRegressionParams* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::LogisticRegressionParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {

// ===================================================================

class LogisticRegressionParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.LogisticRegressionParams) */ {
 public:
  inline LogisticRegressionParams() : LogisticRegressionParams(nullptr) {}
  virtual ~LogisticRegressionParams();

  LogisticRegressionParams(const LogisticRegressionParams& from);
  LogisticRegressionParams(LogisticRegressionParams&& from) noexcept
    : LogisticRegressionParams() {
    *this = ::std::move(from);
  }

  inline LogisticRegressionParams& operator=(const LogisticRegressionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogisticRegressionParams& operator=(LogisticRegressionParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogisticRegressionParams& default_instance();

  static inline const LogisticRegressionParams* internal_default_instance() {
    return reinterpret_cast<const LogisticRegressionParams*>(
               &_LogisticRegressionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogisticRegressionParams& a, LogisticRegressionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LogisticRegressionParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogisticRegressionParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogisticRegressionParams* New() const final {
    return CreateMaybeMessage<LogisticRegressionParams>(nullptr);
  }

  LogisticRegressionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogisticRegressionParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogisticRegressionParams& from);
  void MergeFrom(const LogisticRegressionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogisticRegressionParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.LogisticRegressionParams";
  }
  protected:
  explicit LogisticRegressionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alg_5fparams_2eproto);
    return ::descriptor_table_alg_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPenaltyFieldNumber = 8,
    kOptimizerFieldNumber = 9,
    kMultiClassFieldNumber = 10,
    kMetricFieldNumber = 11,
    kBatchSizeFieldNumber = 1,
    kMaxIterationFieldNumber = 2,
    kConvergeThresholdFieldNumber = 3,
    kWithRegularizationFieldNumber = 4,
    kAlphaFieldNumber = 5,
    kLearningRateFieldNumber = 6,
    kDecayFieldNumber = 7,
    kDifferentialPrivacyBudgetFieldNumber = 12,
  };
  // string penalty = 8;
  void clear_penalty();
  const std::string& penalty() const;
  void set_penalty(const std::string& value);
  void set_penalty(std::string&& value);
  void set_penalty(const char* value);
  void set_penalty(const char* value, size_t size);
  std::string* mutable_penalty();
  std::string* release_penalty();
  void set_allocated_penalty(std::string* penalty);
  private:
  const std::string& _internal_penalty() const;
  void _internal_set_penalty(const std::string& value);
  std::string* _internal_mutable_penalty();
  public:

  // string optimizer = 9;
  void clear_optimizer();
  const std::string& optimizer() const;
  void set_optimizer(const std::string& value);
  void set_optimizer(std::string&& value);
  void set_optimizer(const char* value);
  void set_optimizer(const char* value, size_t size);
  std::string* mutable_optimizer();
  std::string* release_optimizer();
  void set_allocated_optimizer(std::string* optimizer);
  private:
  const std::string& _internal_optimizer() const;
  void _internal_set_optimizer(const std::string& value);
  std::string* _internal_mutable_optimizer();
  public:

  // string multi_class = 10;
  void clear_multi_class();
  const std::string& multi_class() const;
  void set_multi_class(const std::string& value);
  void set_multi_class(std::string&& value);
  void set_multi_class(const char* value);
  void set_multi_class(const char* value, size_t size);
  std::string* mutable_multi_class();
  std::string* release_multi_class();
  void set_allocated_multi_class(std::string* multi_class);
  private:
  const std::string& _internal_multi_class() const;
  void _internal_set_multi_class(const std::string& value);
  std::string* _internal_mutable_multi_class();
  public:

  // string metric = 11;
  void clear_metric();
  const std::string& metric() const;
  void set_metric(const std::string& value);
  void set_metric(std::string&& value);
  void set_metric(const char* value);
  void set_metric(const char* value, size_t size);
  std::string* mutable_metric();
  std::string* release_metric();
  void set_allocated_metric(std::string* metric);
  private:
  const std::string& _internal_metric() const;
  void _internal_set_metric(const std::string& value);
  std::string* _internal_mutable_metric();
  public:

  // int32 batch_size = 1;
  void clear_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size() const;
  void set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch_size() const;
  void _internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_iteration = 2;
  void clear_max_iteration();
  ::PROTOBUF_NAMESPACE_ID::int32 max_iteration() const;
  void set_max_iteration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_iteration() const;
  void _internal_set_max_iteration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float converge_threshold = 3;
  void clear_converge_threshold();
  float converge_threshold() const;
  void set_converge_threshold(float value);
  private:
  float _internal_converge_threshold() const;
  void _internal_set_converge_threshold(float value);
  public:

  // int32 with_regularization = 4;
  void clear_with_regularization();
  ::PROTOBUF_NAMESPACE_ID::int32 with_regularization() const;
  void set_with_regularization(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_with_regularization() const;
  void _internal_set_with_regularization(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float alpha = 5;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // float learning_rate = 6;
  void clear_learning_rate();
  float learning_rate() const;
  void set_learning_rate(float value);
  private:
  float _internal_learning_rate() const;
  void _internal_set_learning_rate(float value);
  public:

  // float decay = 7;
  void clear_decay();
  float decay() const;
  void set_decay(float value);
  private:
  float _internal_decay() const;
  void _internal_set_decay(float value);
  public:

  // float differential_privacy_budget = 12;
  void clear_differential_privacy_budget();
  float differential_privacy_budget() const;
  void set_differential_privacy_budget(float value);
  private:
  float _internal_differential_privacy_budget() const;
  void _internal_set_differential_privacy_budget(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr penalty_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optimizer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multi_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_iteration_;
  float converge_threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 with_regularization_;
  float alpha_;
  float learning_rate_;
  float decay_;
  float differential_privacy_budget_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alg_5fparams_2eproto;
};
// -------------------------------------------------------------------

class DecisionTreeParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.DecisionTreeParams) */ {
 public:
  inline DecisionTreeParams() : DecisionTreeParams(nullptr) {}
  virtual ~DecisionTreeParams();

  DecisionTreeParams(const DecisionTreeParams& from);
  DecisionTreeParams(DecisionTreeParams&& from) noexcept
    : DecisionTreeParams() {
    *this = ::std::move(from);
  }

  inline DecisionTreeParams& operator=(const DecisionTreeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecisionTreeParams& operator=(DecisionTreeParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecisionTreeParams& default_instance();

  static inline const DecisionTreeParams* internal_default_instance() {
    return reinterpret_cast<const DecisionTreeParams*>(
               &_DecisionTreeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DecisionTreeParams& a, DecisionTreeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DecisionTreeParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecisionTreeParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecisionTreeParams* New() const final {
    return CreateMaybeMessage<DecisionTreeParams>(nullptr);
  }

  DecisionTreeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecisionTreeParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecisionTreeParams& from);
  void MergeFrom(const DecisionTreeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecisionTreeParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.DecisionTreeParams";
  }
  protected:
  explicit DecisionTreeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_alg_5fparams_2eproto);
    return ::descriptor_table_alg_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreeTypeFieldNumber = 1,
    kCriterionFieldNumber = 2,
    kSplitStrategyFieldNumber = 3,
    kClassNumFieldNumber = 4,
    kMaxDepthFieldNumber = 5,
    kMaxBinsFieldNumber = 6,
    kMinSamplesSplitFieldNumber = 7,
    kMinSamplesLeafFieldNumber = 8,
    kMaxLeafNodesFieldNumber = 9,
    kMinImpurityDecreaseFieldNumber = 10,
    kMinImpuritySplitFieldNumber = 11,
    kDpBudgetFieldNumber = 12,
  };
  // string tree_type = 1;
  void clear_tree_type();
  const std::string& tree_type() const;
  void set_tree_type(const std::string& value);
  void set_tree_type(std::string&& value);
  void set_tree_type(const char* value);
  void set_tree_type(const char* value, size_t size);
  std::string* mutable_tree_type();
  std::string* release_tree_type();
  void set_allocated_tree_type(std::string* tree_type);
  private:
  const std::string& _internal_tree_type() const;
  void _internal_set_tree_type(const std::string& value);
  std::string* _internal_mutable_tree_type();
  public:

  // string criterion = 2;
  void clear_criterion();
  const std::string& criterion() const;
  void set_criterion(const std::string& value);
  void set_criterion(std::string&& value);
  void set_criterion(const char* value);
  void set_criterion(const char* value, size_t size);
  std::string* mutable_criterion();
  std::string* release_criterion();
  void set_allocated_criterion(std::string* criterion);
  private:
  const std::string& _internal_criterion() const;
  void _internal_set_criterion(const std::string& value);
  std::string* _internal_mutable_criterion();
  public:

  // string split_strategy = 3;
  void clear_split_strategy();
  const std::string& split_strategy() const;
  void set_split_strategy(const std::string& value);
  void set_split_strategy(std::string&& value);
  void set_split_strategy(const char* value);
  void set_split_strategy(const char* value, size_t size);
  std::string* mutable_split_strategy();
  std::string* release_split_strategy();
  void set_allocated_split_strategy(std::string* split_strategy);
  private:
  const std::string& _internal_split_strategy() const;
  void _internal_set_split_strategy(const std::string& value);
  std::string* _internal_mutable_split_strategy();
  public:

  // int32 class_num = 4;
  void clear_class_num();
  ::PROTOBUF_NAMESPACE_ID::int32 class_num() const;
  void set_class_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_class_num() const;
  void _internal_set_class_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_depth = 5;
  void clear_max_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 max_depth() const;
  void set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_depth() const;
  void _internal_set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_bins = 6;
  void clear_max_bins();
  ::PROTOBUF_NAMESPACE_ID::int32 max_bins() const;
  void set_max_bins(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_bins() const;
  void _internal_set_max_bins(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_samples_split = 7;
  void clear_min_samples_split();
  ::PROTOBUF_NAMESPACE_ID::int32 min_samples_split() const;
  void set_min_samples_split(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_samples_split() const;
  void _internal_set_min_samples_split(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_samples_leaf = 8;
  void clear_min_samples_leaf();
  ::PROTOBUF_NAMESPACE_ID::int32 min_samples_leaf() const;
  void set_min_samples_leaf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_samples_leaf() const;
  void _internal_set_min_samples_leaf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_leaf_nodes = 9;
  void clear_max_leaf_nodes();
  ::PROTOBUF_NAMESPACE_ID::int32 max_leaf_nodes() const;
  void set_max_leaf_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_leaf_nodes() const;
  void _internal_set_max_leaf_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double min_impurity_decrease = 10;
  void clear_min_impurity_decrease();
  double min_impurity_decrease() const;
  void set_min_impurity_decrease(double value);
  private:
  double _internal_min_impurity_decrease() const;
  void _internal_set_min_impurity_decrease(double value);
  public:

  // double min_impurity_split = 11;
  void clear_min_impurity_split();
  double min_impurity_split() const;
  void set_min_impurity_split(double value);
  private:
  double _internal_min_impurity_split() const;
  void _internal_set_min_impurity_split(double value);
  public:

  // double dp_budget = 12;
  void clear_dp_budget();
  double dp_budget() const;
  void set_dp_budget(double value);
  private:
  double _internal_dp_budget() const;
  void _internal_set_dp_budget(double value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.DecisionTreeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tree_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr criterion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr split_strategy_;
  ::PROTOBUF_NAMESPACE_ID::int32 class_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_bins_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_samples_split_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_samples_leaf_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_leaf_nodes_;
  double min_impurity_decrease_;
  double min_impurity_split_;
  double dp_budget_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alg_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogisticRegressionParams

// int32 batch_size = 1;
inline void LogisticRegressionParams::clear_batch_size() {
  batch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogisticRegressionParams::_internal_batch_size() const {
  return batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogisticRegressionParams::batch_size() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.batch_size)
  return _internal_batch_size();
}
inline void LogisticRegressionParams::_internal_set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batch_size_ = value;
}
inline void LogisticRegressionParams::set_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.batch_size)
}

// int32 max_iteration = 2;
inline void LogisticRegressionParams::clear_max_iteration() {
  max_iteration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogisticRegressionParams::_internal_max_iteration() const {
  return max_iteration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogisticRegressionParams::max_iteration() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.max_iteration)
  return _internal_max_iteration();
}
inline void LogisticRegressionParams::_internal_set_max_iteration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_iteration_ = value;
}
inline void LogisticRegressionParams::set_max_iteration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_iteration(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.max_iteration)
}

// float converge_threshold = 3;
inline void LogisticRegressionParams::clear_converge_threshold() {
  converge_threshold_ = 0;
}
inline float LogisticRegressionParams::_internal_converge_threshold() const {
  return converge_threshold_;
}
inline float LogisticRegressionParams::converge_threshold() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.converge_threshold)
  return _internal_converge_threshold();
}
inline void LogisticRegressionParams::_internal_set_converge_threshold(float value) {
  
  converge_threshold_ = value;
}
inline void LogisticRegressionParams::set_converge_threshold(float value) {
  _internal_set_converge_threshold(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.converge_threshold)
}

// int32 with_regularization = 4;
inline void LogisticRegressionParams::clear_with_regularization() {
  with_regularization_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogisticRegressionParams::_internal_with_regularization() const {
  return with_regularization_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogisticRegressionParams::with_regularization() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.with_regularization)
  return _internal_with_regularization();
}
inline void LogisticRegressionParams::_internal_set_with_regularization(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  with_regularization_ = value;
}
inline void LogisticRegressionParams::set_with_regularization(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_with_regularization(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.with_regularization)
}

// float alpha = 5;
inline void LogisticRegressionParams::clear_alpha() {
  alpha_ = 0;
}
inline float LogisticRegressionParams::_internal_alpha() const {
  return alpha_;
}
inline float LogisticRegressionParams::alpha() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.alpha)
  return _internal_alpha();
}
inline void LogisticRegressionParams::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void LogisticRegressionParams::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.alpha)
}

// float learning_rate = 6;
inline void LogisticRegressionParams::clear_learning_rate() {
  learning_rate_ = 0;
}
inline float LogisticRegressionParams::_internal_learning_rate() const {
  return learning_rate_;
}
inline float LogisticRegressionParams::learning_rate() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.learning_rate)
  return _internal_learning_rate();
}
inline void LogisticRegressionParams::_internal_set_learning_rate(float value) {
  
  learning_rate_ = value;
}
inline void LogisticRegressionParams::set_learning_rate(float value) {
  _internal_set_learning_rate(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.learning_rate)
}

// float decay = 7;
inline void LogisticRegressionParams::clear_decay() {
  decay_ = 0;
}
inline float LogisticRegressionParams::_internal_decay() const {
  return decay_;
}
inline float LogisticRegressionParams::decay() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.decay)
  return _internal_decay();
}
inline void LogisticRegressionParams::_internal_set_decay(float value) {
  
  decay_ = value;
}
inline void LogisticRegressionParams::set_decay(float value) {
  _internal_set_decay(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.decay)
}

// string penalty = 8;
inline void LogisticRegressionParams::clear_penalty() {
  penalty_.ClearToEmpty();
}
inline const std::string& LogisticRegressionParams::penalty() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
  return _internal_penalty();
}
inline void LogisticRegressionParams::set_penalty(const std::string& value) {
  _internal_set_penalty(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}
inline std::string* LogisticRegressionParams::mutable_penalty() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
  return _internal_mutable_penalty();
}
inline const std::string& LogisticRegressionParams::_internal_penalty() const {
  return penalty_.Get();
}
inline void LogisticRegressionParams::_internal_set_penalty(const std::string& value) {
  
  penalty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogisticRegressionParams::set_penalty(std::string&& value) {
  
  penalty_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}
inline void LogisticRegressionParams::set_penalty(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  penalty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}
inline void LogisticRegressionParams::set_penalty(const char* value,
    size_t size) {
  
  penalty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}
inline std::string* LogisticRegressionParams::_internal_mutable_penalty() {
  
  return penalty_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogisticRegressionParams::release_penalty() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
  return penalty_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogisticRegressionParams::set_allocated_penalty(std::string* penalty) {
  if (penalty != nullptr) {
    
  } else {
    
  }
  penalty_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), penalty,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}

// string optimizer = 9;
inline void LogisticRegressionParams::clear_optimizer() {
  optimizer_.ClearToEmpty();
}
inline const std::string& LogisticRegressionParams::optimizer() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
  return _internal_optimizer();
}
inline void LogisticRegressionParams::set_optimizer(const std::string& value) {
  _internal_set_optimizer(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}
inline std::string* LogisticRegressionParams::mutable_optimizer() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
  return _internal_mutable_optimizer();
}
inline const std::string& LogisticRegressionParams::_internal_optimizer() const {
  return optimizer_.Get();
}
inline void LogisticRegressionParams::_internal_set_optimizer(const std::string& value) {
  
  optimizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogisticRegressionParams::set_optimizer(std::string&& value) {
  
  optimizer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}
inline void LogisticRegressionParams::set_optimizer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  optimizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}
inline void LogisticRegressionParams::set_optimizer(const char* value,
    size_t size) {
  
  optimizer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}
inline std::string* LogisticRegressionParams::_internal_mutable_optimizer() {
  
  return optimizer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogisticRegressionParams::release_optimizer() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
  return optimizer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogisticRegressionParams::set_allocated_optimizer(std::string* optimizer) {
  if (optimizer != nullptr) {
    
  } else {
    
  }
  optimizer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), optimizer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}

// string multi_class = 10;
inline void LogisticRegressionParams::clear_multi_class() {
  multi_class_.ClearToEmpty();
}
inline const std::string& LogisticRegressionParams::multi_class() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
  return _internal_multi_class();
}
inline void LogisticRegressionParams::set_multi_class(const std::string& value) {
  _internal_set_multi_class(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}
inline std::string* LogisticRegressionParams::mutable_multi_class() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
  return _internal_mutable_multi_class();
}
inline const std::string& LogisticRegressionParams::_internal_multi_class() const {
  return multi_class_.Get();
}
inline void LogisticRegressionParams::_internal_set_multi_class(const std::string& value) {
  
  multi_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogisticRegressionParams::set_multi_class(std::string&& value) {
  
  multi_class_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}
inline void LogisticRegressionParams::set_multi_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  multi_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}
inline void LogisticRegressionParams::set_multi_class(const char* value,
    size_t size) {
  
  multi_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}
inline std::string* LogisticRegressionParams::_internal_mutable_multi_class() {
  
  return multi_class_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogisticRegressionParams::release_multi_class() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
  return multi_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogisticRegressionParams::set_allocated_multi_class(std::string* multi_class) {
  if (multi_class != nullptr) {
    
  } else {
    
  }
  multi_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multi_class,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}

// string metric = 11;
inline void LogisticRegressionParams::clear_metric() {
  metric_.ClearToEmpty();
}
inline const std::string& LogisticRegressionParams::metric() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
  return _internal_metric();
}
inline void LogisticRegressionParams::set_metric(const std::string& value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}
inline std::string* LogisticRegressionParams::mutable_metric() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
  return _internal_mutable_metric();
}
inline const std::string& LogisticRegressionParams::_internal_metric() const {
  return metric_.Get();
}
inline void LogisticRegressionParams::_internal_set_metric(const std::string& value) {
  
  metric_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogisticRegressionParams::set_metric(std::string&& value) {
  
  metric_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}
inline void LogisticRegressionParams::set_metric(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metric_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}
inline void LogisticRegressionParams::set_metric(const char* value,
    size_t size) {
  
  metric_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}
inline std::string* LogisticRegressionParams::_internal_mutable_metric() {
  
  return metric_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogisticRegressionParams::release_metric() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
  return metric_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogisticRegressionParams::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  metric_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metric,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}

// float differential_privacy_budget = 12;
inline void LogisticRegressionParams::clear_differential_privacy_budget() {
  differential_privacy_budget_ = 0;
}
inline float LogisticRegressionParams::_internal_differential_privacy_budget() const {
  return differential_privacy_budget_;
}
inline float LogisticRegressionParams::differential_privacy_budget() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.differential_privacy_budget)
  return _internal_differential_privacy_budget();
}
inline void LogisticRegressionParams::_internal_set_differential_privacy_budget(float value) {
  
  differential_privacy_budget_ = value;
}
inline void LogisticRegressionParams::set_differential_privacy_budget(float value) {
  _internal_set_differential_privacy_budget(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.differential_privacy_budget)
}

// -------------------------------------------------------------------

// DecisionTreeParams

// string tree_type = 1;
inline void DecisionTreeParams::clear_tree_type() {
  tree_type_.ClearToEmpty();
}
inline const std::string& DecisionTreeParams::tree_type() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.tree_type)
  return _internal_tree_type();
}
inline void DecisionTreeParams::set_tree_type(const std::string& value) {
  _internal_set_tree_type(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.tree_type)
}
inline std::string* DecisionTreeParams::mutable_tree_type() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.DecisionTreeParams.tree_type)
  return _internal_mutable_tree_type();
}
inline const std::string& DecisionTreeParams::_internal_tree_type() const {
  return tree_type_.Get();
}
inline void DecisionTreeParams::_internal_set_tree_type(const std::string& value) {
  
  tree_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DecisionTreeParams::set_tree_type(std::string&& value) {
  
  tree_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsytem.falcon.v0.DecisionTreeParams.tree_type)
}
inline void DecisionTreeParams::set_tree_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tree_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.DecisionTreeParams.tree_type)
}
inline void DecisionTreeParams::set_tree_type(const char* value,
    size_t size) {
  
  tree_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.DecisionTreeParams.tree_type)
}
inline std::string* DecisionTreeParams::_internal_mutable_tree_type() {
  
  return tree_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DecisionTreeParams::release_tree_type() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.DecisionTreeParams.tree_type)
  return tree_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DecisionTreeParams::set_allocated_tree_type(std::string* tree_type) {
  if (tree_type != nullptr) {
    
  } else {
    
  }
  tree_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tree_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.DecisionTreeParams.tree_type)
}

// string criterion = 2;
inline void DecisionTreeParams::clear_criterion() {
  criterion_.ClearToEmpty();
}
inline const std::string& DecisionTreeParams::criterion() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.criterion)
  return _internal_criterion();
}
inline void DecisionTreeParams::set_criterion(const std::string& value) {
  _internal_set_criterion(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.criterion)
}
inline std::string* DecisionTreeParams::mutable_criterion() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.DecisionTreeParams.criterion)
  return _internal_mutable_criterion();
}
inline const std::string& DecisionTreeParams::_internal_criterion() const {
  return criterion_.Get();
}
inline void DecisionTreeParams::_internal_set_criterion(const std::string& value) {
  
  criterion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DecisionTreeParams::set_criterion(std::string&& value) {
  
  criterion_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsytem.falcon.v0.DecisionTreeParams.criterion)
}
inline void DecisionTreeParams::set_criterion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  criterion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.DecisionTreeParams.criterion)
}
inline void DecisionTreeParams::set_criterion(const char* value,
    size_t size) {
  
  criterion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.DecisionTreeParams.criterion)
}
inline std::string* DecisionTreeParams::_internal_mutable_criterion() {
  
  return criterion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DecisionTreeParams::release_criterion() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.DecisionTreeParams.criterion)
  return criterion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DecisionTreeParams::set_allocated_criterion(std::string* criterion) {
  if (criterion != nullptr) {
    
  } else {
    
  }
  criterion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), criterion,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.DecisionTreeParams.criterion)
}

// string split_strategy = 3;
inline void DecisionTreeParams::clear_split_strategy() {
  split_strategy_.ClearToEmpty();
}
inline const std::string& DecisionTreeParams::split_strategy() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.split_strategy)
  return _internal_split_strategy();
}
inline void DecisionTreeParams::set_split_strategy(const std::string& value) {
  _internal_set_split_strategy(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.split_strategy)
}
inline std::string* DecisionTreeParams::mutable_split_strategy() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.DecisionTreeParams.split_strategy)
  return _internal_mutable_split_strategy();
}
inline const std::string& DecisionTreeParams::_internal_split_strategy() const {
  return split_strategy_.Get();
}
inline void DecisionTreeParams::_internal_set_split_strategy(const std::string& value) {
  
  split_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DecisionTreeParams::set_split_strategy(std::string&& value) {
  
  split_strategy_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsytem.falcon.v0.DecisionTreeParams.split_strategy)
}
inline void DecisionTreeParams::set_split_strategy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  split_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.DecisionTreeParams.split_strategy)
}
inline void DecisionTreeParams::set_split_strategy(const char* value,
    size_t size) {
  
  split_strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.DecisionTreeParams.split_strategy)
}
inline std::string* DecisionTreeParams::_internal_mutable_split_strategy() {
  
  return split_strategy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DecisionTreeParams::release_split_strategy() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.DecisionTreeParams.split_strategy)
  return split_strategy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DecisionTreeParams::set_allocated_split_strategy(std::string* split_strategy) {
  if (split_strategy != nullptr) {
    
  } else {
    
  }
  split_strategy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), split_strategy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.DecisionTreeParams.split_strategy)
}

// int32 class_num = 4;
inline void DecisionTreeParams::clear_class_num() {
  class_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::_internal_class_num() const {
  return class_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::class_num() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.class_num)
  return _internal_class_num();
}
inline void DecisionTreeParams::_internal_set_class_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  class_num_ = value;
}
inline void DecisionTreeParams::set_class_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_class_num(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.class_num)
}

// int32 max_depth = 5;
inline void DecisionTreeParams::clear_max_depth() {
  max_depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::_internal_max_depth() const {
  return max_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::max_depth() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.max_depth)
  return _internal_max_depth();
}
inline void DecisionTreeParams::_internal_set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_depth_ = value;
}
inline void DecisionTreeParams::set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_depth(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.max_depth)
}

// int32 max_bins = 6;
inline void DecisionTreeParams::clear_max_bins() {
  max_bins_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::_internal_max_bins() const {
  return max_bins_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::max_bins() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.max_bins)
  return _internal_max_bins();
}
inline void DecisionTreeParams::_internal_set_max_bins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_bins_ = value;
}
inline void DecisionTreeParams::set_max_bins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_bins(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.max_bins)
}

// int32 min_samples_split = 7;
inline void DecisionTreeParams::clear_min_samples_split() {
  min_samples_split_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::_internal_min_samples_split() const {
  return min_samples_split_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::min_samples_split() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.min_samples_split)
  return _internal_min_samples_split();
}
inline void DecisionTreeParams::_internal_set_min_samples_split(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_samples_split_ = value;
}
inline void DecisionTreeParams::set_min_samples_split(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_samples_split(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.min_samples_split)
}

// int32 min_samples_leaf = 8;
inline void DecisionTreeParams::clear_min_samples_leaf() {
  min_samples_leaf_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::_internal_min_samples_leaf() const {
  return min_samples_leaf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::min_samples_leaf() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.min_samples_leaf)
  return _internal_min_samples_leaf();
}
inline void DecisionTreeParams::_internal_set_min_samples_leaf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_samples_leaf_ = value;
}
inline void DecisionTreeParams::set_min_samples_leaf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_samples_leaf(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.min_samples_leaf)
}

// int32 max_leaf_nodes = 9;
inline void DecisionTreeParams::clear_max_leaf_nodes() {
  max_leaf_nodes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::_internal_max_leaf_nodes() const {
  return max_leaf_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecisionTreeParams::max_leaf_nodes() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.max_leaf_nodes)
  return _internal_max_leaf_nodes();
}
inline void DecisionTreeParams::_internal_set_max_leaf_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_leaf_nodes_ = value;
}
inline void DecisionTreeParams::set_max_leaf_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_leaf_nodes(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.max_leaf_nodes)
}

// double min_impurity_decrease = 10;
inline void DecisionTreeParams::clear_min_impurity_decrease() {
  min_impurity_decrease_ = 0;
}
inline double DecisionTreeParams::_internal_min_impurity_decrease() const {
  return min_impurity_decrease_;
}
inline double DecisionTreeParams::min_impurity_decrease() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.min_impurity_decrease)
  return _internal_min_impurity_decrease();
}
inline void DecisionTreeParams::_internal_set_min_impurity_decrease(double value) {
  
  min_impurity_decrease_ = value;
}
inline void DecisionTreeParams::set_min_impurity_decrease(double value) {
  _internal_set_min_impurity_decrease(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.min_impurity_decrease)
}

// double min_impurity_split = 11;
inline void DecisionTreeParams::clear_min_impurity_split() {
  min_impurity_split_ = 0;
}
inline double DecisionTreeParams::_internal_min_impurity_split() const {
  return min_impurity_split_;
}
inline double DecisionTreeParams::min_impurity_split() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.min_impurity_split)
  return _internal_min_impurity_split();
}
inline void DecisionTreeParams::_internal_set_min_impurity_split(double value) {
  
  min_impurity_split_ = value;
}
inline void DecisionTreeParams::set_min_impurity_split(double value) {
  _internal_set_min_impurity_split(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.min_impurity_split)
}

// double dp_budget = 12;
inline void DecisionTreeParams::clear_dp_budget() {
  dp_budget_ = 0;
}
inline double DecisionTreeParams::_internal_dp_budget() const {
  return dp_budget_;
}
inline double DecisionTreeParams::dp_budget() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.DecisionTreeParams.dp_budget)
  return _internal_dp_budget();
}
inline void DecisionTreeParams::_internal_set_dp_budget(double value) {
  
  dp_budget_ = value;
}
inline void DecisionTreeParams::set_dp_budget(double value) {
  _internal_set_dp_budget(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.DecisionTreeParams.dp_budget)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_alg_5fparams_2eproto
