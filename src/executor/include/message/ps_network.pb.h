// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ps_network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ps_5fnetwork_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ps_5fnetwork_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ps_5fnetwork_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ps_5fnetwork_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ps_5fnetwork_2eproto;
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {
class PS;
class PSDefaultTypeInternal;
extern PSDefaultTypeInternal _PS_default_instance_;
class PSNetworkConfig;
class PSNetworkConfigDefaultTypeInternal;
extern PSNetworkConfigDefaultTypeInternal _PSNetworkConfig_default_instance_;
class Worker;
class WorkerDefaultTypeInternal;
extern WorkerDefaultTypeInternal _Worker_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::nus::dbsytem::falcon::v0::PS* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::PS>(Arena*);
template<> ::com::nus::dbsytem::falcon::v0::PSNetworkConfig* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::PSNetworkConfig>(Arena*);
template<> ::com::nus::dbsytem::falcon::v0::Worker* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::Worker>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {

// ===================================================================

class PSNetworkConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.PSNetworkConfig) */ {
 public:
  inline PSNetworkConfig() : PSNetworkConfig(nullptr) {}
  virtual ~PSNetworkConfig();

  PSNetworkConfig(const PSNetworkConfig& from);
  PSNetworkConfig(PSNetworkConfig&& from) noexcept
    : PSNetworkConfig() {
    *this = ::std::move(from);
  }

  inline PSNetworkConfig& operator=(const PSNetworkConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSNetworkConfig& operator=(PSNetworkConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSNetworkConfig& default_instance();

  static inline const PSNetworkConfig* internal_default_instance() {
    return reinterpret_cast<const PSNetworkConfig*>(
               &_PSNetworkConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PSNetworkConfig& a, PSNetworkConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PSNetworkConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PSNetworkConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSNetworkConfig* New() const final {
    return CreateMaybeMessage<PSNetworkConfig>(nullptr);
  }

  PSNetworkConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSNetworkConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSNetworkConfig& from);
  void MergeFrom(const PSNetworkConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSNetworkConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.PSNetworkConfig";
  }
  protected:
  explicit PSNetworkConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_5fnetwork_2eproto);
    return ::descriptor_table_ps_5fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkersFieldNumber = 1,
    kPsFieldNumber = 2,
  };
  // repeated .com.nus.dbsytem.falcon.v0.Worker workers = 1;
  int workers_size() const;
  private:
  int _internal_workers_size() const;
  public:
  void clear_workers();
  ::com::nus::dbsytem::falcon::v0::Worker* mutable_workers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::Worker >*
      mutable_workers();
  private:
  const ::com::nus::dbsytem::falcon::v0::Worker& _internal_workers(int index) const;
  ::com::nus::dbsytem::falcon::v0::Worker* _internal_add_workers();
  public:
  const ::com::nus::dbsytem::falcon::v0::Worker& workers(int index) const;
  ::com::nus::dbsytem::falcon::v0::Worker* add_workers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::Worker >&
      workers() const;

  // repeated .com.nus.dbsytem.falcon.v0.PS ps = 2;
  int ps_size() const;
  private:
  int _internal_ps_size() const;
  public:
  void clear_ps();
  ::com::nus::dbsytem::falcon::v0::PS* mutable_ps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PS >*
      mutable_ps();
  private:
  const ::com::nus::dbsytem::falcon::v0::PS& _internal_ps(int index) const;
  ::com::nus::dbsytem::falcon::v0::PS* _internal_add_ps();
  public:
  const ::com::nus::dbsytem::falcon::v0::PS& ps(int index) const;
  ::com::nus::dbsytem::falcon::v0::PS* add_ps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PS >&
      ps() const;

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::Worker > workers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PS > ps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class Worker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.Worker) */ {
 public:
  inline Worker() : Worker(nullptr) {}
  virtual ~Worker();

  Worker(const Worker& from);
  Worker(Worker&& from) noexcept
    : Worker() {
    *this = ::std::move(from);
  }

  inline Worker& operator=(const Worker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Worker& operator=(Worker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Worker& default_instance();

  static inline const Worker* internal_default_instance() {
    return reinterpret_cast<const Worker*>(
               &_Worker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Worker& a, Worker& b) {
    a.Swap(&b);
  }
  inline void Swap(Worker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Worker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Worker* New() const final {
    return CreateMaybeMessage<Worker>(nullptr);
  }

  Worker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Worker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Worker& from);
  void MergeFrom(const Worker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Worker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.Worker";
  }
  protected:
  explicit Worker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_5fnetwork_2eproto);
    return ::descriptor_table_ps_5fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerIpFieldNumber = 1,
    kWorkerPortFieldNumber = 2,
  };
  // string worker_ip = 1;
  void clear_worker_ip();
  const std::string& worker_ip() const;
  void set_worker_ip(const std::string& value);
  void set_worker_ip(std::string&& value);
  void set_worker_ip(const char* value);
  void set_worker_ip(const char* value, size_t size);
  std::string* mutable_worker_ip();
  std::string* release_worker_ip();
  void set_allocated_worker_ip(std::string* worker_ip);
  private:
  const std::string& _internal_worker_ip() const;
  void _internal_set_worker_ip(const std::string& value);
  std::string* _internal_mutable_worker_ip();
  public:

  // int32 worker_port = 2;
  void clear_worker_port();
  ::PROTOBUF_NAMESPACE_ID::int32 worker_port() const;
  void set_worker_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_worker_port() const;
  void _internal_set_worker_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.Worker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 worker_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class PS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.PS) */ {
 public:
  inline PS() : PS(nullptr) {}
  virtual ~PS();

  PS(const PS& from);
  PS(PS&& from) noexcept
    : PS() {
    *this = ::std::move(from);
  }

  inline PS& operator=(const PS& from) {
    CopyFrom(from);
    return *this;
  }
  inline PS& operator=(PS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PS& default_instance();

  static inline const PS* internal_default_instance() {
    return reinterpret_cast<const PS*>(
               &_PS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PS& a, PS& b) {
    a.Swap(&b);
  }
  inline void Swap(PS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PS* New() const final {
    return CreateMaybeMessage<PS>(nullptr);
  }

  PS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PS& from);
  void MergeFrom(const PS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.PS";
  }
  protected:
  explicit PS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_5fnetwork_2eproto);
    return ::descriptor_table_ps_5fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPsIpFieldNumber = 1,
    kPsPortFieldNumber = 2,
  };
  // string ps_ip = 1;
  void clear_ps_ip();
  const std::string& ps_ip() const;
  void set_ps_ip(const std::string& value);
  void set_ps_ip(std::string&& value);
  void set_ps_ip(const char* value);
  void set_ps_ip(const char* value, size_t size);
  std::string* mutable_ps_ip();
  std::string* release_ps_ip();
  void set_allocated_ps_ip(std::string* ps_ip);
  private:
  const std::string& _internal_ps_ip() const;
  void _internal_set_ps_ip(const std::string& value);
  std::string* _internal_mutable_ps_ip();
  public:

  // int32 ps_port = 2;
  void clear_ps_port();
  ::PROTOBUF_NAMESPACE_ID::int32 ps_port() const;
  void set_ps_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ps_port() const;
  void _internal_set_ps_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.PS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ps_ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 ps_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_5fnetwork_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PSNetworkConfig

// repeated .com.nus.dbsytem.falcon.v0.Worker workers = 1;
inline int PSNetworkConfig::_internal_workers_size() const {
  return workers_.size();
}
inline int PSNetworkConfig::workers_size() const {
  return _internal_workers_size();
}
inline void PSNetworkConfig::clear_workers() {
  workers_.Clear();
}
inline ::com::nus::dbsytem::falcon::v0::Worker* PSNetworkConfig::mutable_workers(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.PSNetworkConfig.workers)
  return workers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::Worker >*
PSNetworkConfig::mutable_workers() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.PSNetworkConfig.workers)
  return &workers_;
}
inline const ::com::nus::dbsytem::falcon::v0::Worker& PSNetworkConfig::_internal_workers(int index) const {
  return workers_.Get(index);
}
inline const ::com::nus::dbsytem::falcon::v0::Worker& PSNetworkConfig::workers(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.PSNetworkConfig.workers)
  return _internal_workers(index);
}
inline ::com::nus::dbsytem::falcon::v0::Worker* PSNetworkConfig::_internal_add_workers() {
  return workers_.Add();
}
inline ::com::nus::dbsytem::falcon::v0::Worker* PSNetworkConfig::add_workers() {
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.PSNetworkConfig.workers)
  return _internal_add_workers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::Worker >&
PSNetworkConfig::workers() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.PSNetworkConfig.workers)
  return workers_;
}

// repeated .com.nus.dbsytem.falcon.v0.PS ps = 2;
inline int PSNetworkConfig::_internal_ps_size() const {
  return ps_.size();
}
inline int PSNetworkConfig::ps_size() const {
  return _internal_ps_size();
}
inline void PSNetworkConfig::clear_ps() {
  ps_.Clear();
}
inline ::com::nus::dbsytem::falcon::v0::PS* PSNetworkConfig::mutable_ps(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.PSNetworkConfig.ps)
  return ps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PS >*
PSNetworkConfig::mutable_ps() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.PSNetworkConfig.ps)
  return &ps_;
}
inline const ::com::nus::dbsytem::falcon::v0::PS& PSNetworkConfig::_internal_ps(int index) const {
  return ps_.Get(index);
}
inline const ::com::nus::dbsytem::falcon::v0::PS& PSNetworkConfig::ps(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.PSNetworkConfig.ps)
  return _internal_ps(index);
}
inline ::com::nus::dbsytem::falcon::v0::PS* PSNetworkConfig::_internal_add_ps() {
  return ps_.Add();
}
inline ::com::nus::dbsytem::falcon::v0::PS* PSNetworkConfig::add_ps() {
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.PSNetworkConfig.ps)
  return _internal_add_ps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PS >&
PSNetworkConfig::ps() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.PSNetworkConfig.ps)
  return ps_;
}

// -------------------------------------------------------------------

// Worker

// string worker_ip = 1;
inline void Worker::clear_worker_ip() {
  worker_ip_.ClearToEmpty();
}
inline const std::string& Worker::worker_ip() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.Worker.worker_ip)
  return _internal_worker_ip();
}
inline void Worker::set_worker_ip(const std::string& value) {
  _internal_set_worker_ip(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.Worker.worker_ip)
}
inline std::string* Worker::mutable_worker_ip() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.Worker.worker_ip)
  return _internal_mutable_worker_ip();
}
inline const std::string& Worker::_internal_worker_ip() const {
  return worker_ip_.Get();
}
inline void Worker::_internal_set_worker_ip(const std::string& value) {
  
  worker_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Worker::set_worker_ip(std::string&& value) {
  
  worker_ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsytem.falcon.v0.Worker.worker_ip)
}
inline void Worker::set_worker_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.Worker.worker_ip)
}
inline void Worker::set_worker_ip(const char* value,
    size_t size) {
  
  worker_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.Worker.worker_ip)
}
inline std::string* Worker::_internal_mutable_worker_ip() {
  
  return worker_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Worker::release_worker_ip() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.Worker.worker_ip)
  return worker_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Worker::set_allocated_worker_ip(std::string* worker_ip) {
  if (worker_ip != nullptr) {
    
  } else {
    
  }
  worker_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.Worker.worker_ip)
}

// int32 worker_port = 2;
inline void Worker::clear_worker_port() {
  worker_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Worker::_internal_worker_port() const {
  return worker_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Worker::worker_port() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.Worker.worker_port)
  return _internal_worker_port();
}
inline void Worker::_internal_set_worker_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  worker_port_ = value;
}
inline void Worker::set_worker_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_worker_port(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.Worker.worker_port)
}

// -------------------------------------------------------------------

// PS

// string ps_ip = 1;
inline void PS::clear_ps_ip() {
  ps_ip_.ClearToEmpty();
}
inline const std::string& PS::ps_ip() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.PS.ps_ip)
  return _internal_ps_ip();
}
inline void PS::set_ps_ip(const std::string& value) {
  _internal_set_ps_ip(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.PS.ps_ip)
}
inline std::string* PS::mutable_ps_ip() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.PS.ps_ip)
  return _internal_mutable_ps_ip();
}
inline const std::string& PS::_internal_ps_ip() const {
  return ps_ip_.Get();
}
inline void PS::_internal_set_ps_ip(const std::string& value) {
  
  ps_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PS::set_ps_ip(std::string&& value) {
  
  ps_ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsytem.falcon.v0.PS.ps_ip)
}
inline void PS::set_ps_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ps_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.PS.ps_ip)
}
inline void PS::set_ps_ip(const char* value,
    size_t size) {
  
  ps_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.PS.ps_ip)
}
inline std::string* PS::_internal_mutable_ps_ip() {
  
  return ps_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PS::release_ps_ip() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.PS.ps_ip)
  return ps_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PS::set_allocated_ps_ip(std::string* ps_ip) {
  if (ps_ip != nullptr) {
    
  } else {
    
  }
  ps_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ps_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.PS.ps_ip)
}

// int32 ps_port = 2;
inline void PS::clear_ps_port() {
  ps_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PS::_internal_ps_port() const {
  return ps_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PS::ps_port() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.PS.ps_port)
  return _internal_ps_port();
}
inline void PS::_internal_set_ps_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ps_port_ = value;
}
inline void PS::set_ps_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ps_port(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.PS.ps_port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ps_5fnetwork_2eproto
