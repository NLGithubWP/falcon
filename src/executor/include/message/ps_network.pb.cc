// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ps_network.proto

#include "ps_network.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ps_5fnetwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PS_ps_5fnetwork_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ps_5fnetwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Worker_ps_5fnetwork_2eproto;
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {
class PSNetworkConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PSNetworkConfig> _instance;
} _PSNetworkConfig_default_instance_;
class WorkerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Worker> _instance;
} _Worker_default_instance_;
class PSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PS> _instance;
} _PS_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com
static void InitDefaultsscc_info_PS_ps_5fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_PS_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::PS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PS_ps_5fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PS_ps_5fnetwork_2eproto}, {}};

static void InitDefaultsscc_info_PSNetworkConfig_ps_5fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_PSNetworkConfig_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::PSNetworkConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PSNetworkConfig_ps_5fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PSNetworkConfig_ps_5fnetwork_2eproto}, {
      &scc_info_Worker_ps_5fnetwork_2eproto.base,
      &scc_info_PS_ps_5fnetwork_2eproto.base,}};

static void InitDefaultsscc_info_Worker_ps_5fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_Worker_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::Worker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Worker_ps_5fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Worker_ps_5fnetwork_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ps_5fnetwork_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ps_5fnetwork_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ps_5fnetwork_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ps_5fnetwork_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::PSNetworkConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::PSNetworkConfig, workers_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::PSNetworkConfig, ps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Worker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Worker, worker_ip_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Worker, worker_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::PS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::PS, ps_ip_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::PS, ps_port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::nus::dbsytem::falcon::v0::PSNetworkConfig)},
  { 7, -1, sizeof(::com::nus::dbsytem::falcon::v0::Worker)},
  { 14, -1, sizeof(::com::nus::dbsytem::falcon::v0::PS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_PSNetworkConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_Worker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_PS_default_instance_),
};

const char descriptor_table_protodef_ps_5fnetwork_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ps_network.proto\022\031com.nus.dbsytem.falc"
  "on.v0\"p\n\017PSNetworkConfig\0222\n\007workers\030\001 \003("
  "\0132!.com.nus.dbsytem.falcon.v0.Worker\022)\n\002"
  "ps\030\002 \003(\0132\035.com.nus.dbsytem.falcon.v0.PS\""
  "0\n\006Worker\022\021\n\tworker_ip\030\001 \001(\t\022\023\n\013worker_p"
  "ort\030\002 \001(\005\"$\n\002PS\022\r\n\005ps_ip\030\001 \001(\t\022\017\n\007ps_por"
  "t\030\002 \001(\005B\005Z\003/v0b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ps_5fnetwork_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ps_5fnetwork_2eproto_sccs[3] = {
  &scc_info_PS_ps_5fnetwork_2eproto.base,
  &scc_info_PSNetworkConfig_ps_5fnetwork_2eproto.base,
  &scc_info_Worker_ps_5fnetwork_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ps_5fnetwork_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ps_5fnetwork_2eproto = {
  false, false, descriptor_table_protodef_ps_5fnetwork_2eproto, "ps_network.proto", 262,
  &descriptor_table_ps_5fnetwork_2eproto_once, descriptor_table_ps_5fnetwork_2eproto_sccs, descriptor_table_ps_5fnetwork_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_ps_5fnetwork_2eproto::offsets,
  file_level_metadata_ps_5fnetwork_2eproto, 3, file_level_enum_descriptors_ps_5fnetwork_2eproto, file_level_service_descriptors_ps_5fnetwork_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ps_5fnetwork_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ps_5fnetwork_2eproto)), true);
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {

// ===================================================================

class PSNetworkConfig::_Internal {
 public:
};

PSNetworkConfig::PSNetworkConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  workers_(arena),
  ps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
}
PSNetworkConfig::PSNetworkConfig(const PSNetworkConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      workers_(from.workers_),
      ps_(from.ps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
}

void PSNetworkConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PSNetworkConfig_ps_5fnetwork_2eproto.base);
}

PSNetworkConfig::~PSNetworkConfig() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PSNetworkConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PSNetworkConfig::ArenaDtor(void* object) {
  PSNetworkConfig* _this = reinterpret_cast< PSNetworkConfig* >(object);
  (void)_this;
}
void PSNetworkConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PSNetworkConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PSNetworkConfig& PSNetworkConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PSNetworkConfig_ps_5fnetwork_2eproto.base);
  return *internal_default_instance();
}


void PSNetworkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workers_.Clear();
  ps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSNetworkConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.nus.dbsytem.falcon.v0.Worker workers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.nus.dbsytem.falcon.v0.PS ps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PSNetworkConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.nus.dbsytem.falcon.v0.Worker workers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_workers(i), target, stream);
  }

  // repeated .com.nus.dbsytem.falcon.v0.PS ps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
  return target;
}

size_t PSNetworkConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.nus.dbsytem.falcon.v0.Worker workers = 1;
  total_size += 1UL * this->_internal_workers_size();
  for (const auto& msg : this->workers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.nus.dbsytem.falcon.v0.PS ps = 2;
  total_size += 1UL * this->_internal_ps_size();
  for (const auto& msg : this->ps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PSNetworkConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PSNetworkConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PSNetworkConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
    MergeFrom(*source);
  }
}

void PSNetworkConfig::MergeFrom(const PSNetworkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workers_.MergeFrom(from.workers_);
  ps_.MergeFrom(from.ps_);
}

void PSNetworkConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSNetworkConfig::CopyFrom(const PSNetworkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.PSNetworkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSNetworkConfig::IsInitialized() const {
  return true;
}

void PSNetworkConfig::InternalSwap(PSNetworkConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  workers_.InternalSwap(&other->workers_);
  ps_.InternalSwap(&other->ps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PSNetworkConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Worker::_Internal {
 public:
};

Worker::Worker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.Worker)
}
Worker::Worker(const Worker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worker_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_worker_ip().empty()) {
    worker_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worker_ip(), 
      GetArena());
  }
  worker_port_ = from.worker_port_;
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.Worker)
}

void Worker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Worker_ps_5fnetwork_2eproto.base);
  worker_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worker_port_ = 0;
}

Worker::~Worker() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.Worker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Worker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  worker_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Worker::ArenaDtor(void* object) {
  Worker* _this = reinterpret_cast< Worker* >(object);
  (void)_this;
}
void Worker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Worker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Worker& Worker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Worker_ps_5fnetwork_2eproto.base);
  return *internal_default_instance();
}


void Worker::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.Worker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_ip_.ClearToEmpty();
  worker_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Worker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string worker_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_worker_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsytem.falcon.v0.Worker.worker_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 worker_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          worker_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Worker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.Worker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_ip = 1;
  if (this->worker_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_ip().data(), static_cast<int>(this->_internal_worker_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.Worker.worker_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worker_ip(), target);
  }

  // int32 worker_port = 2;
  if (this->worker_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_worker_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.Worker)
  return target;
}

size_t Worker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.Worker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string worker_ip = 1;
  if (this->worker_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_ip());
  }

  // int32 worker_port = 2;
  if (this->worker_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_worker_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Worker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.Worker)
  GOOGLE_DCHECK_NE(&from, this);
  const Worker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Worker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.Worker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.Worker)
    MergeFrom(*source);
  }
}

void Worker::MergeFrom(const Worker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.Worker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.worker_ip().size() > 0) {
    _internal_set_worker_ip(from._internal_worker_ip());
  }
  if (from.worker_port() != 0) {
    _internal_set_worker_port(from._internal_worker_port());
  }
}

void Worker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.Worker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Worker::CopyFrom(const Worker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.Worker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Worker::IsInitialized() const {
  return true;
}

void Worker::InternalSwap(Worker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  worker_ip_.Swap(&other->worker_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(worker_port_, other->worker_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Worker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PS::_Internal {
 public:
};

PS::PS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.PS)
}
PS::PS(const PS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ps_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ps_ip().empty()) {
    ps_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ps_ip(), 
      GetArena());
  }
  ps_port_ = from.ps_port_;
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.PS)
}

void PS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PS_ps_5fnetwork_2eproto.base);
  ps_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ps_port_ = 0;
}

PS::~PS() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.PS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ps_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PS::ArenaDtor(void* object) {
  PS* _this = reinterpret_cast< PS* >(object);
  (void)_this;
}
void PS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PS& PS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PS_ps_5fnetwork_2eproto.base);
  return *internal_default_instance();
}


void PS::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.PS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ps_ip_.ClearToEmpty();
  ps_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ps_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ps_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.nus.dbsytem.falcon.v0.PS.ps_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ps_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ps_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.PS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ps_ip = 1;
  if (this->ps_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ps_ip().data(), static_cast<int>(this->_internal_ps_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.PS.ps_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ps_ip(), target);
  }

  // int32 ps_port = 2;
  if (this->ps_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ps_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.PS)
  return target;
}

size_t PS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.PS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ps_ip = 1;
  if (this->ps_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ps_ip());
  }

  // int32 ps_port = 2;
  if (this->ps_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ps_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.PS)
  GOOGLE_DCHECK_NE(&from, this);
  const PS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.PS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.PS)
    MergeFrom(*source);
  }
}

void PS::MergeFrom(const PS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.PS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ps_ip().size() > 0) {
    _internal_set_ps_ip(from._internal_ps_ip());
  }
  if (from.ps_port() != 0) {
    _internal_set_ps_port(from._internal_ps_port());
  }
}

void PS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.PS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PS::CopyFrom(const PS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.PS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PS::IsInitialized() const {
  return true;
}

void PS::InternalSwap(PS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ps_ip_.Swap(&other->ps_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ps_port_, other->ps_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PS::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::PSNetworkConfig* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::PSNetworkConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::PSNetworkConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::Worker* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::Worker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::Worker >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::PS* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::PS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::PS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
