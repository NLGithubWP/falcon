// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_status_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_status_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_status_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_status_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_status_2eproto;
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {
class ExecutorStatus;
class ExecutorStatusDefaultTypeInternal;
extern ExecutorStatusDefaultTypeInternal _ExecutorStatus_default_instance_;
class HeartBeat;
class HeartBeatDefaultTypeInternal;
extern HeartBeatDefaultTypeInternal _HeartBeat_default_instance_;
class JobStatus;
class JobStatusDefaultTypeInternal;
extern JobStatusDefaultTypeInternal _JobStatus_default_instance_;
class TaskStatus;
class TaskStatusDefaultTypeInternal;
extern TaskStatusDefaultTypeInternal _TaskStatus_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::nus::dbsystem::falcon::v0::ExecutorStatus* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::ExecutorStatus>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::HeartBeat* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::HeartBeat>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::JobStatus* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::JobStatus>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::TaskStatus* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::TaskStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

enum StatusType : int {
  initialized = 0,
  running = 1,
  succeed = 2,
  failed = 3,
  StatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatusType_IsValid(int value);
constexpr StatusType StatusType_MIN = initialized;
constexpr StatusType StatusType_MAX = failed;
constexpr int StatusType_ARRAYSIZE = StatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusType_descriptor();
template<typename T>
inline const std::string& StatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusType_descriptor(), enum_t_value);
}
inline bool StatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusType>(
    StatusType_descriptor(), name, value);
}
// ===================================================================

class HeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.HeartBeat) */ {
 public:
  inline HeartBeat() : HeartBeat(nullptr) {}
  virtual ~HeartBeat();

  HeartBeat(const HeartBeat& from);
  HeartBeat(HeartBeat&& from) noexcept
    : HeartBeat() {
    *this = ::std::move(from);
  }

  inline HeartBeat& operator=(const HeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeat& operator=(HeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartBeat& default_instance();

  static inline const HeartBeat* internal_default_instance() {
    return reinterpret_cast<const HeartBeat*>(
               &_HeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HeartBeat& a, HeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartBeat* New() const final {
    return CreateMaybeMessage<HeartBeat>(nullptr);
  }

  HeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartBeat& from);
  void MergeFrom(const HeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.HeartBeat";
  }
  protected:
  explicit HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.HeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class TaskStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.TaskStatus) */ {
 public:
  inline TaskStatus() : TaskStatus(nullptr) {}
  virtual ~TaskStatus();

  TaskStatus(const TaskStatus& from);
  TaskStatus(TaskStatus&& from) noexcept
    : TaskStatus() {
    *this = ::std::move(from);
  }

  inline TaskStatus& operator=(const TaskStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStatus& operator=(TaskStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskStatus& default_instance();

  static inline const TaskStatus* internal_default_instance() {
    return reinterpret_cast<const TaskStatus*>(
               &_TaskStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskStatus& a, TaskStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskStatus* New() const final {
    return CreateMaybeMessage<TaskStatus>(nullptr);
  }

  TaskStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskStatus& from);
  void MergeFrom(const TaskStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.TaskStatus";
  }
  protected:
  explicit TaskStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskResultFieldNumber = 3,
    kErrorMsgFieldNumber = 5,
    kTaskIdFieldNumber = 1,
    kTaskStatusFieldNumber = 2,
    kErrorCodeFieldNumber = 4,
  };
  // string task_result = 3;
  void clear_task_result();
  const std::string& task_result() const;
  void set_task_result(const std::string& value);
  void set_task_result(std::string&& value);
  void set_task_result(const char* value);
  void set_task_result(const char* value, size_t size);
  std::string* mutable_task_result();
  std::string* release_task_result();
  void set_allocated_task_result(std::string* task_result);
  private:
  const std::string& _internal_task_result() const;
  void _internal_set_task_result(const std::string& value);
  std::string* _internal_mutable_task_result();
  public:

  // string error_msg = 5;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 task_id = 1;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
  void clear_task_status();
  ::com::nus::dbsystem::falcon::v0::StatusType task_status() const;
  void set_task_status(::com::nus::dbsystem::falcon::v0::StatusType value);
  private:
  ::com::nus::dbsystem::falcon::v0::StatusType _internal_task_status() const;
  void _internal_set_task_status(::com::nus::dbsystem::falcon::v0::StatusType value);
  public:

  // int32 error_code = 4;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.TaskStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_id_;
  int task_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class JobStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.JobStatus) */ {
 public:
  inline JobStatus() : JobStatus(nullptr) {}
  virtual ~JobStatus();

  JobStatus(const JobStatus& from);
  JobStatus(JobStatus&& from) noexcept
    : JobStatus() {
    *this = ::std::move(from);
  }

  inline JobStatus& operator=(const JobStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStatus& operator=(JobStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobStatus& default_instance();

  static inline const JobStatus* internal_default_instance() {
    return reinterpret_cast<const JobStatus*>(
               &_JobStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JobStatus& a, JobStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(JobStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobStatus* New() const final {
    return CreateMaybeMessage<JobStatus>(nullptr);
  }

  JobStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobStatus& from);
  void MergeFrom(const JobStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.JobStatus";
  }
  protected:
  explicit JobStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 6,
    kJobResultFieldNumber = 3,
    kErrorMsgFieldNumber = 5,
    kJobIdFieldNumber = 1,
    kJobStatusFieldNumber = 2,
    kErrorCodeFieldNumber = 4,
  };
  // repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 6;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::com::nus::dbsystem::falcon::v0::TaskStatus* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus >*
      mutable_tasks();
  private:
  const ::com::nus::dbsystem::falcon::v0::TaskStatus& _internal_tasks(int index) const;
  ::com::nus::dbsystem::falcon::v0::TaskStatus* _internal_add_tasks();
  public:
  const ::com::nus::dbsystem::falcon::v0::TaskStatus& tasks(int index) const;
  ::com::nus::dbsystem::falcon::v0::TaskStatus* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus >&
      tasks() const;

  // string job_result = 3;
  void clear_job_result();
  const std::string& job_result() const;
  void set_job_result(const std::string& value);
  void set_job_result(std::string&& value);
  void set_job_result(const char* value);
  void set_job_result(const char* value, size_t size);
  std::string* mutable_job_result();
  std::string* release_job_result();
  void set_allocated_job_result(std::string* job_result);
  private:
  const std::string& _internal_job_result() const;
  void _internal_set_job_result(const std::string& value);
  std::string* _internal_mutable_job_result();
  public:

  // string error_msg = 5;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 job_id = 1;
  void clear_job_id();
  ::PROTOBUF_NAMESPACE_ID::int32 job_id() const;
  void set_job_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_job_id() const;
  void _internal_set_job_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
  void clear_job_status();
  ::com::nus::dbsystem::falcon::v0::StatusType job_status() const;
  void set_job_status(::com::nus::dbsystem::falcon::v0::StatusType value);
  private:
  ::com::nus::dbsystem::falcon::v0::StatusType _internal_job_status() const;
  void _internal_set_job_status(::com::nus::dbsystem::falcon::v0::StatusType value);
  public:

  // int32 error_code = 4;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.JobStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus > tasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 job_id_;
  int job_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class ExecutorStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.ExecutorStatus) */ {
 public:
  inline ExecutorStatus() : ExecutorStatus(nullptr) {}
  virtual ~ExecutorStatus();

  ExecutorStatus(const ExecutorStatus& from);
  ExecutorStatus(ExecutorStatus&& from) noexcept
    : ExecutorStatus() {
    *this = ::std::move(from);
  }

  inline ExecutorStatus& operator=(const ExecutorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutorStatus& operator=(ExecutorStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecutorStatus& default_instance();

  static inline const ExecutorStatus* internal_default_instance() {
    return reinterpret_cast<const ExecutorStatus*>(
               &_ExecutorStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExecutorStatus& a, ExecutorStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutorStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutorStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecutorStatus* New() const final {
    return CreateMaybeMessage<ExecutorStatus>(nullptr);
  }

  ExecutorStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecutorStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecutorStatus& from);
  void MergeFrom(const ExecutorStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutorStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.ExecutorStatus";
  }
  protected:
  explicit ExecutorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_status_2eproto);
    return ::descriptor_table_status_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobsFieldNumber = 2,
    kHeartbeatFieldNumber = 1,
  };
  // repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
  int jobs_size() const;
  private:
  int _internal_jobs_size() const;
  public:
  void clear_jobs();
  ::com::nus::dbsystem::falcon::v0::JobStatus* mutable_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus >*
      mutable_jobs();
  private:
  const ::com::nus::dbsystem::falcon::v0::JobStatus& _internal_jobs(int index) const;
  ::com::nus::dbsystem::falcon::v0::JobStatus* _internal_add_jobs();
  public:
  const ::com::nus::dbsystem::falcon::v0::JobStatus& jobs(int index) const;
  ::com::nus::dbsystem::falcon::v0::JobStatus* add_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus >&
      jobs() const;

  // .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::com::nus::dbsystem::falcon::v0::HeartBeat& heartbeat() const;
  ::com::nus::dbsystem::falcon::v0::HeartBeat* release_heartbeat();
  ::com::nus::dbsystem::falcon::v0::HeartBeat* mutable_heartbeat();
  void set_allocated_heartbeat(::com::nus::dbsystem::falcon::v0::HeartBeat* heartbeat);
  private:
  const ::com::nus::dbsystem::falcon::v0::HeartBeat& _internal_heartbeat() const;
  ::com::nus::dbsystem::falcon::v0::HeartBeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::com::nus::dbsystem::falcon::v0::HeartBeat* heartbeat);
  ::com::nus::dbsystem::falcon::v0::HeartBeat* unsafe_arena_release_heartbeat();

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.ExecutorStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus > jobs_;
  ::com::nus::dbsystem::falcon::v0::HeartBeat* heartbeat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_status_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeartBeat

// .google.protobuf.Timestamp timestamp = 1;
inline bool HeartBeat::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool HeartBeat::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& HeartBeat::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& HeartBeat::timestamp() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
  return _internal_timestamp();
}
inline void HeartBeat::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* HeartBeat::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* HeartBeat::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* HeartBeat::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* HeartBeat::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
  return _internal_mutable_timestamp();
}
inline void HeartBeat::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
}

// -------------------------------------------------------------------

// TaskStatus

// int32 task_id = 1;
inline void TaskStatus::clear_task_id() {
  task_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskStatus::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskStatus::task_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.task_id)
  return _internal_task_id();
}
inline void TaskStatus::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  task_id_ = value;
}
inline void TaskStatus::set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.task_id)
}

// .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
inline void TaskStatus::clear_task_status() {
  task_status_ = 0;
}
inline ::com::nus::dbsystem::falcon::v0::StatusType TaskStatus::_internal_task_status() const {
  return static_cast< ::com::nus::dbsystem::falcon::v0::StatusType >(task_status_);
}
inline ::com::nus::dbsystem::falcon::v0::StatusType TaskStatus::task_status() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.task_status)
  return _internal_task_status();
}
inline void TaskStatus::_internal_set_task_status(::com::nus::dbsystem::falcon::v0::StatusType value) {
  
  task_status_ = value;
}
inline void TaskStatus::set_task_status(::com::nus::dbsystem::falcon::v0::StatusType value) {
  _internal_set_task_status(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.task_status)
}

// string task_result = 3;
inline void TaskStatus::clear_task_result() {
  task_result_.ClearToEmpty();
}
inline const std::string& TaskStatus::task_result() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
  return _internal_task_result();
}
inline void TaskStatus::set_task_result(const std::string& value) {
  _internal_set_task_result(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}
inline std::string* TaskStatus::mutable_task_result() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
  return _internal_mutable_task_result();
}
inline const std::string& TaskStatus::_internal_task_result() const {
  return task_result_.Get();
}
inline void TaskStatus::_internal_set_task_result(const std::string& value) {
  
  task_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskStatus::set_task_result(std::string&& value) {
  
  task_result_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}
inline void TaskStatus::set_task_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}
inline void TaskStatus::set_task_result(const char* value,
    size_t size) {
  
  task_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}
inline std::string* TaskStatus::_internal_mutable_task_result() {
  
  return task_result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskStatus::release_task_result() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
  return task_result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskStatus::set_allocated_task_result(std::string* task_result) {
  if (task_result != nullptr) {
    
  } else {
    
  }
  task_result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}

// int32 error_code = 4;
inline void TaskStatus::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskStatus::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskStatus::error_code() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.error_code)
  return _internal_error_code();
}
inline void TaskStatus::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void TaskStatus::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.error_code)
}

// string error_msg = 5;
inline void TaskStatus::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& TaskStatus::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
  return _internal_error_msg();
}
inline void TaskStatus::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}
inline std::string* TaskStatus::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& TaskStatus::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void TaskStatus::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskStatus::set_error_msg(std::string&& value) {
  
  error_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}
inline void TaskStatus::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}
inline void TaskStatus::set_error_msg(const char* value,
    size_t size) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}
inline std::string* TaskStatus::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskStatus::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskStatus::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}

// -------------------------------------------------------------------

// JobStatus

// int32 job_id = 1;
inline void JobStatus::clear_job_id() {
  job_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatus::_internal_job_id() const {
  return job_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatus::job_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.job_id)
  return _internal_job_id();
}
inline void JobStatus::_internal_set_job_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  job_id_ = value;
}
inline void JobStatus::set_job_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.job_id)
}

// .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
inline void JobStatus::clear_job_status() {
  job_status_ = 0;
}
inline ::com::nus::dbsystem::falcon::v0::StatusType JobStatus::_internal_job_status() const {
  return static_cast< ::com::nus::dbsystem::falcon::v0::StatusType >(job_status_);
}
inline ::com::nus::dbsystem::falcon::v0::StatusType JobStatus::job_status() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.job_status)
  return _internal_job_status();
}
inline void JobStatus::_internal_set_job_status(::com::nus::dbsystem::falcon::v0::StatusType value) {
  
  job_status_ = value;
}
inline void JobStatus::set_job_status(::com::nus::dbsystem::falcon::v0::StatusType value) {
  _internal_set_job_status(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.job_status)
}

// string job_result = 3;
inline void JobStatus::clear_job_result() {
  job_result_.ClearToEmpty();
}
inline const std::string& JobStatus::job_result() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
  return _internal_job_result();
}
inline void JobStatus::set_job_result(const std::string& value) {
  _internal_set_job_result(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}
inline std::string* JobStatus::mutable_job_result() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
  return _internal_mutable_job_result();
}
inline const std::string& JobStatus::_internal_job_result() const {
  return job_result_.Get();
}
inline void JobStatus::_internal_set_job_result(const std::string& value) {
  
  job_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JobStatus::set_job_result(std::string&& value) {
  
  job_result_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}
inline void JobStatus::set_job_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}
inline void JobStatus::set_job_result(const char* value,
    size_t size) {
  
  job_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}
inline std::string* JobStatus::_internal_mutable_job_result() {
  
  return job_result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JobStatus::release_job_result() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
  return job_result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobStatus::set_allocated_job_result(std::string* job_result) {
  if (job_result != nullptr) {
    
  } else {
    
  }
  job_result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}

// int32 error_code = 4;
inline void JobStatus::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatus::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatus::error_code() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.error_code)
  return _internal_error_code();
}
inline void JobStatus::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void JobStatus::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.error_code)
}

// string error_msg = 5;
inline void JobStatus::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& JobStatus::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
  return _internal_error_msg();
}
inline void JobStatus::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}
inline std::string* JobStatus::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& JobStatus::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void JobStatus::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JobStatus::set_error_msg(std::string&& value) {
  
  error_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}
inline void JobStatus::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}
inline void JobStatus::set_error_msg(const char* value,
    size_t size) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}
inline std::string* JobStatus::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JobStatus::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JobStatus::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}

// repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 6;
inline int JobStatus::_internal_tasks_size() const {
  return tasks_.size();
}
inline int JobStatus::tasks_size() const {
  return _internal_tasks_size();
}
inline void JobStatus::clear_tasks() {
  tasks_.Clear();
}
inline ::com::nus::dbsystem::falcon::v0::TaskStatus* JobStatus::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus >*
JobStatus::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return &tasks_;
}
inline const ::com::nus::dbsystem::falcon::v0::TaskStatus& JobStatus::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::com::nus::dbsystem::falcon::v0::TaskStatus& JobStatus::tasks(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return _internal_tasks(index);
}
inline ::com::nus::dbsystem::falcon::v0::TaskStatus* JobStatus::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::com::nus::dbsystem::falcon::v0::TaskStatus* JobStatus::add_tasks() {
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus >&
JobStatus::tasks() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// ExecutorStatus

// .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
inline bool ExecutorStatus::_internal_has_heartbeat() const {
  return this != internal_default_instance() && heartbeat_ != nullptr;
}
inline bool ExecutorStatus::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void ExecutorStatus::clear_heartbeat() {
  if (GetArena() == nullptr && heartbeat_ != nullptr) {
    delete heartbeat_;
  }
  heartbeat_ = nullptr;
}
inline const ::com::nus::dbsystem::falcon::v0::HeartBeat& ExecutorStatus::_internal_heartbeat() const {
  const ::com::nus::dbsystem::falcon::v0::HeartBeat* p = heartbeat_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::nus::dbsystem::falcon::v0::HeartBeat&>(
      ::com::nus::dbsystem::falcon::v0::_HeartBeat_default_instance_);
}
inline const ::com::nus::dbsystem::falcon::v0::HeartBeat& ExecutorStatus::heartbeat() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
  return _internal_heartbeat();
}
inline void ExecutorStatus::unsafe_arena_set_allocated_heartbeat(
    ::com::nus::dbsystem::falcon::v0::HeartBeat* heartbeat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartbeat_);
  }
  heartbeat_ = heartbeat;
  if (heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
}
inline ::com::nus::dbsystem::falcon::v0::HeartBeat* ExecutorStatus::release_heartbeat() {
  
  ::com::nus::dbsystem::falcon::v0::HeartBeat* temp = heartbeat_;
  heartbeat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::nus::dbsystem::falcon::v0::HeartBeat* ExecutorStatus::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
  
  ::com::nus::dbsystem::falcon::v0::HeartBeat* temp = heartbeat_;
  heartbeat_ = nullptr;
  return temp;
}
inline ::com::nus::dbsystem::falcon::v0::HeartBeat* ExecutorStatus::_internal_mutable_heartbeat() {
  
  if (heartbeat_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::HeartBeat>(GetArena());
    heartbeat_ = p;
  }
  return heartbeat_;
}
inline ::com::nus::dbsystem::falcon::v0::HeartBeat* ExecutorStatus::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
  return _internal_mutable_heartbeat();
}
inline void ExecutorStatus::set_allocated_heartbeat(::com::nus::dbsystem::falcon::v0::HeartBeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete heartbeat_;
  }
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    
  } else {
    
  }
  heartbeat_ = heartbeat;
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
}

// repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
inline int ExecutorStatus::_internal_jobs_size() const {
  return jobs_.size();
}
inline int ExecutorStatus::jobs_size() const {
  return _internal_jobs_size();
}
inline void ExecutorStatus::clear_jobs() {
  jobs_.Clear();
}
inline ::com::nus::dbsystem::falcon::v0::JobStatus* ExecutorStatus::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus >*
ExecutorStatus::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return &jobs_;
}
inline const ::com::nus::dbsystem::falcon::v0::JobStatus& ExecutorStatus::_internal_jobs(int index) const {
  return jobs_.Get(index);
}
inline const ::com::nus::dbsystem::falcon::v0::JobStatus& ExecutorStatus::jobs(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return _internal_jobs(index);
}
inline ::com::nus::dbsystem::falcon::v0::JobStatus* ExecutorStatus::_internal_add_jobs() {
  return jobs_.Add();
}
inline ::com::nus::dbsystem::falcon::v0::JobStatus* ExecutorStatus::add_jobs() {
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return _internal_add_jobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus >&
ExecutorStatus::jobs() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return jobs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::nus::dbsystem::falcon::v0::StatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::nus::dbsystem::falcon::v0::StatusType>() {
  return ::com::nus::dbsystem::falcon::v0::StatusType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_status_2eproto
