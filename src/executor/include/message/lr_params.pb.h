// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lr_params.proto

#ifndef PROTOBUF_lr_5fparams_2eproto__INCLUDED
#define PROTOBUF_lr_5fparams_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lr_5fparams_2eproto();
void protobuf_AssignDesc_lr_5fparams_2eproto();
void protobuf_ShutdownFile_lr_5fparams_2eproto();

class LogisticRegressionParams;

// ===================================================================

class LogisticRegressionParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.LogisticRegressionParams) */ {
 public:
  LogisticRegressionParams();
  virtual ~LogisticRegressionParams();

  LogisticRegressionParams(const LogisticRegressionParams& from);

  inline LogisticRegressionParams& operator=(const LogisticRegressionParams& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogisticRegressionParams& default_instance();

  void Swap(LogisticRegressionParams* other);

  // implements Message ----------------------------------------------

  inline LogisticRegressionParams* New() const { return New(NULL); }

  LogisticRegressionParams* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogisticRegressionParams& from);
  void MergeFrom(const LogisticRegressionParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogisticRegressionParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 batch_size = 1;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 1;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // optional int32 max_iteration = 2;
  void clear_max_iteration();
  static const int kMaxIterationFieldNumber = 2;
  ::google::protobuf::int32 max_iteration() const;
  void set_max_iteration(::google::protobuf::int32 value);

  // optional float converge_threshold = 3;
  void clear_converge_threshold();
  static const int kConvergeThresholdFieldNumber = 3;
  float converge_threshold() const;
  void set_converge_threshold(float value);

  // optional int32 with_regularization = 4;
  void clear_with_regularization();
  static const int kWithRegularizationFieldNumber = 4;
  ::google::protobuf::int32 with_regularization() const;
  void set_with_regularization(::google::protobuf::int32 value);

  // optional float alpha = 5;
  void clear_alpha();
  static const int kAlphaFieldNumber = 5;
  float alpha() const;
  void set_alpha(float value);

  // optional float learning_rate = 6;
  void clear_learning_rate();
  static const int kLearningRateFieldNumber = 6;
  float learning_rate() const;
  void set_learning_rate(float value);

  // optional float decay = 7;
  void clear_decay();
  static const int kDecayFieldNumber = 7;
  float decay() const;
  void set_decay(float value);

  // optional string penalty = 8;
  void clear_penalty();
  static const int kPenaltyFieldNumber = 8;
  const ::std::string& penalty() const;
  void set_penalty(const ::std::string& value);
  void set_penalty(const char* value);
  void set_penalty(const char* value, size_t size);
  ::std::string* mutable_penalty();
  ::std::string* release_penalty();
  void set_allocated_penalty(::std::string* penalty);

  // optional string optimizer = 9;
  void clear_optimizer();
  static const int kOptimizerFieldNumber = 9;
  const ::std::string& optimizer() const;
  void set_optimizer(const ::std::string& value);
  void set_optimizer(const char* value);
  void set_optimizer(const char* value, size_t size);
  ::std::string* mutable_optimizer();
  ::std::string* release_optimizer();
  void set_allocated_optimizer(::std::string* optimizer);

  // optional string multi_class = 10;
  void clear_multi_class();
  static const int kMultiClassFieldNumber = 10;
  const ::std::string& multi_class() const;
  void set_multi_class(const ::std::string& value);
  void set_multi_class(const char* value);
  void set_multi_class(const char* value, size_t size);
  ::std::string* mutable_multi_class();
  ::std::string* release_multi_class();
  void set_allocated_multi_class(::std::string* multi_class);

  // optional string metric = 11;
  void clear_metric();
  static const int kMetricFieldNumber = 11;
  const ::std::string& metric() const;
  void set_metric(const ::std::string& value);
  void set_metric(const char* value);
  void set_metric(const char* value, size_t size);
  ::std::string* mutable_metric();
  ::std::string* release_metric();
  void set_allocated_metric(::std::string* metric);

  // optional float differential_privacy_budget = 12;
  void clear_differential_privacy_budget();
  static const int kDifferentialPrivacyBudgetFieldNumber = 12;
  float differential_privacy_budget() const;
  void set_differential_privacy_budget(float value);

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 batch_size_;
  ::google::protobuf::int32 max_iteration_;
  float converge_threshold_;
  ::google::protobuf::int32 with_regularization_;
  float alpha_;
  float learning_rate_;
  ::google::protobuf::internal::ArenaStringPtr penalty_;
  ::google::protobuf::internal::ArenaStringPtr optimizer_;
  float decay_;
  float differential_privacy_budget_;
  ::google::protobuf::internal::ArenaStringPtr multi_class_;
  ::google::protobuf::internal::ArenaStringPtr metric_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lr_5fparams_2eproto();
  friend void protobuf_AssignDesc_lr_5fparams_2eproto();
  friend void protobuf_ShutdownFile_lr_5fparams_2eproto();

  void InitAsDefaultInstance();
  static LogisticRegressionParams* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LogisticRegressionParams

// optional int32 batch_size = 1;
inline void LogisticRegressionParams::clear_batch_size() {
  batch_size_ = 0;
}
inline ::google::protobuf::int32 LogisticRegressionParams::batch_size() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.batch_size)
  return batch_size_;
}
inline void LogisticRegressionParams::set_batch_size(::google::protobuf::int32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.batch_size)
}

// optional int32 max_iteration = 2;
inline void LogisticRegressionParams::clear_max_iteration() {
  max_iteration_ = 0;
}
inline ::google::protobuf::int32 LogisticRegressionParams::max_iteration() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.max_iteration)
  return max_iteration_;
}
inline void LogisticRegressionParams::set_max_iteration(::google::protobuf::int32 value) {
  
  max_iteration_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.max_iteration)
}

// optional float converge_threshold = 3;
inline void LogisticRegressionParams::clear_converge_threshold() {
  converge_threshold_ = 0;
}
inline float LogisticRegressionParams::converge_threshold() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.converge_threshold)
  return converge_threshold_;
}
inline void LogisticRegressionParams::set_converge_threshold(float value) {
  
  converge_threshold_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.converge_threshold)
}

// optional int32 with_regularization = 4;
inline void LogisticRegressionParams::clear_with_regularization() {
  with_regularization_ = 0;
}
inline ::google::protobuf::int32 LogisticRegressionParams::with_regularization() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.with_regularization)
  return with_regularization_;
}
inline void LogisticRegressionParams::set_with_regularization(::google::protobuf::int32 value) {
  
  with_regularization_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.with_regularization)
}

// optional float alpha = 5;
inline void LogisticRegressionParams::clear_alpha() {
  alpha_ = 0;
}
inline float LogisticRegressionParams::alpha() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.alpha)
  return alpha_;
}
inline void LogisticRegressionParams::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.alpha)
}

// optional float learning_rate = 6;
inline void LogisticRegressionParams::clear_learning_rate() {
  learning_rate_ = 0;
}
inline float LogisticRegressionParams::learning_rate() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.learning_rate)
  return learning_rate_;
}
inline void LogisticRegressionParams::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.learning_rate)
}

// optional float decay = 7;
inline void LogisticRegressionParams::clear_decay() {
  decay_ = 0;
}
inline float LogisticRegressionParams::decay() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.decay)
  return decay_;
}
inline void LogisticRegressionParams::set_decay(float value) {
  
  decay_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.decay)
}

// optional string penalty = 8;
inline void LogisticRegressionParams::clear_penalty() {
  penalty_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogisticRegressionParams::penalty() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
  return penalty_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogisticRegressionParams::set_penalty(const ::std::string& value) {
  
  penalty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}
inline void LogisticRegressionParams::set_penalty(const char* value) {
  
  penalty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}
inline void LogisticRegressionParams::set_penalty(const char* value, size_t size) {
  
  penalty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}
inline ::std::string* LogisticRegressionParams::mutable_penalty() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
  return penalty_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogisticRegressionParams::release_penalty() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
  
  return penalty_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogisticRegressionParams::set_allocated_penalty(::std::string* penalty) {
  if (penalty != NULL) {
    
  } else {
    
  }
  penalty_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), penalty);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}

// optional string optimizer = 9;
inline void LogisticRegressionParams::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogisticRegressionParams::optimizer() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
  return optimizer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogisticRegressionParams::set_optimizer(const ::std::string& value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}
inline void LogisticRegressionParams::set_optimizer(const char* value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}
inline void LogisticRegressionParams::set_optimizer(const char* value, size_t size) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}
inline ::std::string* LogisticRegressionParams::mutable_optimizer() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
  return optimizer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogisticRegressionParams::release_optimizer() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
  
  return optimizer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogisticRegressionParams::set_allocated_optimizer(::std::string* optimizer) {
  if (optimizer != NULL) {
    
  } else {
    
  }
  optimizer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}

// optional string multi_class = 10;
inline void LogisticRegressionParams::clear_multi_class() {
  multi_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogisticRegressionParams::multi_class() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
  return multi_class_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogisticRegressionParams::set_multi_class(const ::std::string& value) {
  
  multi_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}
inline void LogisticRegressionParams::set_multi_class(const char* value) {
  
  multi_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}
inline void LogisticRegressionParams::set_multi_class(const char* value, size_t size) {
  
  multi_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}
inline ::std::string* LogisticRegressionParams::mutable_multi_class() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
  return multi_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogisticRegressionParams::release_multi_class() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
  
  return multi_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogisticRegressionParams::set_allocated_multi_class(::std::string* multi_class) {
  if (multi_class != NULL) {
    
  } else {
    
  }
  multi_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), multi_class);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}

// optional string metric = 11;
inline void LogisticRegressionParams::clear_metric() {
  metric_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogisticRegressionParams::metric() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
  return metric_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogisticRegressionParams::set_metric(const ::std::string& value) {
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}
inline void LogisticRegressionParams::set_metric(const char* value) {
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}
inline void LogisticRegressionParams::set_metric(const char* value, size_t size) {
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}
inline ::std::string* LogisticRegressionParams::mutable_metric() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
  return metric_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogisticRegressionParams::release_metric() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
  
  return metric_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogisticRegressionParams::set_allocated_metric(::std::string* metric) {
  if (metric != NULL) {
    
  } else {
    
  }
  metric_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}

// optional float differential_privacy_budget = 12;
inline void LogisticRegressionParams::clear_differential_privacy_budget() {
  differential_privacy_budget_ = 0;
}
inline float LogisticRegressionParams::differential_privacy_budget() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.differential_privacy_budget)
  return differential_privacy_budget_;
}
inline void LogisticRegressionParams::set_differential_privacy_budget(float value) {
  
  differential_privacy_budget_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.differential_privacy_budget)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lr_5fparams_2eproto__INCLUDED
