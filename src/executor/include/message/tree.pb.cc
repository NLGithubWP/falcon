// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tree.proto

#include "tree.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tree_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EncryptedStatPerSplit_tree_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedPointEncodedNumber_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tree_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Node_tree_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tree_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TreeModel_tree_2eproto;
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {
class EncryptedStatPerSplitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncryptedStatPerSplit> _instance;
} _EncryptedStatPerSplit_default_instance_;
class EncryptedStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncryptedStatistics> _instance;
} _EncryptedStatistics_default_instance_;
class NodeUpdateInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeUpdateInfo> _instance;
} _NodeUpdateInfo_default_instance_;
class SplitInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitInfo> _instance;
} _SplitInfo_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class TreeModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TreeModel> _instance;
} _TreeModel_default_instance_;
class ForestModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForestModel> _instance;
} _ForestModel_default_instance_;
class GbdtModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GbdtModel> _instance;
} _GbdtModel_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com
static void InitDefaultsscc_info_EncryptedStatPerSplit_tree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_EncryptedStatPerSplit_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EncryptedStatPerSplit_tree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EncryptedStatPerSplit_tree_2eproto}, {
      &scc_info_FixedPointEncodedNumber_common_2eproto.base,}};

static void InitDefaultsscc_info_EncryptedStatistics_tree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_EncryptedStatistics_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::EncryptedStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EncryptedStatistics_tree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EncryptedStatistics_tree_2eproto}, {
      &scc_info_FixedPointEncodedNumber_common_2eproto.base,
      &scc_info_EncryptedStatPerSplit_tree_2eproto.base,}};

static void InitDefaultsscc_info_ForestModel_tree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_ForestModel_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::ForestModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ForestModel_tree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ForestModel_tree_2eproto}, {
      &scc_info_TreeModel_tree_2eproto.base,}};

static void InitDefaultsscc_info_GbdtModel_tree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_GbdtModel_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::GbdtModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GbdtModel_tree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GbdtModel_tree_2eproto}, {
      &scc_info_TreeModel_tree_2eproto.base,}};

static void InitDefaultsscc_info_Node_tree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_Node_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Node_tree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Node_tree_2eproto}, {
      &scc_info_FixedPointEncodedNumber_common_2eproto.base,}};

static void InitDefaultsscc_info_NodeUpdateInfo_tree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_NodeUpdateInfo_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::NodeUpdateInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeUpdateInfo_tree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeUpdateInfo_tree_2eproto}, {
      &scc_info_FixedPointEncodedNumber_common_2eproto.base,}};

static void InitDefaultsscc_info_SplitInfo_tree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_SplitInfo_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::SplitInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplitInfo_tree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SplitInfo_tree_2eproto}, {}};

static void InitDefaultsscc_info_TreeModel_tree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::nus::dbsytem::falcon::v0::_TreeModel_default_instance_;
    new (ptr) ::com::nus::dbsytem::falcon::v0::TreeModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TreeModel_tree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TreeModel_tree_2eproto}, {
      &scc_info_Node_tree_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tree_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tree_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tree_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tree_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit, encrypted_stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::EncryptedStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::EncryptedStatistics, client_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::EncryptedStatistics, node_index_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::EncryptedStatistics, local_split_num_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::EncryptedStatistics, classes_num_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::EncryptedStatistics, left_sample_nums_of_splits_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::EncryptedStatistics, right_sample_nums_of_splits_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::EncryptedStatistics, encrypted_stats_of_splits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::NodeUpdateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::NodeUpdateInfo, source_client_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::NodeUpdateInfo, best_client_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::NodeUpdateInfo, best_feature_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::NodeUpdateInfo, best_split_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::NodeUpdateInfo, left_branch_impurity_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::NodeUpdateInfo, right_branch_impurity_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::NodeUpdateInfo, left_branch_sample_ivs_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::NodeUpdateInfo, right_branch_sample_ivs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::SplitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::SplitInfo, global_split_num_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::SplitInfo, split_num_vec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, node_type_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, depth_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, is_self_feature_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, best_party_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, best_feature_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, best_split_id_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, split_threshold_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, node_sample_num_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, node_sample_distribution_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, impurity_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, label_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, left_child_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::Node, right_child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::TreeModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::TreeModel, tree_type_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::TreeModel, class_num_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::TreeModel, max_depth_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::TreeModel, nodes_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::TreeModel, internal_node_num_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::TreeModel, total_node_num_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::TreeModel, capacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::ForestModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::ForestModel, tree_size_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::ForestModel, tree_type_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::ForestModel, trees_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::GbdtModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::GbdtModel, tree_size_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::GbdtModel, tree_type_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::GbdtModel, n_estimator_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::GbdtModel, class_num_),
  PROTOBUF_FIELD_OFFSET(::com::nus::dbsytem::falcon::v0::GbdtModel, trees_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit)},
  { 6, -1, sizeof(::com::nus::dbsytem::falcon::v0::EncryptedStatistics)},
  { 18, -1, sizeof(::com::nus::dbsytem::falcon::v0::NodeUpdateInfo)},
  { 31, -1, sizeof(::com::nus::dbsytem::falcon::v0::SplitInfo)},
  { 38, -1, sizeof(::com::nus::dbsytem::falcon::v0::Node)},
  { 56, -1, sizeof(::com::nus::dbsytem::falcon::v0::TreeModel)},
  { 68, -1, sizeof(::com::nus::dbsytem::falcon::v0::ForestModel)},
  { 76, -1, sizeof(::com::nus::dbsytem::falcon::v0::GbdtModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_EncryptedStatPerSplit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_EncryptedStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_NodeUpdateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_SplitInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_TreeModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_ForestModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::nus::dbsytem::falcon::v0::_GbdtModel_default_instance_),
};

const char descriptor_table_protodef_tree_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntree.proto\022\031com.nus.dbsytem.falcon.v0\032"
  "\014common.proto\"c\n\025EncryptedStatPerSplit\022J"
  "\n\016encrypted_stat\030\001 \003(\01322.com.nus.dbsytem"
  ".falcon.v0.FixedPointEncodedNumber\"\360\002\n\023E"
  "ncryptedStatistics\022\021\n\tclient_id\030\001 \001(\005\022\022\n"
  "\nnode_index\030\002 \001(\005\022\027\n\017local_split_num\030\003 \001"
  "(\005\022\023\n\013classes_num\030\004 \001(\005\022V\n\032left_sample_n"
  "ums_of_splits\030\005 \003(\01322.com.nus.dbsytem.fa"
  "lcon.v0.FixedPointEncodedNumber\022W\n\033right"
  "_sample_nums_of_splits\030\006 \003(\01322.com.nus.d"
  "bsytem.falcon.v0.FixedPointEncodedNumber"
  "\022S\n\031encrypted_stats_of_splits\030\007 \003(\01320.co"
  "m.nus.dbsytem.falcon.v0.EncryptedStatPer"
  "Split\"\300\003\n\016NodeUpdateInfo\022\030\n\020source_clien"
  "t_id\030\001 \001(\005\022\026\n\016best_client_id\030\002 \001(\005\022\027\n\017be"
  "st_feature_id\030\003 \001(\005\022\025\n\rbest_split_id\030\004 \001"
  "(\005\022P\n\024left_branch_impurity\030\005 \001(\01322.com.n"
  "us.dbsytem.falcon.v0.FixedPointEncodedNu"
  "mber\022Q\n\025right_branch_impurity\030\006 \001(\01322.co"
  "m.nus.dbsytem.falcon.v0.FixedPointEncode"
  "dNumber\022R\n\026left_branch_sample_ivs\030\007 \003(\0132"
  "2.com.nus.dbsytem.falcon.v0.FixedPointEn"
  "codedNumber\022S\n\027right_branch_sample_ivs\030\010"
  " \003(\01322.com.nus.dbsytem.falcon.v0.FixedPo"
  "intEncodedNumber\"<\n\tSplitInfo\022\030\n\020global_"
  "split_num\030\001 \001(\005\022\025\n\rsplit_num_vec\030\002 \003(\005\"\216"
  "\003\n\004Node\022\021\n\tnode_type\030\001 \001(\005\022\r\n\005depth\030\002 \001("
  "\005\022\027\n\017is_self_feature\030\003 \001(\005\022\025\n\rbest_party"
  "_id\030\004 \001(\005\022\027\n\017best_feature_id\030\005 \001(\005\022\025\n\rbe"
  "st_split_id\030\006 \001(\005\022\027\n\017split_threshold\030\007 \001"
  "(\001\022\027\n\017node_sample_num\030\010 \001(\005\022 \n\030node_samp"
  "le_distribution\030\t \003(\005\022D\n\010impurity\030\n \001(\0132"
  "2.com.nus.dbsytem.falcon.v0.FixedPointEn"
  "codedNumber\022A\n\005label\030\013 \001(\01322.com.nus.dbs"
  "ytem.falcon.v0.FixedPointEncodedNumber\022\022"
  "\n\nleft_child\030\014 \001(\005\022\023\n\013right_child\030\r \001(\005\""
  "\271\001\n\tTreeModel\022\021\n\ttree_type\030\001 \001(\005\022\021\n\tclas"
  "s_num\030\002 \001(\005\022\021\n\tmax_depth\030\003 \001(\005\022.\n\005nodes\030"
  "\004 \003(\0132\037.com.nus.dbsytem.falcon.v0.Node\022\031"
  "\n\021internal_node_num\030\005 \001(\005\022\026\n\016total_node_"
  "num\030\006 \001(\005\022\020\n\010capacity\030\007 \001(\005\"h\n\013ForestMod"
  "el\022\021\n\ttree_size\030\001 \001(\005\022\021\n\ttree_type\030\002 \001(\005"
  "\0223\n\005trees\030\003 \003(\0132$.com.nus.dbsytem.falcon"
  ".v0.TreeModel\"\216\001\n\tGbdtModel\022\021\n\ttree_size"
  "\030\001 \001(\005\022\021\n\ttree_type\030\002 \001(\005\022\023\n\013n_estimator"
  "\030\003 \001(\005\022\021\n\tclass_num\030\004 \001(\005\0223\n\005trees\030\005 \003(\013"
  "2$.com.nus.dbsytem.falcon.v0.TreeModelP\000"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tree_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tree_2eproto_sccs[8] = {
  &scc_info_EncryptedStatPerSplit_tree_2eproto.base,
  &scc_info_EncryptedStatistics_tree_2eproto.base,
  &scc_info_ForestModel_tree_2eproto.base,
  &scc_info_GbdtModel_tree_2eproto.base,
  &scc_info_Node_tree_2eproto.base,
  &scc_info_NodeUpdateInfo_tree_2eproto.base,
  &scc_info_SplitInfo_tree_2eproto.base,
  &scc_info_TreeModel_tree_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tree_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tree_2eproto = {
  false, false, descriptor_table_protodef_tree_2eproto, "tree.proto", 1888,
  &descriptor_table_tree_2eproto_once, descriptor_table_tree_2eproto_sccs, descriptor_table_tree_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_tree_2eproto::offsets,
  file_level_metadata_tree_2eproto, 8, file_level_enum_descriptors_tree_2eproto, file_level_service_descriptors_tree_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tree_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tree_2eproto)), true);
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {

// ===================================================================

class EncryptedStatPerSplit::_Internal {
 public:
};

void EncryptedStatPerSplit::clear_encrypted_stat() {
  encrypted_stat_.Clear();
}
EncryptedStatPerSplit::EncryptedStatPerSplit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  encrypted_stat_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
}
EncryptedStatPerSplit::EncryptedStatPerSplit(const EncryptedStatPerSplit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      encrypted_stat_(from.encrypted_stat_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
}

void EncryptedStatPerSplit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EncryptedStatPerSplit_tree_2eproto.base);
}

EncryptedStatPerSplit::~EncryptedStatPerSplit() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EncryptedStatPerSplit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EncryptedStatPerSplit::ArenaDtor(void* object) {
  EncryptedStatPerSplit* _this = reinterpret_cast< EncryptedStatPerSplit* >(object);
  (void)_this;
}
void EncryptedStatPerSplit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncryptedStatPerSplit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptedStatPerSplit& EncryptedStatPerSplit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncryptedStatPerSplit_tree_2eproto.base);
  return *internal_default_instance();
}


void EncryptedStatPerSplit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encrypted_stat_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptedStatPerSplit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber encrypted_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encrypted_stat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncryptedStatPerSplit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber encrypted_stat = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_encrypted_stat_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_encrypted_stat(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
  return target;
}

size_t EncryptedStatPerSplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber encrypted_stat = 1;
  total_size += 1UL * this->_internal_encrypted_stat_size();
  for (const auto& msg : this->encrypted_stat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedStatPerSplit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
  GOOGLE_DCHECK_NE(&from, this);
  const EncryptedStatPerSplit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncryptedStatPerSplit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
    MergeFrom(*source);
  }
}

void EncryptedStatPerSplit::MergeFrom(const EncryptedStatPerSplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  encrypted_stat_.MergeFrom(from.encrypted_stat_);
}

void EncryptedStatPerSplit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedStatPerSplit::CopyFrom(const EncryptedStatPerSplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedStatPerSplit::IsInitialized() const {
  return true;
}

void EncryptedStatPerSplit::InternalSwap(EncryptedStatPerSplit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encrypted_stat_.InternalSwap(&other->encrypted_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptedStatPerSplit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EncryptedStatistics::_Internal {
 public:
};

void EncryptedStatistics::clear_left_sample_nums_of_splits() {
  left_sample_nums_of_splits_.Clear();
}
void EncryptedStatistics::clear_right_sample_nums_of_splits() {
  right_sample_nums_of_splits_.Clear();
}
EncryptedStatistics::EncryptedStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  left_sample_nums_of_splits_(arena),
  right_sample_nums_of_splits_(arena),
  encrypted_stats_of_splits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
}
EncryptedStatistics::EncryptedStatistics(const EncryptedStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      left_sample_nums_of_splits_(from.left_sample_nums_of_splits_),
      right_sample_nums_of_splits_(from.right_sample_nums_of_splits_),
      encrypted_stats_of_splits_(from.encrypted_stats_of_splits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&classes_num_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(classes_num_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
}

void EncryptedStatistics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EncryptedStatistics_tree_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&classes_num_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(classes_num_));
}

EncryptedStatistics::~EncryptedStatistics() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EncryptedStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EncryptedStatistics::ArenaDtor(void* object) {
  EncryptedStatistics* _this = reinterpret_cast< EncryptedStatistics* >(object);
  (void)_this;
}
void EncryptedStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncryptedStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptedStatistics& EncryptedStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncryptedStatistics_tree_2eproto.base);
  return *internal_default_instance();
}


void EncryptedStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_sample_nums_of_splits_.Clear();
  right_sample_nums_of_splits_.Clear();
  encrypted_stats_of_splits_.Clear();
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classes_num_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(classes_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptedStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          node_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 local_split_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_split_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 classes_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          classes_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_sample_nums_of_splits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_sample_nums_of_splits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_sample_nums_of_splits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_sample_nums_of_splits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit encrypted_stats_of_splits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encrypted_stats_of_splits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncryptedStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // int32 node_index = 2;
  if (this->node_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_node_index(), target);
  }

  // int32 local_split_num = 3;
  if (this->local_split_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_local_split_num(), target);
  }

  // int32 classes_num = 4;
  if (this->classes_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_classes_num(), target);
  }

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_sample_nums_of_splits = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_sample_nums_of_splits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_left_sample_nums_of_splits(i), target, stream);
  }

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_sample_nums_of_splits = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_sample_nums_of_splits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_right_sample_nums_of_splits(i), target, stream);
  }

  // repeated .com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit encrypted_stats_of_splits = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_encrypted_stats_of_splits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_encrypted_stats_of_splits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
  return target;
}

size_t EncryptedStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_sample_nums_of_splits = 5;
  total_size += 1UL * this->_internal_left_sample_nums_of_splits_size();
  for (const auto& msg : this->left_sample_nums_of_splits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_sample_nums_of_splits = 6;
  total_size += 1UL * this->_internal_right_sample_nums_of_splits_size();
  for (const auto& msg : this->right_sample_nums_of_splits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.nus.dbsytem.falcon.v0.EncryptedStatPerSplit encrypted_stats_of_splits = 7;
  total_size += 1UL * this->_internal_encrypted_stats_of_splits_size();
  for (const auto& msg : this->encrypted_stats_of_splits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_id());
  }

  // int32 node_index = 2;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_index());
  }

  // int32 local_split_num = 3;
  if (this->local_split_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_local_split_num());
  }

  // int32 classes_num = 4;
  if (this->classes_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_classes_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedStatistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const EncryptedStatistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncryptedStatistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
    MergeFrom(*source);
  }
}

void EncryptedStatistics::MergeFrom(const EncryptedStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_sample_nums_of_splits_.MergeFrom(from.left_sample_nums_of_splits_);
  right_sample_nums_of_splits_.MergeFrom(from.right_sample_nums_of_splits_);
  encrypted_stats_of_splits_.MergeFrom(from.encrypted_stats_of_splits_);
  if (from.client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from.node_index() != 0) {
    _internal_set_node_index(from._internal_node_index());
  }
  if (from.local_split_num() != 0) {
    _internal_set_local_split_num(from._internal_local_split_num());
  }
  if (from.classes_num() != 0) {
    _internal_set_classes_num(from._internal_classes_num());
  }
}

void EncryptedStatistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedStatistics::CopyFrom(const EncryptedStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.EncryptedStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedStatistics::IsInitialized() const {
  return true;
}

void EncryptedStatistics::InternalSwap(EncryptedStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  left_sample_nums_of_splits_.InternalSwap(&other->left_sample_nums_of_splits_);
  right_sample_nums_of_splits_.InternalSwap(&other->right_sample_nums_of_splits_);
  encrypted_stats_of_splits_.InternalSwap(&other->encrypted_stats_of_splits_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncryptedStatistics, classes_num_)
      + sizeof(EncryptedStatistics::classes_num_)
      - PROTOBUF_FIELD_OFFSET(EncryptedStatistics, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptedStatistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NodeUpdateInfo::_Internal {
 public:
  static const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& left_branch_impurity(const NodeUpdateInfo* msg);
  static const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& right_branch_impurity(const NodeUpdateInfo* msg);
};

const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber&
NodeUpdateInfo::_Internal::left_branch_impurity(const NodeUpdateInfo* msg) {
  return *msg->left_branch_impurity_;
}
const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber&
NodeUpdateInfo::_Internal::right_branch_impurity(const NodeUpdateInfo* msg) {
  return *msg->right_branch_impurity_;
}
void NodeUpdateInfo::clear_left_branch_impurity() {
  if (GetArena() == nullptr && left_branch_impurity_ != nullptr) {
    delete left_branch_impurity_;
  }
  left_branch_impurity_ = nullptr;
}
void NodeUpdateInfo::clear_right_branch_impurity() {
  if (GetArena() == nullptr && right_branch_impurity_ != nullptr) {
    delete right_branch_impurity_;
  }
  right_branch_impurity_ = nullptr;
}
void NodeUpdateInfo::clear_left_branch_sample_ivs() {
  left_branch_sample_ivs_.Clear();
}
void NodeUpdateInfo::clear_right_branch_sample_ivs() {
  right_branch_sample_ivs_.Clear();
}
NodeUpdateInfo::NodeUpdateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  left_branch_sample_ivs_(arena),
  right_branch_sample_ivs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
}
NodeUpdateInfo::NodeUpdateInfo(const NodeUpdateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      left_branch_sample_ivs_(from.left_branch_sample_ivs_),
      right_branch_sample_ivs_(from.right_branch_sample_ivs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left_branch_impurity()) {
    left_branch_impurity_ = new ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber(*from.left_branch_impurity_);
  } else {
    left_branch_impurity_ = nullptr;
  }
  if (from._internal_has_right_branch_impurity()) {
    right_branch_impurity_ = new ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber(*from.right_branch_impurity_);
  } else {
    right_branch_impurity_ = nullptr;
  }
  ::memcpy(&source_client_id_, &from.source_client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&best_split_id_) -
    reinterpret_cast<char*>(&source_client_id_)) + sizeof(best_split_id_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
}

void NodeUpdateInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeUpdateInfo_tree_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&left_branch_impurity_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&best_split_id_) -
      reinterpret_cast<char*>(&left_branch_impurity_)) + sizeof(best_split_id_));
}

NodeUpdateInfo::~NodeUpdateInfo() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeUpdateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete left_branch_impurity_;
  if (this != internal_default_instance()) delete right_branch_impurity_;
}

void NodeUpdateInfo::ArenaDtor(void* object) {
  NodeUpdateInfo* _this = reinterpret_cast< NodeUpdateInfo* >(object);
  (void)_this;
}
void NodeUpdateInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeUpdateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeUpdateInfo& NodeUpdateInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeUpdateInfo_tree_2eproto.base);
  return *internal_default_instance();
}


void NodeUpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_branch_sample_ivs_.Clear();
  right_branch_sample_ivs_.Clear();
  if (GetArena() == nullptr && left_branch_impurity_ != nullptr) {
    delete left_branch_impurity_;
  }
  left_branch_impurity_ = nullptr;
  if (GetArena() == nullptr && right_branch_impurity_ != nullptr) {
    delete right_branch_impurity_;
  }
  right_branch_impurity_ = nullptr;
  ::memset(&source_client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&best_split_id_) -
      reinterpret_cast<char*>(&source_client_id_)) + sizeof(best_split_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeUpdateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 source_client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          source_client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 best_client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          best_client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 best_feature_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          best_feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 best_split_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          best_split_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_branch_impurity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_branch_impurity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_branch_impurity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_branch_impurity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_branch_sample_ivs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_branch_sample_ivs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_branch_sample_ivs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_branch_sample_ivs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeUpdateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 source_client_id = 1;
  if (this->source_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_client_id(), target);
  }

  // int32 best_client_id = 2;
  if (this->best_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_best_client_id(), target);
  }

  // int32 best_feature_id = 3;
  if (this->best_feature_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_best_feature_id(), target);
  }

  // int32 best_split_id = 4;
  if (this->best_split_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_best_split_id(), target);
  }

  // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_branch_impurity = 5;
  if (this->has_left_branch_impurity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::left_branch_impurity(this), target, stream);
  }

  // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_branch_impurity = 6;
  if (this->has_right_branch_impurity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::right_branch_impurity(this), target, stream);
  }

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_branch_sample_ivs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_branch_sample_ivs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_left_branch_sample_ivs(i), target, stream);
  }

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_branch_sample_ivs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_branch_sample_ivs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_right_branch_sample_ivs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
  return target;
}

size_t NodeUpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_branch_sample_ivs = 7;
  total_size += 1UL * this->_internal_left_branch_sample_ivs_size();
  for (const auto& msg : this->left_branch_sample_ivs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_branch_sample_ivs = 8;
  total_size += 1UL * this->_internal_right_branch_sample_ivs_size();
  for (const auto& msg : this->right_branch_sample_ivs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber left_branch_impurity = 5;
  if (this->has_left_branch_impurity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_branch_impurity_);
  }

  // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber right_branch_impurity = 6;
  if (this->has_right_branch_impurity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_branch_impurity_);
  }

  // int32 source_client_id = 1;
  if (this->source_client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source_client_id());
  }

  // int32 best_client_id = 2;
  if (this->best_client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_best_client_id());
  }

  // int32 best_feature_id = 3;
  if (this->best_feature_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_best_feature_id());
  }

  // int32 best_split_id = 4;
  if (this->best_split_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_best_split_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeUpdateInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeUpdateInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeUpdateInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
    MergeFrom(*source);
  }
}

void NodeUpdateInfo::MergeFrom(const NodeUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_branch_sample_ivs_.MergeFrom(from.left_branch_sample_ivs_);
  right_branch_sample_ivs_.MergeFrom(from.right_branch_sample_ivs_);
  if (from.has_left_branch_impurity()) {
    _internal_mutable_left_branch_impurity()->::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber::MergeFrom(from._internal_left_branch_impurity());
  }
  if (from.has_right_branch_impurity()) {
    _internal_mutable_right_branch_impurity()->::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber::MergeFrom(from._internal_right_branch_impurity());
  }
  if (from.source_client_id() != 0) {
    _internal_set_source_client_id(from._internal_source_client_id());
  }
  if (from.best_client_id() != 0) {
    _internal_set_best_client_id(from._internal_best_client_id());
  }
  if (from.best_feature_id() != 0) {
    _internal_set_best_feature_id(from._internal_best_feature_id());
  }
  if (from.best_split_id() != 0) {
    _internal_set_best_split_id(from._internal_best_split_id());
  }
}

void NodeUpdateInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeUpdateInfo::CopyFrom(const NodeUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.NodeUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeUpdateInfo::IsInitialized() const {
  return true;
}

void NodeUpdateInfo::InternalSwap(NodeUpdateInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  left_branch_sample_ivs_.InternalSwap(&other->left_branch_sample_ivs_);
  right_branch_sample_ivs_.InternalSwap(&other->right_branch_sample_ivs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeUpdateInfo, best_split_id_)
      + sizeof(NodeUpdateInfo::best_split_id_)
      - PROTOBUF_FIELD_OFFSET(NodeUpdateInfo, left_branch_impurity_)>(
          reinterpret_cast<char*>(&left_branch_impurity_),
          reinterpret_cast<char*>(&other->left_branch_impurity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeUpdateInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SplitInfo::_Internal {
 public:
};

SplitInfo::SplitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  split_num_vec_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.SplitInfo)
}
SplitInfo::SplitInfo(const SplitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      split_num_vec_(from.split_num_vec_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  global_split_num_ = from.global_split_num_;
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.SplitInfo)
}

void SplitInfo::SharedCtor() {
  global_split_num_ = 0;
}

SplitInfo::~SplitInfo() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.SplitInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SplitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SplitInfo::ArenaDtor(void* object) {
  SplitInfo* _this = reinterpret_cast< SplitInfo* >(object);
  (void)_this;
}
void SplitInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SplitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitInfo& SplitInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitInfo_tree_2eproto.base);
  return *internal_default_instance();
}


void SplitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.SplitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_num_vec_.Clear();
  global_split_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 global_split_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          global_split_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 split_num_vec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_split_num_vec(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_split_num_vec(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.SplitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 global_split_num = 1;
  if (this->global_split_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_global_split_num(), target);
  }

  // repeated int32 split_num_vec = 2;
  {
    int byte_size = _split_num_vec_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_split_num_vec(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.SplitInfo)
  return target;
}

size_t SplitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.SplitInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 split_num_vec = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->split_num_vec_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _split_num_vec_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 global_split_num = 1;
  if (this->global_split_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_global_split_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.SplitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.SplitInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.SplitInfo)
    MergeFrom(*source);
  }
}

void SplitInfo::MergeFrom(const SplitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.SplitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  split_num_vec_.MergeFrom(from.split_num_vec_);
  if (from.global_split_num() != 0) {
    _internal_set_global_split_num(from._internal_global_split_num());
  }
}

void SplitInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.SplitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitInfo::CopyFrom(const SplitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.SplitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitInfo::IsInitialized() const {
  return true;
}

void SplitInfo::InternalSwap(SplitInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  split_num_vec_.InternalSwap(&other->split_num_vec_);
  swap(global_split_num_, other->global_split_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Node::_Internal {
 public:
  static const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& impurity(const Node* msg);
  static const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber& label(const Node* msg);
};

const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber&
Node::_Internal::impurity(const Node* msg) {
  return *msg->impurity_;
}
const ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber&
Node::_Internal::label(const Node* msg) {
  return *msg->label_;
}
void Node::clear_impurity() {
  if (GetArena() == nullptr && impurity_ != nullptr) {
    delete impurity_;
  }
  impurity_ = nullptr;
}
void Node::clear_label() {
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_sample_distribution_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_sample_distribution_(from.node_sample_distribution_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_impurity()) {
    impurity_ = new ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber(*from.impurity_);
  } else {
    impurity_ = nullptr;
  }
  if (from._internal_has_label()) {
    label_ = new ::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber(*from.label_);
  } else {
    label_ = nullptr;
  }
  ::memcpy(&node_type_, &from.node_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_child_) -
    reinterpret_cast<char*>(&node_type_)) + sizeof(right_child_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_tree_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&impurity_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&right_child_) -
      reinterpret_cast<char*>(&impurity_)) + sizeof(right_child_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete impurity_;
  if (this != internal_default_instance()) delete label_;
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_tree_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_sample_distribution_.Clear();
  if (GetArena() == nullptr && impurity_ != nullptr) {
    delete impurity_;
  }
  impurity_ = nullptr;
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
  ::memset(&node_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_child_) -
      reinterpret_cast<char*>(&node_type_)) + sizeof(right_child_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_self_feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_self_feature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 best_party_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          best_party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 best_feature_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          best_feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 best_split_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          best_split_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double split_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          split_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 node_sample_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          node_sample_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 node_sample_distribution = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_node_sample_distribution(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_node_sample_distribution(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber impurity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_impurity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber label = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_child = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          left_child_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 right_child = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          right_child_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_type = 1;
  if (this->node_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_type(), target);
  }

  // int32 depth = 2;
  if (this->depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_depth(), target);
  }

  // int32 is_self_feature = 3;
  if (this->is_self_feature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_is_self_feature(), target);
  }

  // int32 best_party_id = 4;
  if (this->best_party_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_best_party_id(), target);
  }

  // int32 best_feature_id = 5;
  if (this->best_feature_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_best_feature_id(), target);
  }

  // int32 best_split_id = 6;
  if (this->best_split_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_best_split_id(), target);
  }

  // double split_threshold = 7;
  if (!(this->split_threshold() <= 0 && this->split_threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_split_threshold(), target);
  }

  // int32 node_sample_num = 8;
  if (this->node_sample_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_node_sample_num(), target);
  }

  // repeated int32 node_sample_distribution = 9;
  {
    int byte_size = _node_sample_distribution_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_node_sample_distribution(), byte_size, target);
    }
  }

  // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber impurity = 10;
  if (this->has_impurity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::impurity(this), target, stream);
  }

  // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber label = 11;
  if (this->has_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::label(this), target, stream);
  }

  // int32 left_child = 12;
  if (this->left_child() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_left_child(), target);
  }

  // int32 right_child = 13;
  if (this->right_child() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_right_child(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 node_sample_distribution = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->node_sample_distribution_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _node_sample_distribution_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber impurity = 10;
  if (this->has_impurity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *impurity_);
  }

  // .com.nus.dbsytem.falcon.v0.FixedPointEncodedNumber label = 11;
  if (this->has_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_);
  }

  // int32 node_type = 1;
  if (this->node_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_type());
  }

  // int32 depth = 2;
  if (this->depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth());
  }

  // int32 is_self_feature = 3;
  if (this->is_self_feature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_self_feature());
  }

  // int32 best_party_id = 4;
  if (this->best_party_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_best_party_id());
  }

  // int32 best_feature_id = 5;
  if (this->best_feature_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_best_feature_id());
  }

  // int32 best_split_id = 6;
  if (this->best_split_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_best_split_id());
  }

  // double split_threshold = 7;
  if (!(this->split_threshold() <= 0 && this->split_threshold() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 node_sample_num = 8;
  if (this->node_sample_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_sample_num());
  }

  // int32 left_child = 12;
  if (this->left_child() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_child());
  }

  // int32 right_child = 13;
  if (this->right_child() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_right_child());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_sample_distribution_.MergeFrom(from.node_sample_distribution_);
  if (from.has_impurity()) {
    _internal_mutable_impurity()->::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber::MergeFrom(from._internal_impurity());
  }
  if (from.has_label()) {
    _internal_mutable_label()->::com::nus::dbsytem::falcon::v0::FixedPointEncodedNumber::MergeFrom(from._internal_label());
  }
  if (from.node_type() != 0) {
    _internal_set_node_type(from._internal_node_type());
  }
  if (from.depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  if (from.is_self_feature() != 0) {
    _internal_set_is_self_feature(from._internal_is_self_feature());
  }
  if (from.best_party_id() != 0) {
    _internal_set_best_party_id(from._internal_best_party_id());
  }
  if (from.best_feature_id() != 0) {
    _internal_set_best_feature_id(from._internal_best_feature_id());
  }
  if (from.best_split_id() != 0) {
    _internal_set_best_split_id(from._internal_best_split_id());
  }
  if (!(from.split_threshold() <= 0 && from.split_threshold() >= 0)) {
    _internal_set_split_threshold(from._internal_split_threshold());
  }
  if (from.node_sample_num() != 0) {
    _internal_set_node_sample_num(from._internal_node_sample_num());
  }
  if (from.left_child() != 0) {
    _internal_set_left_child(from._internal_left_child());
  }
  if (from.right_child() != 0) {
    _internal_set_right_child(from._internal_right_child());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_sample_distribution_.InternalSwap(&other->node_sample_distribution_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, right_child_)
      + sizeof(Node::right_child_)
      - PROTOBUF_FIELD_OFFSET(Node, impurity_)>(
          reinterpret_cast<char*>(&impurity_),
          reinterpret_cast<char*>(&other->impurity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TreeModel::_Internal {
 public:
};

TreeModel::TreeModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.TreeModel)
}
TreeModel::TreeModel(const TreeModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tree_type_, &from.tree_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&capacity_) -
    reinterpret_cast<char*>(&tree_type_)) + sizeof(capacity_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.TreeModel)
}

void TreeModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TreeModel_tree_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tree_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&capacity_) -
      reinterpret_cast<char*>(&tree_type_)) + sizeof(capacity_));
}

TreeModel::~TreeModel() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.TreeModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TreeModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TreeModel::ArenaDtor(void* object) {
  TreeModel* _this = reinterpret_cast< TreeModel* >(object);
  (void)_this;
}
void TreeModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TreeModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TreeModel& TreeModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TreeModel_tree_2eproto.base);
  return *internal_default_instance();
}


void TreeModel::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.TreeModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  ::memset(&tree_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacity_) -
      reinterpret_cast<char*>(&tree_type_)) + sizeof(capacity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TreeModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 tree_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tree_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 class_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          class_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.nus.dbsytem.falcon.v0.Node nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 internal_node_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          internal_node_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_node_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_node_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 capacity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TreeModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.TreeModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tree_type = 1;
  if (this->tree_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tree_type(), target);
  }

  // int32 class_num = 2;
  if (this->class_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_class_num(), target);
  }

  // int32 max_depth = 3;
  if (this->max_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_depth(), target);
  }

  // repeated .com.nus.dbsytem.falcon.v0.Node nodes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_nodes(i), target, stream);
  }

  // int32 internal_node_num = 5;
  if (this->internal_node_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_internal_node_num(), target);
  }

  // int32 total_node_num = 6;
  if (this->total_node_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_node_num(), target);
  }

  // int32 capacity = 7;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_capacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.TreeModel)
  return target;
}

size_t TreeModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.TreeModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.nus.dbsytem.falcon.v0.Node nodes = 4;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 tree_type = 1;
  if (this->tree_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tree_type());
  }

  // int32 class_num = 2;
  if (this->class_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_class_num());
  }

  // int32 max_depth = 3;
  if (this->max_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_depth());
  }

  // int32 internal_node_num = 5;
  if (this->internal_node_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_internal_node_num());
  }

  // int32 total_node_num = 6;
  if (this->total_node_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_node_num());
  }

  // int32 capacity = 7;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_capacity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.TreeModel)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TreeModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.TreeModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.TreeModel)
    MergeFrom(*source);
  }
}

void TreeModel::MergeFrom(const TreeModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.TreeModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from.tree_type() != 0) {
    _internal_set_tree_type(from._internal_tree_type());
  }
  if (from.class_num() != 0) {
    _internal_set_class_num(from._internal_class_num());
  }
  if (from.max_depth() != 0) {
    _internal_set_max_depth(from._internal_max_depth());
  }
  if (from.internal_node_num() != 0) {
    _internal_set_internal_node_num(from._internal_internal_node_num());
  }
  if (from.total_node_num() != 0) {
    _internal_set_total_node_num(from._internal_total_node_num());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
}

void TreeModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.TreeModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeModel::CopyFrom(const TreeModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.TreeModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeModel::IsInitialized() const {
  return true;
}

void TreeModel::InternalSwap(TreeModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreeModel, capacity_)
      + sizeof(TreeModel::capacity_)
      - PROTOBUF_FIELD_OFFSET(TreeModel, tree_type_)>(
          reinterpret_cast<char*>(&tree_type_),
          reinterpret_cast<char*>(&other->tree_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ForestModel::_Internal {
 public:
};

ForestModel::ForestModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trees_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.ForestModel)
}
ForestModel::ForestModel(const ForestModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trees_(from.trees_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tree_size_, &from.tree_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&tree_type_) -
    reinterpret_cast<char*>(&tree_size_)) + sizeof(tree_type_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.ForestModel)
}

void ForestModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForestModel_tree_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tree_size_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tree_type_) -
      reinterpret_cast<char*>(&tree_size_)) + sizeof(tree_type_));
}

ForestModel::~ForestModel() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.ForestModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForestModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ForestModel::ArenaDtor(void* object) {
  ForestModel* _this = reinterpret_cast< ForestModel* >(object);
  (void)_this;
}
void ForestModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForestModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForestModel& ForestModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForestModel_tree_2eproto.base);
  return *internal_default_instance();
}


void ForestModel::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.ForestModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trees_.Clear();
  ::memset(&tree_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tree_type_) -
      reinterpret_cast<char*>(&tree_size_)) + sizeof(tree_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForestModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 tree_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tree_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tree_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tree_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.nus.dbsytem.falcon.v0.TreeModel trees = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForestModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.ForestModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tree_size = 1;
  if (this->tree_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tree_size(), target);
  }

  // int32 tree_type = 2;
  if (this->tree_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tree_type(), target);
  }

  // repeated .com.nus.dbsytem.falcon.v0.TreeModel trees = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trees_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_trees(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.ForestModel)
  return target;
}

size_t ForestModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.ForestModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.nus.dbsytem.falcon.v0.TreeModel trees = 3;
  total_size += 1UL * this->_internal_trees_size();
  for (const auto& msg : this->trees_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 tree_size = 1;
  if (this->tree_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tree_size());
  }

  // int32 tree_type = 2;
  if (this->tree_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tree_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForestModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.ForestModel)
  GOOGLE_DCHECK_NE(&from, this);
  const ForestModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForestModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.ForestModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.ForestModel)
    MergeFrom(*source);
  }
}

void ForestModel::MergeFrom(const ForestModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.ForestModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trees_.MergeFrom(from.trees_);
  if (from.tree_size() != 0) {
    _internal_set_tree_size(from._internal_tree_size());
  }
  if (from.tree_type() != 0) {
    _internal_set_tree_type(from._internal_tree_type());
  }
}

void ForestModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.ForestModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForestModel::CopyFrom(const ForestModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.ForestModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForestModel::IsInitialized() const {
  return true;
}

void ForestModel::InternalSwap(ForestModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trees_.InternalSwap(&other->trees_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForestModel, tree_type_)
      + sizeof(ForestModel::tree_type_)
      - PROTOBUF_FIELD_OFFSET(ForestModel, tree_size_)>(
          reinterpret_cast<char*>(&tree_size_),
          reinterpret_cast<char*>(&other->tree_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForestModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GbdtModel::_Internal {
 public:
};

GbdtModel::GbdtModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trees_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.nus.dbsytem.falcon.v0.GbdtModel)
}
GbdtModel::GbdtModel(const GbdtModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trees_(from.trees_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tree_size_, &from.tree_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&class_num_) -
    reinterpret_cast<char*>(&tree_size_)) + sizeof(class_num_));
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.GbdtModel)
}

void GbdtModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GbdtModel_tree_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tree_size_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&class_num_) -
      reinterpret_cast<char*>(&tree_size_)) + sizeof(class_num_));
}

GbdtModel::~GbdtModel() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.GbdtModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GbdtModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GbdtModel::ArenaDtor(void* object) {
  GbdtModel* _this = reinterpret_cast< GbdtModel* >(object);
  (void)_this;
}
void GbdtModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GbdtModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GbdtModel& GbdtModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GbdtModel_tree_2eproto.base);
  return *internal_default_instance();
}


void GbdtModel::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.GbdtModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trees_.Clear();
  ::memset(&tree_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class_num_) -
      reinterpret_cast<char*>(&tree_size_)) + sizeof(class_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GbdtModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 tree_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tree_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tree_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tree_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_estimator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          n_estimator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 class_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          class_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.nus.dbsytem.falcon.v0.TreeModel trees = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GbdtModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.GbdtModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tree_size = 1;
  if (this->tree_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tree_size(), target);
  }

  // int32 tree_type = 2;
  if (this->tree_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tree_type(), target);
  }

  // int32 n_estimator = 3;
  if (this->n_estimator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_n_estimator(), target);
  }

  // int32 class_num = 4;
  if (this->class_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_class_num(), target);
  }

  // repeated .com.nus.dbsytem.falcon.v0.TreeModel trees = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trees_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_trees(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.GbdtModel)
  return target;
}

size_t GbdtModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.GbdtModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.nus.dbsytem.falcon.v0.TreeModel trees = 5;
  total_size += 1UL * this->_internal_trees_size();
  for (const auto& msg : this->trees_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 tree_size = 1;
  if (this->tree_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tree_size());
  }

  // int32 tree_type = 2;
  if (this->tree_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tree_type());
  }

  // int32 n_estimator = 3;
  if (this->n_estimator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n_estimator());
  }

  // int32 class_num = 4;
  if (this->class_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_class_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GbdtModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.GbdtModel)
  GOOGLE_DCHECK_NE(&from, this);
  const GbdtModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GbdtModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.GbdtModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.GbdtModel)
    MergeFrom(*source);
  }
}

void GbdtModel::MergeFrom(const GbdtModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.GbdtModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trees_.MergeFrom(from.trees_);
  if (from.tree_size() != 0) {
    _internal_set_tree_size(from._internal_tree_size());
  }
  if (from.tree_type() != 0) {
    _internal_set_tree_type(from._internal_tree_type());
  }
  if (from.n_estimator() != 0) {
    _internal_set_n_estimator(from._internal_n_estimator());
  }
  if (from.class_num() != 0) {
    _internal_set_class_num(from._internal_class_num());
  }
}

void GbdtModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.GbdtModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GbdtModel::CopyFrom(const GbdtModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.GbdtModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GbdtModel::IsInitialized() const {
  return true;
}

void GbdtModel::InternalSwap(GbdtModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trees_.InternalSwap(&other->trees_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GbdtModel, class_num_)
      + sizeof(GbdtModel::class_num_)
      - PROTOBUF_FIELD_OFFSET(GbdtModel, tree_size_)>(
          reinterpret_cast<char*>(&tree_size_),
          reinterpret_cast<char*>(&other->tree_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GbdtModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::EncryptedStatPerSplit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::EncryptedStatistics* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::EncryptedStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::EncryptedStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::NodeUpdateInfo* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::NodeUpdateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::NodeUpdateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::SplitInfo* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::SplitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::SplitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::Node* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::TreeModel* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::TreeModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::TreeModel >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::ForestModel* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::ForestModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::ForestModel >(arena);
}
template<> PROTOBUF_NOINLINE ::com::nus::dbsytem::falcon::v0::GbdtModel* Arena::CreateMaybeMessage< ::com::nus::dbsytem::falcon::v0::GbdtModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::nus::dbsytem::falcon::v0::GbdtModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
