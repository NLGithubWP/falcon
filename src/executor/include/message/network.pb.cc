// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {

namespace {

const ::google::protobuf::Descriptor* NetworkConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortArray_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_network_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_network_2eproto() {
  protobuf_AddDesc_network_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "network.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkConfig_descriptor_ = file->message_type(0);
  static const int NetworkConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkConfig, ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkConfig, port_arrays_),
  };
  NetworkConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkConfig_descriptor_,
      NetworkConfig::default_instance_,
      NetworkConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(NetworkConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkConfig, _is_default_instance_));
  PortArray_descriptor_ = file->message_type(1);
  static const int PortArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortArray, ports_),
  };
  PortArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PortArray_descriptor_,
      PortArray::default_instance_,
      PortArray_offsets_,
      -1,
      -1,
      -1,
      sizeof(PortArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortArray, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortArray, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_network_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkConfig_descriptor_, &NetworkConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PortArray_descriptor_, &PortArray::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_network_2eproto() {
  delete NetworkConfig::default_instance_;
  delete NetworkConfig_reflection_;
  delete PortArray::default_instance_;
  delete PortArray_reflection_;
}

void protobuf_AddDesc_network_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_network_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnetwork.proto\022\031com.nus.dbsytem.falcon."
    "v0\"W\n\rNetworkConfig\022\013\n\003ips\030\001 \003(\t\0229\n\013port"
    "_arrays\030\002 \003(\0132$.com.nus.dbsytem.falcon.v"
    "0.PortArray\"\032\n\tPortArray\022\r\n\005ports\030\001 \003(\005B"
    "\010Z\006commonb\006proto3", 177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "network.proto", &protobuf_RegisterTypes);
  NetworkConfig::default_instance_ = new NetworkConfig();
  PortArray::default_instance_ = new PortArray();
  NetworkConfig::default_instance_->InitAsDefaultInstance();
  PortArray::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_network_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_network_2eproto {
  StaticDescriptorInitializer_network_2eproto() {
    protobuf_AddDesc_network_2eproto();
  }
} static_descriptor_initializer_network_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkConfig::kIpsFieldNumber;
const int NetworkConfig::kPortArraysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkConfig::NetworkConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsytem.falcon.v0.NetworkConfig)
}

void NetworkConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NetworkConfig::NetworkConfig(const NetworkConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.NetworkConfig)
}

void NetworkConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

NetworkConfig::~NetworkConfig() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.NetworkConfig)
  SharedDtor();
}

void NetworkConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkConfig_descriptor_;
}

const NetworkConfig& NetworkConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

NetworkConfig* NetworkConfig::default_instance_ = NULL;

NetworkConfig* NetworkConfig::New(::google::protobuf::Arena* arena) const {
  NetworkConfig* n = new NetworkConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.NetworkConfig)
  ips_.Clear();
  port_arrays_.Clear();
}

bool NetworkConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsytem.falcon.v0.NetworkConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ips = 1;
      case 1: {
        if (tag == 10) {
         parse_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ips()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ips(this->ips_size() - 1).data(),
            this->ips(this->ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsytem.falcon.v0.NetworkConfig.ips"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ips;
        if (input->ExpectTag(18)) goto parse_port_arrays;
        break;
      }

      // repeated .com.nus.dbsytem.falcon.v0.PortArray port_arrays = 2;
      case 2: {
        if (tag == 18) {
         parse_port_arrays:
          DO_(input->IncrementRecursionDepth());
         parse_loop_port_arrays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_port_arrays()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_port_arrays;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsytem.falcon.v0.NetworkConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsytem.falcon.v0.NetworkConfig)
  return false;
#undef DO_
}

void NetworkConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsytem.falcon.v0.NetworkConfig)
  // repeated string ips = 1;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ips(i).data(), this->ips(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.NetworkConfig.ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ips(i), output);
  }

  // repeated .com.nus.dbsytem.falcon.v0.PortArray port_arrays = 2;
  for (unsigned int i = 0, n = this->port_arrays_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->port_arrays(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsytem.falcon.v0.NetworkConfig)
}

::google::protobuf::uint8* NetworkConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.NetworkConfig)
  // repeated string ips = 1;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ips(i).data(), this->ips(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.NetworkConfig.ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ips(i), target);
  }

  // repeated .com.nus.dbsytem.falcon.v0.PortArray port_arrays = 2;
  for (unsigned int i = 0, n = this->port_arrays_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->port_arrays(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.NetworkConfig)
  return target;
}

int NetworkConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.NetworkConfig)
  int total_size = 0;

  // repeated string ips = 1;
  total_size += 1 * this->ips_size();
  for (int i = 0; i < this->ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ips(i));
  }

  // repeated .com.nus.dbsytem.falcon.v0.PortArray port_arrays = 2;
  total_size += 1 * this->port_arrays_size();
  for (int i = 0; i < this->port_arrays_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->port_arrays(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.NetworkConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NetworkConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.NetworkConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.NetworkConfig)
    MergeFrom(*source);
  }
}

void NetworkConfig::MergeFrom(const NetworkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.NetworkConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ips_.MergeFrom(from.ips_);
  port_arrays_.MergeFrom(from.port_arrays_);
}

void NetworkConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.NetworkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkConfig::CopyFrom(const NetworkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.NetworkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConfig::IsInitialized() const {

  return true;
}

void NetworkConfig::Swap(NetworkConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkConfig::InternalSwap(NetworkConfig* other) {
  ips_.UnsafeArenaSwap(&other->ips_);
  port_arrays_.UnsafeArenaSwap(&other->port_arrays_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkConfig_descriptor_;
  metadata.reflection = NetworkConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkConfig

// repeated string ips = 1;
int NetworkConfig::ips_size() const {
  return ips_.size();
}
void NetworkConfig::clear_ips() {
  ips_.Clear();
}
 const ::std::string& NetworkConfig::ips(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  return ips_.Get(index);
}
 ::std::string* NetworkConfig::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  return ips_.Mutable(index);
}
 void NetworkConfig::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  ips_.Mutable(index)->assign(value);
}
 void NetworkConfig::set_ips(int index, const char* value) {
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
}
 void NetworkConfig::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
}
 ::std::string* NetworkConfig::add_ips() {
  // @@protoc_insertion_point(field_add_mutable:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  return ips_.Add();
}
 void NetworkConfig::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
}
 void NetworkConfig::add_ips(const char* value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
}
 void NetworkConfig::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkConfig::ips() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  return ips_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkConfig::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  return &ips_;
}

// repeated .com.nus.dbsytem.falcon.v0.PortArray port_arrays = 2;
int NetworkConfig::port_arrays_size() const {
  return port_arrays_.size();
}
void NetworkConfig::clear_port_arrays() {
  port_arrays_.Clear();
}
const ::com::nus::dbsytem::falcon::v0::PortArray& NetworkConfig::port_arrays(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NetworkConfig.port_arrays)
  return port_arrays_.Get(index);
}
::com::nus::dbsytem::falcon::v0::PortArray* NetworkConfig::mutable_port_arrays(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.NetworkConfig.port_arrays)
  return port_arrays_.Mutable(index);
}
::com::nus::dbsytem::falcon::v0::PortArray* NetworkConfig::add_port_arrays() {
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.NetworkConfig.port_arrays)
  return port_arrays_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PortArray >*
NetworkConfig::mutable_port_arrays() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.NetworkConfig.port_arrays)
  return &port_arrays_;
}
const ::google::protobuf::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PortArray >&
NetworkConfig::port_arrays() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.NetworkConfig.port_arrays)
  return port_arrays_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PortArray::kPortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PortArray::PortArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsytem.falcon.v0.PortArray)
}

void PortArray::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PortArray::PortArray(const PortArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.PortArray)
}

void PortArray::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PortArray::~PortArray() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.PortArray)
  SharedDtor();
}

void PortArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PortArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortArray_descriptor_;
}

const PortArray& PortArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_network_2eproto();
  return *default_instance_;
}

PortArray* PortArray::default_instance_ = NULL;

PortArray* PortArray::New(::google::protobuf::Arena* arena) const {
  PortArray* n = new PortArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PortArray::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.PortArray)
  ports_.Clear();
}

bool PortArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsytem.falcon.v0.PortArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ports = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ports())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_ports())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsytem.falcon.v0.PortArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsytem.falcon.v0.PortArray)
  return false;
#undef DO_
}

void PortArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsytem.falcon.v0.PortArray)
  // repeated int32 ports = 1;
  if (this->ports_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ports_cached_byte_size_);
  }
  for (int i = 0; i < this->ports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->ports(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsytem.falcon.v0.PortArray)
}

::google::protobuf::uint8* PortArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.PortArray)
  // repeated int32 ports = 1;
  if (this->ports_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ports_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ports(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.PortArray)
  return target;
}

int PortArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.PortArray)
  int total_size = 0;

  // repeated int32 ports = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ports_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ports(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ports_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.PortArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PortArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PortArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.PortArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.PortArray)
    MergeFrom(*source);
  }
}

void PortArray::MergeFrom(const PortArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.PortArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ports_.MergeFrom(from.ports_);
}

void PortArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.PortArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortArray::CopyFrom(const PortArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.PortArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortArray::IsInitialized() const {

  return true;
}

void PortArray::Swap(PortArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PortArray::InternalSwap(PortArray* other) {
  ports_.UnsafeArenaSwap(&other->ports_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PortArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortArray_descriptor_;
  metadata.reflection = PortArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PortArray

// repeated int32 ports = 1;
int PortArray::ports_size() const {
  return ports_.size();
}
void PortArray::clear_ports() {
  ports_.Clear();
}
 ::google::protobuf::int32 PortArray::ports(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.PortArray.ports)
  return ports_.Get(index);
}
 void PortArray::set_ports(int index, ::google::protobuf::int32 value) {
  ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.PortArray.ports)
}
 void PortArray::add_ports(::google::protobuf::int32 value) {
  ports_.Add(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.PortArray.ports)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PortArray::ports() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.PortArray.ports)
  return ports_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PortArray::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.PortArray.ports)
  return &ports_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)
