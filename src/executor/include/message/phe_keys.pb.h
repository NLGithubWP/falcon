// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phe_keys.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_phe_5fkeys_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_phe_5fkeys_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_phe_5fkeys_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_phe_5fkeys_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_phe_5fkeys_2eproto;
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {
class PHEKeys;
class PHEKeysDefaultTypeInternal;
extern PHEKeysDefaultTypeInternal _PHEKeys_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::nus::dbsystem::falcon::v0::PHEKeys* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::PHEKeys>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

// ===================================================================

class PHEKeys PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.PHEKeys) */ {
 public:
  inline PHEKeys() : PHEKeys(nullptr) {}
  virtual ~PHEKeys();

  PHEKeys(const PHEKeys& from);
  PHEKeys(PHEKeys&& from) noexcept
    : PHEKeys() {
    *this = ::std::move(from);
  }

  inline PHEKeys& operator=(const PHEKeys& from) {
    CopyFrom(from);
    return *this;
  }
  inline PHEKeys& operator=(PHEKeys&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PHEKeys& default_instance();

  static inline const PHEKeys* internal_default_instance() {
    return reinterpret_cast<const PHEKeys*>(
               &_PHEKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PHEKeys& a, PHEKeys& b) {
    a.Swap(&b);
  }
  inline void Swap(PHEKeys* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PHEKeys* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PHEKeys* New() const final {
    return CreateMaybeMessage<PHEKeys>(nullptr);
  }

  PHEKeys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PHEKeys>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PHEKeys& from);
  void MergeFrom(const PHEKeys& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PHEKeys* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.PHEKeys";
  }
  protected:
  explicit PHEKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phe_5fkeys_2eproto);
    return ::descriptor_table_phe_5fkeys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyNFieldNumber = 4,
    kPublicKeyGFieldNumber = 5,
    kPublicKeyDeltaFieldNumber = 6,
    kAuthServerSiFieldNumber = 8,
    kPublicKeySFieldNumber = 1,
    kPublicKeyWFieldNumber = 2,
    kPublicKeyLFieldNumber = 3,
    kAuthServerIFieldNumber = 7,
  };
  // repeated string public_key_n = 4;
  int public_key_n_size() const;
  private:
  int _internal_public_key_n_size() const;
  public:
  void clear_public_key_n();
  const std::string& public_key_n(int index) const;
  std::string* mutable_public_key_n(int index);
  void set_public_key_n(int index, const std::string& value);
  void set_public_key_n(int index, std::string&& value);
  void set_public_key_n(int index, const char* value);
  void set_public_key_n(int index, const char* value, size_t size);
  std::string* add_public_key_n();
  void add_public_key_n(const std::string& value);
  void add_public_key_n(std::string&& value);
  void add_public_key_n(const char* value);
  void add_public_key_n(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& public_key_n() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_public_key_n();
  private:
  const std::string& _internal_public_key_n(int index) const;
  std::string* _internal_add_public_key_n();
  public:

  // string public_key_g = 5;
  void clear_public_key_g();
  const std::string& public_key_g() const;
  void set_public_key_g(const std::string& value);
  void set_public_key_g(std::string&& value);
  void set_public_key_g(const char* value);
  void set_public_key_g(const char* value, size_t size);
  std::string* mutable_public_key_g();
  std::string* release_public_key_g();
  void set_allocated_public_key_g(std::string* public_key_g);
  private:
  const std::string& _internal_public_key_g() const;
  void _internal_set_public_key_g(const std::string& value);
  std::string* _internal_mutable_public_key_g();
  public:

  // string public_key_delta = 6;
  void clear_public_key_delta();
  const std::string& public_key_delta() const;
  void set_public_key_delta(const std::string& value);
  void set_public_key_delta(std::string&& value);
  void set_public_key_delta(const char* value);
  void set_public_key_delta(const char* value, size_t size);
  std::string* mutable_public_key_delta();
  std::string* release_public_key_delta();
  void set_allocated_public_key_delta(std::string* public_key_delta);
  private:
  const std::string& _internal_public_key_delta() const;
  void _internal_set_public_key_delta(const std::string& value);
  std::string* _internal_mutable_public_key_delta();
  public:

  // string auth_server_si = 8;
  void clear_auth_server_si();
  const std::string& auth_server_si() const;
  void set_auth_server_si(const std::string& value);
  void set_auth_server_si(std::string&& value);
  void set_auth_server_si(const char* value);
  void set_auth_server_si(const char* value, size_t size);
  std::string* mutable_auth_server_si();
  std::string* release_auth_server_si();
  void set_allocated_auth_server_si(std::string* auth_server_si);
  private:
  const std::string& _internal_auth_server_si() const;
  void _internal_set_auth_server_si(const std::string& value);
  std::string* _internal_mutable_auth_server_si();
  public:

  // int32 public_key_s = 1;
  void clear_public_key_s();
  ::PROTOBUF_NAMESPACE_ID::int32 public_key_s() const;
  void set_public_key_s(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_public_key_s() const;
  void _internal_set_public_key_s(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 public_key_w = 2;
  void clear_public_key_w();
  ::PROTOBUF_NAMESPACE_ID::int32 public_key_w() const;
  void set_public_key_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_public_key_w() const;
  void _internal_set_public_key_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 public_key_l = 3;
  void clear_public_key_l();
  ::PROTOBUF_NAMESPACE_ID::int32 public_key_l() const;
  void set_public_key_l(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_public_key_l() const;
  void _internal_set_public_key_l(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 auth_server_i = 7;
  void clear_auth_server_i();
  ::PROTOBUF_NAMESPACE_ID::int32 auth_server_i() const;
  void set_auth_server_i(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auth_server_i() const;
  void _internal_set_auth_server_i(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.PHEKeys)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> public_key_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_g_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_server_si_;
  ::PROTOBUF_NAMESPACE_ID::int32 public_key_s_;
  ::PROTOBUF_NAMESPACE_ID::int32 public_key_w_;
  ::PROTOBUF_NAMESPACE_ID::int32 public_key_l_;
  ::PROTOBUF_NAMESPACE_ID::int32 auth_server_i_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phe_5fkeys_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PHEKeys

// int32 public_key_s = 1;
inline void PHEKeys::clear_public_key_s() {
  public_key_s_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PHEKeys::_internal_public_key_s() const {
  return public_key_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PHEKeys::public_key_s() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_s)
  return _internal_public_key_s();
}
inline void PHEKeys::_internal_set_public_key_s(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  public_key_s_ = value;
}
inline void PHEKeys::set_public_key_s(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_public_key_s(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_s)
}

// int32 public_key_w = 2;
inline void PHEKeys::clear_public_key_w() {
  public_key_w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PHEKeys::_internal_public_key_w() const {
  return public_key_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PHEKeys::public_key_w() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_w)
  return _internal_public_key_w();
}
inline void PHEKeys::_internal_set_public_key_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  public_key_w_ = value;
}
inline void PHEKeys::set_public_key_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_public_key_w(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_w)
}

// int32 public_key_l = 3;
inline void PHEKeys::clear_public_key_l() {
  public_key_l_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PHEKeys::_internal_public_key_l() const {
  return public_key_l_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PHEKeys::public_key_l() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_l)
  return _internal_public_key_l();
}
inline void PHEKeys::_internal_set_public_key_l(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  public_key_l_ = value;
}
inline void PHEKeys::set_public_key_l(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_public_key_l(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_l)
}

// repeated string public_key_n = 4;
inline int PHEKeys::_internal_public_key_n_size() const {
  return public_key_n_.size();
}
inline int PHEKeys::public_key_n_size() const {
  return _internal_public_key_n_size();
}
inline void PHEKeys::clear_public_key_n() {
  public_key_n_.Clear();
}
inline std::string* PHEKeys::add_public_key_n() {
  // @@protoc_insertion_point(field_add_mutable:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  return _internal_add_public_key_n();
}
inline const std::string& PHEKeys::_internal_public_key_n(int index) const {
  return public_key_n_.Get(index);
}
inline const std::string& PHEKeys::public_key_n(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  return _internal_public_key_n(index);
}
inline std::string* PHEKeys::mutable_public_key_n(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  return public_key_n_.Mutable(index);
}
inline void PHEKeys::set_public_key_n(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  public_key_n_.Mutable(index)->assign(value);
}
inline void PHEKeys::set_public_key_n(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  public_key_n_.Mutable(index)->assign(std::move(value));
}
inline void PHEKeys::set_public_key_n(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_key_n_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
}
inline void PHEKeys::set_public_key_n(int index, const char* value, size_t size) {
  public_key_n_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
}
inline std::string* PHEKeys::_internal_add_public_key_n() {
  return public_key_n_.Add();
}
inline void PHEKeys::add_public_key_n(const std::string& value) {
  public_key_n_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
}
inline void PHEKeys::add_public_key_n(std::string&& value) {
  public_key_n_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
}
inline void PHEKeys::add_public_key_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_key_n_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
}
inline void PHEKeys::add_public_key_n(const char* value, size_t size) {
  public_key_n_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PHEKeys::public_key_n() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  return public_key_n_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PHEKeys::mutable_public_key_n() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_n)
  return &public_key_n_;
}

// string public_key_g = 5;
inline void PHEKeys::clear_public_key_g() {
  public_key_g_.ClearToEmpty();
}
inline const std::string& PHEKeys::public_key_g() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
  return _internal_public_key_g();
}
inline void PHEKeys::set_public_key_g(const std::string& value) {
  _internal_set_public_key_g(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
}
inline std::string* PHEKeys::mutable_public_key_g() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
  return _internal_mutable_public_key_g();
}
inline const std::string& PHEKeys::_internal_public_key_g() const {
  return public_key_g_.Get();
}
inline void PHEKeys::_internal_set_public_key_g(const std::string& value) {
  
  public_key_g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PHEKeys::set_public_key_g(std::string&& value) {
  
  public_key_g_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
}
inline void PHEKeys::set_public_key_g(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
}
inline void PHEKeys::set_public_key_g(const char* value,
    size_t size) {
  
  public_key_g_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
}
inline std::string* PHEKeys::_internal_mutable_public_key_g() {
  
  return public_key_g_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PHEKeys::release_public_key_g() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
  return public_key_g_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PHEKeys::set_allocated_public_key_g(std::string* public_key_g) {
  if (public_key_g != nullptr) {
    
  } else {
    
  }
  public_key_g_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key_g,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_g)
}

// string public_key_delta = 6;
inline void PHEKeys::clear_public_key_delta() {
  public_key_delta_.ClearToEmpty();
}
inline const std::string& PHEKeys::public_key_delta() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
  return _internal_public_key_delta();
}
inline void PHEKeys::set_public_key_delta(const std::string& value) {
  _internal_set_public_key_delta(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
}
inline std::string* PHEKeys::mutable_public_key_delta() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
  return _internal_mutable_public_key_delta();
}
inline const std::string& PHEKeys::_internal_public_key_delta() const {
  return public_key_delta_.Get();
}
inline void PHEKeys::_internal_set_public_key_delta(const std::string& value) {
  
  public_key_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PHEKeys::set_public_key_delta(std::string&& value) {
  
  public_key_delta_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
}
inline void PHEKeys::set_public_key_delta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
}
inline void PHEKeys::set_public_key_delta(const char* value,
    size_t size) {
  
  public_key_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
}
inline std::string* PHEKeys::_internal_mutable_public_key_delta() {
  
  return public_key_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PHEKeys::release_public_key_delta() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
  return public_key_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PHEKeys::set_allocated_public_key_delta(std::string* public_key_delta) {
  if (public_key_delta != nullptr) {
    
  } else {
    
  }
  public_key_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key_delta,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.PHEKeys.public_key_delta)
}

// int32 auth_server_i = 7;
inline void PHEKeys::clear_auth_server_i() {
  auth_server_i_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PHEKeys::_internal_auth_server_i() const {
  return auth_server_i_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PHEKeys::auth_server_i() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_i)
  return _internal_auth_server_i();
}
inline void PHEKeys::_internal_set_auth_server_i(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auth_server_i_ = value;
}
inline void PHEKeys::set_auth_server_i(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auth_server_i(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_i)
}

// string auth_server_si = 8;
inline void PHEKeys::clear_auth_server_si() {
  auth_server_si_.ClearToEmpty();
}
inline const std::string& PHEKeys::auth_server_si() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
  return _internal_auth_server_si();
}
inline void PHEKeys::set_auth_server_si(const std::string& value) {
  _internal_set_auth_server_si(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
}
inline std::string* PHEKeys::mutable_auth_server_si() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
  return _internal_mutable_auth_server_si();
}
inline const std::string& PHEKeys::_internal_auth_server_si() const {
  return auth_server_si_.Get();
}
inline void PHEKeys::_internal_set_auth_server_si(const std::string& value) {
  
  auth_server_si_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PHEKeys::set_auth_server_si(std::string&& value) {
  
  auth_server_si_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
}
inline void PHEKeys::set_auth_server_si(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_server_si_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
}
inline void PHEKeys::set_auth_server_si(const char* value,
    size_t size) {
  
  auth_server_si_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
}
inline std::string* PHEKeys::_internal_mutable_auth_server_si() {
  
  return auth_server_si_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PHEKeys::release_auth_server_si() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
  return auth_server_si_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PHEKeys::set_allocated_auth_server_si(std::string* auth_server_si) {
  if (auth_server_si != nullptr) {
    
  } else {
    
  }
  auth_server_si_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_server_si,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.PHEKeys.auth_server_si)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_phe_5fkeys_2eproto
