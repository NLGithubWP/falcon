// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serving.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_serving_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_serving_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_serving_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_serving_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serving_2eproto;
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {
class CreateServingRequest;
class CreateServingRequestDefaultTypeInternal;
extern CreateServingRequestDefaultTypeInternal _CreateServingRequest_default_instance_;
class CreateServingResponse;
class CreateServingResponseDefaultTypeInternal;
extern CreateServingResponseDefaultTypeInternal _CreateServingResponse_default_instance_;
class DeleteServingRequest;
class DeleteServingRequestDefaultTypeInternal;
extern DeleteServingRequestDefaultTypeInternal _DeleteServingRequest_default_instance_;
class DeleteServingResponse;
class DeleteServingResponseDefaultTypeInternal;
extern DeleteServingResponseDefaultTypeInternal _DeleteServingResponse_default_instance_;
class DisableServingRequest;
class DisableServingRequestDefaultTypeInternal;
extern DisableServingRequestDefaultTypeInternal _DisableServingRequest_default_instance_;
class DisableServingResponse;
class DisableServingResponseDefaultTypeInternal;
extern DisableServingResponseDefaultTypeInternal _DisableServingResponse_default_instance_;
class EnableServingRequest;
class EnableServingRequestDefaultTypeInternal;
extern EnableServingRequestDefaultTypeInternal _EnableServingRequest_default_instance_;
class EnableServingResponse;
class EnableServingResponseDefaultTypeInternal;
extern EnableServingResponseDefaultTypeInternal _EnableServingResponse_default_instance_;
class QueryServingRequest;
class QueryServingRequestDefaultTypeInternal;
extern QueryServingRequestDefaultTypeInternal _QueryServingRequest_default_instance_;
class QueryServingResponse;
class QueryServingResponseDefaultTypeInternal;
extern QueryServingResponseDefaultTypeInternal _QueryServingResponse_default_instance_;
class ServingInfo;
class ServingInfoDefaultTypeInternal;
extern ServingInfoDefaultTypeInternal _ServingInfo_default_instance_;
class UpdateServingRequest;
class UpdateServingRequestDefaultTypeInternal;
extern UpdateServingRequestDefaultTypeInternal _UpdateServingRequest_default_instance_;
class UpdateServingResponse;
class UpdateServingResponseDefaultTypeInternal;
extern UpdateServingResponseDefaultTypeInternal _UpdateServingResponse_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::nus::dbsystem::falcon::v0::CreateServingRequest* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::CreateServingRequest>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::CreateServingResponse* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::CreateServingResponse>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::DeleteServingRequest* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::DeleteServingRequest>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::DeleteServingResponse* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::DeleteServingResponse>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::DisableServingRequest* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::DisableServingRequest>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::DisableServingResponse* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::DisableServingResponse>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::EnableServingRequest* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::EnableServingRequest>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::EnableServingResponse* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::EnableServingResponse>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::QueryServingRequest* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::QueryServingRequest>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::QueryServingResponse* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::QueryServingResponse>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::ServingInfo* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::ServingInfo>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::UpdateServingRequest* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::UpdateServingRequest>(Arena*);
template<> ::com::nus::dbsystem::falcon::v0::UpdateServingResponse* Arena::CreateMaybeMessage<::com::nus::dbsystem::falcon::v0::UpdateServingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

enum ServingStatus : int {
  created = 0,
  online = 1,
  offline = 2,
  ServingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServingStatus_IsValid(int value);
constexpr ServingStatus ServingStatus_MIN = created;
constexpr ServingStatus ServingStatus_MAX = offline;
constexpr int ServingStatus_ARRAYSIZE = ServingStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServingStatus_descriptor();
template<typename T>
inline const std::string& ServingStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServingStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServingStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServingStatus_descriptor(), enum_t_value);
}
inline bool ServingStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServingStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServingStatus>(
    ServingStatus_descriptor(), name, value);
}
// ===================================================================

class CreateServingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.CreateServingRequest) */ {
 public:
  inline CreateServingRequest() : CreateServingRequest(nullptr) {}
  virtual ~CreateServingRequest();

  CreateServingRequest(const CreateServingRequest& from);
  CreateServingRequest(CreateServingRequest&& from) noexcept
    : CreateServingRequest() {
    *this = ::std::move(from);
  }

  inline CreateServingRequest& operator=(const CreateServingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateServingRequest& operator=(CreateServingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateServingRequest& default_instance();

  static inline const CreateServingRequest* internal_default_instance() {
    return reinterpret_cast<const CreateServingRequest*>(
               &_CreateServingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateServingRequest& a, CreateServingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateServingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateServingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateServingRequest* New() const final {
    return CreateMaybeMessage<CreateServingRequest>(nullptr);
  }

  CreateServingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateServingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateServingRequest& from);
  void MergeFrom(const CreateServingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateServingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.CreateServingRequest";
  }
  protected:
  explicit CreateServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServingNameFieldNumber = 2,
    kServingIdFieldNumber = 1,
    kModelIdFieldNumber = 3,
    kPartyIdFieldNumber = 4,
  };
  // string serving_name = 2;
  void clear_serving_name();
  const std::string& serving_name() const;
  void set_serving_name(const std::string& value);
  void set_serving_name(std::string&& value);
  void set_serving_name(const char* value);
  void set_serving_name(const char* value, size_t size);
  std::string* mutable_serving_name();
  std::string* release_serving_name();
  void set_allocated_serving_name(std::string* serving_name);
  private:
  const std::string& _internal_serving_name() const;
  void _internal_set_serving_name(const std::string& value);
  std::string* _internal_mutable_serving_name();
  public:

  // int32 serving_id = 1;
  void clear_serving_id();
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id() const;
  void set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id() const;
  void _internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 model_id = 3;
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 party_id = 4;
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::int32 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.CreateServingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serving_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class CreateServingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.CreateServingResponse) */ {
 public:
  inline CreateServingResponse() : CreateServingResponse(nullptr) {}
  virtual ~CreateServingResponse();

  CreateServingResponse(const CreateServingResponse& from);
  CreateServingResponse(CreateServingResponse&& from) noexcept
    : CreateServingResponse() {
    *this = ::std::move(from);
  }

  inline CreateServingResponse& operator=(const CreateServingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateServingResponse& operator=(CreateServingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateServingResponse& default_instance();

  static inline const CreateServingResponse* internal_default_instance() {
    return reinterpret_cast<const CreateServingResponse*>(
               &_CreateServingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateServingResponse& a, CreateServingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateServingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateServingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateServingResponse* New() const final {
    return CreateMaybeMessage<CreateServingResponse>(nullptr);
  }

  CreateServingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateServingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateServingResponse& from);
  void MergeFrom(const CreateServingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateServingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.CreateServingResponse";
  }
  protected:
  explicit CreateServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 4,
    kServingIdFieldNumber = 1,
    kIsSuccessFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // string error_msg = 4;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 serving_id = 1;
  void clear_serving_id();
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id() const;
  void set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id() const;
  void _internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_success = 2;
  void clear_is_success();
  ::PROTOBUF_NAMESPACE_ID::int32 is_success() const;
  void set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_success() const;
  void _internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 error_code = 3;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.CreateServingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_success_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class EnableServingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.EnableServingRequest) */ {
 public:
  inline EnableServingRequest() : EnableServingRequest(nullptr) {}
  virtual ~EnableServingRequest();

  EnableServingRequest(const EnableServingRequest& from);
  EnableServingRequest(EnableServingRequest&& from) noexcept
    : EnableServingRequest() {
    *this = ::std::move(from);
  }

  inline EnableServingRequest& operator=(const EnableServingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableServingRequest& operator=(EnableServingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableServingRequest& default_instance();

  static inline const EnableServingRequest* internal_default_instance() {
    return reinterpret_cast<const EnableServingRequest*>(
               &_EnableServingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnableServingRequest& a, EnableServingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableServingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableServingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableServingRequest* New() const final {
    return CreateMaybeMessage<EnableServingRequest>(nullptr);
  }

  EnableServingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableServingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableServingRequest& from);
  void MergeFrom(const EnableServingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableServingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.EnableServingRequest";
  }
  protected:
  explicit EnableServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServingIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
    kPartyIdFieldNumber = 3,
  };
  // int32 serving_id = 1;
  void clear_serving_id();
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id() const;
  void set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id() const;
  void _internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 model_id = 2;
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 party_id = 3;
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::int32 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.EnableServingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class EnableServingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.EnableServingResponse) */ {
 public:
  inline EnableServingResponse() : EnableServingResponse(nullptr) {}
  virtual ~EnableServingResponse();

  EnableServingResponse(const EnableServingResponse& from);
  EnableServingResponse(EnableServingResponse&& from) noexcept
    : EnableServingResponse() {
    *this = ::std::move(from);
  }

  inline EnableServingResponse& operator=(const EnableServingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableServingResponse& operator=(EnableServingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableServingResponse& default_instance();

  static inline const EnableServingResponse* internal_default_instance() {
    return reinterpret_cast<const EnableServingResponse*>(
               &_EnableServingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EnableServingResponse& a, EnableServingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableServingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableServingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableServingResponse* New() const final {
    return CreateMaybeMessage<EnableServingResponse>(nullptr);
  }

  EnableServingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableServingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableServingResponse& from);
  void MergeFrom(const EnableServingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableServingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.EnableServingResponse";
  }
  protected:
  explicit EnableServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 4,
    kServingIdFieldNumber = 1,
    kIsSuccessFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // string error_msg = 4;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 serving_id = 1;
  void clear_serving_id();
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id() const;
  void set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id() const;
  void _internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_success = 2;
  void clear_is_success();
  ::PROTOBUF_NAMESPACE_ID::int32 is_success() const;
  void set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_success() const;
  void _internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 error_code = 3;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.EnableServingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_success_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class UpdateServingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.UpdateServingRequest) */ {
 public:
  inline UpdateServingRequest() : UpdateServingRequest(nullptr) {}
  virtual ~UpdateServingRequest();

  UpdateServingRequest(const UpdateServingRequest& from);
  UpdateServingRequest(UpdateServingRequest&& from) noexcept
    : UpdateServingRequest() {
    *this = ::std::move(from);
  }

  inline UpdateServingRequest& operator=(const UpdateServingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateServingRequest& operator=(UpdateServingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateServingRequest& default_instance();

  static inline const UpdateServingRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateServingRequest*>(
               &_UpdateServingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateServingRequest& a, UpdateServingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateServingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateServingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateServingRequest* New() const final {
    return CreateMaybeMessage<UpdateServingRequest>(nullptr);
  }

  UpdateServingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateServingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateServingRequest& from);
  void MergeFrom(const UpdateServingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateServingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.UpdateServingRequest";
  }
  protected:
  explicit UpdateServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServingIdFieldNumber = 1,
    kNewModelIdFieldNumber = 2,
    kPartyIdFieldNumber = 3,
  };
  // int32 serving_id = 1;
  void clear_serving_id();
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id() const;
  void set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id() const;
  void _internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 new_model_id = 2;
  void clear_new_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 new_model_id() const;
  void set_new_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_model_id() const;
  void _internal_set_new_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 party_id = 3;
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::int32 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_model_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class UpdateServingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.UpdateServingResponse) */ {
 public:
  inline UpdateServingResponse() : UpdateServingResponse(nullptr) {}
  virtual ~UpdateServingResponse();

  UpdateServingResponse(const UpdateServingResponse& from);
  UpdateServingResponse(UpdateServingResponse&& from) noexcept
    : UpdateServingResponse() {
    *this = ::std::move(from);
  }

  inline UpdateServingResponse& operator=(const UpdateServingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateServingResponse& operator=(UpdateServingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateServingResponse& default_instance();

  static inline const UpdateServingResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateServingResponse*>(
               &_UpdateServingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateServingResponse& a, UpdateServingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateServingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateServingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateServingResponse* New() const final {
    return CreateMaybeMessage<UpdateServingResponse>(nullptr);
  }

  UpdateServingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateServingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateServingResponse& from);
  void MergeFrom(const UpdateServingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateServingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.UpdateServingResponse";
  }
  protected:
  explicit UpdateServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 4,
    kServingIdFieldNumber = 1,
    kIsSuccessFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // string error_msg = 4;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 serving_id = 1;
  void clear_serving_id();
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id() const;
  void set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id() const;
  void _internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_success = 2;
  void clear_is_success();
  ::PROTOBUF_NAMESPACE_ID::int32 is_success() const;
  void set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_success() const;
  void _internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 error_code = 3;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_success_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class QueryServingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.QueryServingRequest) */ {
 public:
  inline QueryServingRequest() : QueryServingRequest(nullptr) {}
  virtual ~QueryServingRequest();

  QueryServingRequest(const QueryServingRequest& from);
  QueryServingRequest(QueryServingRequest&& from) noexcept
    : QueryServingRequest() {
    *this = ::std::move(from);
  }

  inline QueryServingRequest& operator=(const QueryServingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryServingRequest& operator=(QueryServingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryServingRequest& default_instance();

  static inline const QueryServingRequest* internal_default_instance() {
    return reinterpret_cast<const QueryServingRequest*>(
               &_QueryServingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryServingRequest& a, QueryServingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryServingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryServingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryServingRequest* New() const final {
    return CreateMaybeMessage<QueryServingRequest>(nullptr);
  }

  QueryServingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryServingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryServingRequest& from);
  void MergeFrom(const QueryServingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryServingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.QueryServingRequest";
  }
  protected:
  explicit QueryServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServingIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
  };
  // repeated int32 serving_id = 1;
  int serving_id_size() const;
  private:
  int _internal_serving_id_size() const;
  public:
  void clear_serving_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_serving_id() const;
  void _internal_add_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_serving_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id(int index) const;
  void set_serving_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      serving_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_serving_id();

  // int32 party_id = 2;
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::int32 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.QueryServingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > serving_id_;
  mutable std::atomic<int> _serving_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class ServingInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.ServingInfo) */ {
 public:
  inline ServingInfo() : ServingInfo(nullptr) {}
  virtual ~ServingInfo();

  ServingInfo(const ServingInfo& from);
  ServingInfo(ServingInfo&& from) noexcept
    : ServingInfo() {
    *this = ::std::move(from);
  }

  inline ServingInfo& operator=(const ServingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServingInfo& operator=(ServingInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServingInfo& default_instance();

  static inline const ServingInfo* internal_default_instance() {
    return reinterpret_cast<const ServingInfo*>(
               &_ServingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServingInfo& a, ServingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServingInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServingInfo* New() const final {
    return CreateMaybeMessage<ServingInfo>(nullptr);
  }

  ServingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServingInfo& from);
  void MergeFrom(const ServingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.ServingInfo";
  }
  protected:
  explicit ServingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServingIdFieldNumber = 1,
    kServedModelIdFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // int32 serving_id = 1;
  void clear_serving_id();
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id() const;
  void set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id() const;
  void _internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 served_model_id = 2;
  void clear_served_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 served_model_id() const;
  void set_served_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_served_model_id() const;
  void _internal_set_served_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
  void clear_status();
  ::com::nus::dbsystem::falcon::v0::ServingStatus status() const;
  void set_status(::com::nus::dbsystem::falcon::v0::ServingStatus value);
  private:
  ::com::nus::dbsystem::falcon::v0::ServingStatus _internal_status() const;
  void _internal_set_status(::com::nus::dbsystem::falcon::v0::ServingStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.ServingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 served_model_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class QueryServingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.QueryServingResponse) */ {
 public:
  inline QueryServingResponse() : QueryServingResponse(nullptr) {}
  virtual ~QueryServingResponse();

  QueryServingResponse(const QueryServingResponse& from);
  QueryServingResponse(QueryServingResponse&& from) noexcept
    : QueryServingResponse() {
    *this = ::std::move(from);
  }

  inline QueryServingResponse& operator=(const QueryServingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryServingResponse& operator=(QueryServingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryServingResponse& default_instance();

  static inline const QueryServingResponse* internal_default_instance() {
    return reinterpret_cast<const QueryServingResponse*>(
               &_QueryServingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryServingResponse& a, QueryServingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryServingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryServingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryServingResponse* New() const final {
    return CreateMaybeMessage<QueryServingResponse>(nullptr);
  }

  QueryServingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryServingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryServingResponse& from);
  void MergeFrom(const QueryServingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryServingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.QueryServingResponse";
  }
  protected:
  explicit QueryServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServingInfosFieldNumber = 1,
  };
  // repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
  int serving_infos_size() const;
  private:
  int _internal_serving_infos_size() const;
  public:
  void clear_serving_infos();
  ::com::nus::dbsystem::falcon::v0::ServingInfo* mutable_serving_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo >*
      mutable_serving_infos();
  private:
  const ::com::nus::dbsystem::falcon::v0::ServingInfo& _internal_serving_infos(int index) const;
  ::com::nus::dbsystem::falcon::v0::ServingInfo* _internal_add_serving_infos();
  public:
  const ::com::nus::dbsystem::falcon::v0::ServingInfo& serving_infos(int index) const;
  ::com::nus::dbsystem::falcon::v0::ServingInfo* add_serving_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo >&
      serving_infos() const;

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.QueryServingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo > serving_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class DisableServingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.DisableServingRequest) */ {
 public:
  inline DisableServingRequest() : DisableServingRequest(nullptr) {}
  virtual ~DisableServingRequest();

  DisableServingRequest(const DisableServingRequest& from);
  DisableServingRequest(DisableServingRequest&& from) noexcept
    : DisableServingRequest() {
    *this = ::std::move(from);
  }

  inline DisableServingRequest& operator=(const DisableServingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableServingRequest& operator=(DisableServingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableServingRequest& default_instance();

  static inline const DisableServingRequest* internal_default_instance() {
    return reinterpret_cast<const DisableServingRequest*>(
               &_DisableServingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DisableServingRequest& a, DisableServingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableServingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableServingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableServingRequest* New() const final {
    return CreateMaybeMessage<DisableServingRequest>(nullptr);
  }

  DisableServingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableServingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableServingRequest& from);
  void MergeFrom(const DisableServingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableServingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.DisableServingRequest";
  }
  protected:
  explicit DisableServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServingIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
  };
  // int32 serving_id = 1;
  void clear_serving_id();
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id() const;
  void set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id() const;
  void _internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 party_id = 2;
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::int32 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.DisableServingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class DisableServingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.DisableServingResponse) */ {
 public:
  inline DisableServingResponse() : DisableServingResponse(nullptr) {}
  virtual ~DisableServingResponse();

  DisableServingResponse(const DisableServingResponse& from);
  DisableServingResponse(DisableServingResponse&& from) noexcept
    : DisableServingResponse() {
    *this = ::std::move(from);
  }

  inline DisableServingResponse& operator=(const DisableServingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableServingResponse& operator=(DisableServingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableServingResponse& default_instance();

  static inline const DisableServingResponse* internal_default_instance() {
    return reinterpret_cast<const DisableServingResponse*>(
               &_DisableServingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DisableServingResponse& a, DisableServingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableServingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableServingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableServingResponse* New() const final {
    return CreateMaybeMessage<DisableServingResponse>(nullptr);
  }

  DisableServingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableServingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableServingResponse& from);
  void MergeFrom(const DisableServingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableServingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.DisableServingResponse";
  }
  protected:
  explicit DisableServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 4,
    kServingIdFieldNumber = 1,
    kIsSuccessFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // string error_msg = 4;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 serving_id = 1;
  void clear_serving_id();
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id() const;
  void set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id() const;
  void _internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_success = 2;
  void clear_is_success();
  ::PROTOBUF_NAMESPACE_ID::int32 is_success() const;
  void set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_success() const;
  void _internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 error_code = 3;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.DisableServingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_success_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class DeleteServingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.DeleteServingRequest) */ {
 public:
  inline DeleteServingRequest() : DeleteServingRequest(nullptr) {}
  virtual ~DeleteServingRequest();

  DeleteServingRequest(const DeleteServingRequest& from);
  DeleteServingRequest(DeleteServingRequest&& from) noexcept
    : DeleteServingRequest() {
    *this = ::std::move(from);
  }

  inline DeleteServingRequest& operator=(const DeleteServingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteServingRequest& operator=(DeleteServingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteServingRequest& default_instance();

  static inline const DeleteServingRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteServingRequest*>(
               &_DeleteServingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteServingRequest& a, DeleteServingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteServingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteServingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteServingRequest* New() const final {
    return CreateMaybeMessage<DeleteServingRequest>(nullptr);
  }

  DeleteServingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteServingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteServingRequest& from);
  void MergeFrom(const DeleteServingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteServingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.DeleteServingRequest";
  }
  protected:
  explicit DeleteServingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServingIdFieldNumber = 1,
    kPartyIdFieldNumber = 2,
  };
  // int32 serving_id = 1;
  void clear_serving_id();
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id() const;
  void set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id() const;
  void _internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 party_id = 2;
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::int32 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 party_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// -------------------------------------------------------------------

class DeleteServingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.DeleteServingResponse) */ {
 public:
  inline DeleteServingResponse() : DeleteServingResponse(nullptr) {}
  virtual ~DeleteServingResponse();

  DeleteServingResponse(const DeleteServingResponse& from);
  DeleteServingResponse(DeleteServingResponse&& from) noexcept
    : DeleteServingResponse() {
    *this = ::std::move(from);
  }

  inline DeleteServingResponse& operator=(const DeleteServingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteServingResponse& operator=(DeleteServingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteServingResponse& default_instance();

  static inline const DeleteServingResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteServingResponse*>(
               &_DeleteServingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteServingResponse& a, DeleteServingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteServingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteServingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteServingResponse* New() const final {
    return CreateMaybeMessage<DeleteServingResponse>(nullptr);
  }

  DeleteServingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteServingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteServingResponse& from);
  void MergeFrom(const DeleteServingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteServingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsystem.falcon.v0.DeleteServingResponse";
  }
  protected:
  explicit DeleteServingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serving_2eproto);
    return ::descriptor_table_serving_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 4,
    kServingIdFieldNumber = 1,
    kIsSuccessFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // string error_msg = 4;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 serving_id = 1;
  void clear_serving_id();
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id() const;
  void set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serving_id() const;
  void _internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_success = 2;
  void clear_is_success();
  ::PROTOBUF_NAMESPACE_ID::int32 is_success() const;
  void set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_success() const;
  void _internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 error_code = 3;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 serving_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_success_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serving_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateServingRequest

// int32 serving_id = 1;
inline void CreateServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingRequest::_internal_serving_id() const {
  return serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_id)
  return _internal_serving_id();
}
inline void CreateServingRequest::_internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serving_id_ = value;
}
inline void CreateServingRequest::set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serving_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_id)
}

// string serving_name = 2;
inline void CreateServingRequest::clear_serving_name() {
  serving_name_.ClearToEmpty();
}
inline const std::string& CreateServingRequest::serving_name() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
  return _internal_serving_name();
}
inline void CreateServingRequest::set_serving_name(const std::string& value) {
  _internal_set_serving_name(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}
inline std::string* CreateServingRequest::mutable_serving_name() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
  return _internal_mutable_serving_name();
}
inline const std::string& CreateServingRequest::_internal_serving_name() const {
  return serving_name_.Get();
}
inline void CreateServingRequest::_internal_set_serving_name(const std::string& value) {
  
  serving_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateServingRequest::set_serving_name(std::string&& value) {
  
  serving_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}
inline void CreateServingRequest::set_serving_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serving_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}
inline void CreateServingRequest::set_serving_name(const char* value,
    size_t size) {
  
  serving_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}
inline std::string* CreateServingRequest::_internal_mutable_serving_name() {
  
  return serving_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateServingRequest::release_serving_name() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
  return serving_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateServingRequest::set_allocated_serving_name(std::string* serving_name) {
  if (serving_name != nullptr) {
    
  } else {
    
  }
  serving_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serving_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}

// int32 model_id = 3;
inline void CreateServingRequest::clear_model_id() {
  model_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingRequest::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingRequest::model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.model_id)
  return _internal_model_id();
}
inline void CreateServingRequest::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_id_ = value;
}
inline void CreateServingRequest::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.model_id)
}

// int32 party_id = 4;
inline void CreateServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingRequest::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.party_id)
  return _internal_party_id();
}
inline void CreateServingRequest::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  party_id_ = value;
}
inline void CreateServingRequest::set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.party_id)
}

// -------------------------------------------------------------------

// CreateServingResponse

// int32 serving_id = 1;
inline void CreateServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingResponse::_internal_serving_id() const {
  return serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingResponse.serving_id)
  return _internal_serving_id();
}
inline void CreateServingResponse::_internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serving_id_ = value;
}
inline void CreateServingResponse::set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serving_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingResponse.serving_id)
}

// int32 is_success = 2;
inline void CreateServingResponse::clear_is_success() {
  is_success_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingResponse::_internal_is_success() const {
  return is_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingResponse.is_success)
  return _internal_is_success();
}
inline void CreateServingResponse::_internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_success_ = value;
}
inline void CreateServingResponse::set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingResponse.is_success)
}

// int32 error_code = 3;
inline void CreateServingResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingResponse::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateServingResponse::error_code() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_code)
  return _internal_error_code();
}
inline void CreateServingResponse::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void CreateServingResponse::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_code)
}

// string error_msg = 4;
inline void CreateServingResponse::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& CreateServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
  return _internal_error_msg();
}
inline void CreateServingResponse::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}
inline std::string* CreateServingResponse::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& CreateServingResponse::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void CreateServingResponse::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateServingResponse::set_error_msg(std::string&& value) {
  
  error_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}
inline void CreateServingResponse::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}
inline void CreateServingResponse::set_error_msg(const char* value,
    size_t size) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}
inline std::string* CreateServingResponse::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateServingResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}

// -------------------------------------------------------------------

// EnableServingRequest

// int32 serving_id = 1;
inline void EnableServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingRequest::_internal_serving_id() const {
  return serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingRequest.serving_id)
  return _internal_serving_id();
}
inline void EnableServingRequest::_internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serving_id_ = value;
}
inline void EnableServingRequest::set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serving_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingRequest.serving_id)
}

// int32 model_id = 2;
inline void EnableServingRequest::clear_model_id() {
  model_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingRequest::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingRequest::model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingRequest.model_id)
  return _internal_model_id();
}
inline void EnableServingRequest::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_id_ = value;
}
inline void EnableServingRequest::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingRequest.model_id)
}

// int32 party_id = 3;
inline void EnableServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingRequest::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingRequest.party_id)
  return _internal_party_id();
}
inline void EnableServingRequest::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  party_id_ = value;
}
inline void EnableServingRequest::set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingRequest.party_id)
}

// -------------------------------------------------------------------

// EnableServingResponse

// int32 serving_id = 1;
inline void EnableServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingResponse::_internal_serving_id() const {
  return serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingResponse.serving_id)
  return _internal_serving_id();
}
inline void EnableServingResponse::_internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serving_id_ = value;
}
inline void EnableServingResponse::set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serving_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingResponse.serving_id)
}

// int32 is_success = 2;
inline void EnableServingResponse::clear_is_success() {
  is_success_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingResponse::_internal_is_success() const {
  return is_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingResponse.is_success)
  return _internal_is_success();
}
inline void EnableServingResponse::_internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_success_ = value;
}
inline void EnableServingResponse::set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingResponse.is_success)
}

// int32 error_code = 3;
inline void EnableServingResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingResponse::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableServingResponse::error_code() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_code)
  return _internal_error_code();
}
inline void EnableServingResponse::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void EnableServingResponse::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_code)
}

// string error_msg = 4;
inline void EnableServingResponse::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& EnableServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
  return _internal_error_msg();
}
inline void EnableServingResponse::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}
inline std::string* EnableServingResponse::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& EnableServingResponse::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void EnableServingResponse::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EnableServingResponse::set_error_msg(std::string&& value) {
  
  error_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}
inline void EnableServingResponse::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}
inline void EnableServingResponse::set_error_msg(const char* value,
    size_t size) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}
inline std::string* EnableServingResponse::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EnableServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnableServingResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}

// -------------------------------------------------------------------

// UpdateServingRequest

// int32 serving_id = 1;
inline void UpdateServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingRequest::_internal_serving_id() const {
  return serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingRequest.serving_id)
  return _internal_serving_id();
}
inline void UpdateServingRequest::_internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serving_id_ = value;
}
inline void UpdateServingRequest::set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serving_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingRequest.serving_id)
}

// int32 new_model_id = 2;
inline void UpdateServingRequest::clear_new_model_id() {
  new_model_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingRequest::_internal_new_model_id() const {
  return new_model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingRequest::new_model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingRequest.new_model_id)
  return _internal_new_model_id();
}
inline void UpdateServingRequest::_internal_set_new_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  new_model_id_ = value;
}
inline void UpdateServingRequest::set_new_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_new_model_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingRequest.new_model_id)
}

// int32 party_id = 3;
inline void UpdateServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingRequest::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingRequest.party_id)
  return _internal_party_id();
}
inline void UpdateServingRequest::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  party_id_ = value;
}
inline void UpdateServingRequest::set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingRequest.party_id)
}

// -------------------------------------------------------------------

// UpdateServingResponse

// int32 serving_id = 1;
inline void UpdateServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingResponse::_internal_serving_id() const {
  return serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingResponse.serving_id)
  return _internal_serving_id();
}
inline void UpdateServingResponse::_internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serving_id_ = value;
}
inline void UpdateServingResponse::set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serving_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingResponse.serving_id)
}

// int32 is_success = 2;
inline void UpdateServingResponse::clear_is_success() {
  is_success_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingResponse::_internal_is_success() const {
  return is_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingResponse.is_success)
  return _internal_is_success();
}
inline void UpdateServingResponse::_internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_success_ = value;
}
inline void UpdateServingResponse::set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingResponse.is_success)
}

// int32 error_code = 3;
inline void UpdateServingResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingResponse::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateServingResponse::error_code() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_code)
  return _internal_error_code();
}
inline void UpdateServingResponse::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void UpdateServingResponse::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_code)
}

// string error_msg = 4;
inline void UpdateServingResponse::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& UpdateServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
  return _internal_error_msg();
}
inline void UpdateServingResponse::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}
inline std::string* UpdateServingResponse::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& UpdateServingResponse::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void UpdateServingResponse::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateServingResponse::set_error_msg(std::string&& value) {
  
  error_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}
inline void UpdateServingResponse::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}
inline void UpdateServingResponse::set_error_msg(const char* value,
    size_t size) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}
inline std::string* UpdateServingResponse::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateServingResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}

// -------------------------------------------------------------------

// QueryServingRequest

// repeated int32 serving_id = 1;
inline int QueryServingRequest::_internal_serving_id_size() const {
  return serving_id_.size();
}
inline int QueryServingRequest::serving_id_size() const {
  return _internal_serving_id_size();
}
inline void QueryServingRequest::clear_serving_id() {
  serving_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryServingRequest::_internal_serving_id(int index) const {
  return serving_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryServingRequest::serving_id(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
  return _internal_serving_id(index);
}
inline void QueryServingRequest::set_serving_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  serving_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
}
inline void QueryServingRequest::_internal_add_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  serving_id_.Add(value);
}
inline void QueryServingRequest::add_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_serving_id(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryServingRequest::_internal_serving_id() const {
  return serving_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
  return _internal_serving_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryServingRequest::_internal_mutable_serving_id() {
  return &serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryServingRequest::mutable_serving_id() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
  return _internal_mutable_serving_id();
}

// int32 party_id = 2;
inline void QueryServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryServingRequest::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.QueryServingRequest.party_id)
  return _internal_party_id();
}
inline void QueryServingRequest::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  party_id_ = value;
}
inline void QueryServingRequest::set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.QueryServingRequest.party_id)
}

// -------------------------------------------------------------------

// ServingInfo

// int32 serving_id = 1;
inline void ServingInfo::clear_serving_id() {
  serving_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServingInfo::_internal_serving_id() const {
  return serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServingInfo::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ServingInfo.serving_id)
  return _internal_serving_id();
}
inline void ServingInfo::_internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serving_id_ = value;
}
inline void ServingInfo::set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serving_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ServingInfo.serving_id)
}

// int32 served_model_id = 2;
inline void ServingInfo::clear_served_model_id() {
  served_model_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServingInfo::_internal_served_model_id() const {
  return served_model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServingInfo::served_model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ServingInfo.served_model_id)
  return _internal_served_model_id();
}
inline void ServingInfo::_internal_set_served_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  served_model_id_ = value;
}
inline void ServingInfo::set_served_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_served_model_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ServingInfo.served_model_id)
}

// .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
inline void ServingInfo::clear_status() {
  status_ = 0;
}
inline ::com::nus::dbsystem::falcon::v0::ServingStatus ServingInfo::_internal_status() const {
  return static_cast< ::com::nus::dbsystem::falcon::v0::ServingStatus >(status_);
}
inline ::com::nus::dbsystem::falcon::v0::ServingStatus ServingInfo::status() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ServingInfo.status)
  return _internal_status();
}
inline void ServingInfo::_internal_set_status(::com::nus::dbsystem::falcon::v0::ServingStatus value) {
  
  status_ = value;
}
inline void ServingInfo::set_status(::com::nus::dbsystem::falcon::v0::ServingStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ServingInfo.status)
}

// -------------------------------------------------------------------

// QueryServingResponse

// repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
inline int QueryServingResponse::_internal_serving_infos_size() const {
  return serving_infos_.size();
}
inline int QueryServingResponse::serving_infos_size() const {
  return _internal_serving_infos_size();
}
inline void QueryServingResponse::clear_serving_infos() {
  serving_infos_.Clear();
}
inline ::com::nus::dbsystem::falcon::v0::ServingInfo* QueryServingResponse::mutable_serving_infos(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return serving_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo >*
QueryServingResponse::mutable_serving_infos() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return &serving_infos_;
}
inline const ::com::nus::dbsystem::falcon::v0::ServingInfo& QueryServingResponse::_internal_serving_infos(int index) const {
  return serving_infos_.Get(index);
}
inline const ::com::nus::dbsystem::falcon::v0::ServingInfo& QueryServingResponse::serving_infos(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return _internal_serving_infos(index);
}
inline ::com::nus::dbsystem::falcon::v0::ServingInfo* QueryServingResponse::_internal_add_serving_infos() {
  return serving_infos_.Add();
}
inline ::com::nus::dbsystem::falcon::v0::ServingInfo* QueryServingResponse::add_serving_infos() {
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return _internal_add_serving_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo >&
QueryServingResponse::serving_infos() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return serving_infos_;
}

// -------------------------------------------------------------------

// DisableServingRequest

// int32 serving_id = 1;
inline void DisableServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisableServingRequest::_internal_serving_id() const {
  return serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisableServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingRequest.serving_id)
  return _internal_serving_id();
}
inline void DisableServingRequest::_internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serving_id_ = value;
}
inline void DisableServingRequest::set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serving_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingRequest.serving_id)
}

// int32 party_id = 2;
inline void DisableServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisableServingRequest::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisableServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingRequest.party_id)
  return _internal_party_id();
}
inline void DisableServingRequest::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  party_id_ = value;
}
inline void DisableServingRequest::set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingRequest.party_id)
}

// -------------------------------------------------------------------

// DisableServingResponse

// int32 serving_id = 1;
inline void DisableServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisableServingResponse::_internal_serving_id() const {
  return serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisableServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingResponse.serving_id)
  return _internal_serving_id();
}
inline void DisableServingResponse::_internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serving_id_ = value;
}
inline void DisableServingResponse::set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serving_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingResponse.serving_id)
}

// int32 is_success = 2;
inline void DisableServingResponse::clear_is_success() {
  is_success_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisableServingResponse::_internal_is_success() const {
  return is_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisableServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingResponse.is_success)
  return _internal_is_success();
}
inline void DisableServingResponse::_internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_success_ = value;
}
inline void DisableServingResponse::set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingResponse.is_success)
}

// int32 error_code = 3;
inline void DisableServingResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisableServingResponse::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisableServingResponse::error_code() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_code)
  return _internal_error_code();
}
inline void DisableServingResponse::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void DisableServingResponse::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_code)
}

// string error_msg = 4;
inline void DisableServingResponse::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& DisableServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
  return _internal_error_msg();
}
inline void DisableServingResponse::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}
inline std::string* DisableServingResponse::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& DisableServingResponse::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void DisableServingResponse::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DisableServingResponse::set_error_msg(std::string&& value) {
  
  error_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}
inline void DisableServingResponse::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}
inline void DisableServingResponse::set_error_msg(const char* value,
    size_t size) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}
inline std::string* DisableServingResponse::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DisableServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisableServingResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}

// -------------------------------------------------------------------

// DeleteServingRequest

// int32 serving_id = 1;
inline void DeleteServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteServingRequest::_internal_serving_id() const {
  return serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingRequest.serving_id)
  return _internal_serving_id();
}
inline void DeleteServingRequest::_internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serving_id_ = value;
}
inline void DeleteServingRequest::set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serving_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingRequest.serving_id)
}

// int32 party_id = 2;
inline void DeleteServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteServingRequest::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingRequest.party_id)
  return _internal_party_id();
}
inline void DeleteServingRequest::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  party_id_ = value;
}
inline void DeleteServingRequest::set_party_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingRequest.party_id)
}

// -------------------------------------------------------------------

// DeleteServingResponse

// int32 serving_id = 1;
inline void DeleteServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteServingResponse::_internal_serving_id() const {
  return serving_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingResponse.serving_id)
  return _internal_serving_id();
}
inline void DeleteServingResponse::_internal_set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serving_id_ = value;
}
inline void DeleteServingResponse::set_serving_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serving_id(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingResponse.serving_id)
}

// int32 is_success = 2;
inline void DeleteServingResponse::clear_is_success() {
  is_success_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteServingResponse::_internal_is_success() const {
  return is_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingResponse.is_success)
  return _internal_is_success();
}
inline void DeleteServingResponse::_internal_set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_success_ = value;
}
inline void DeleteServingResponse::set_is_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingResponse.is_success)
}

// int32 error_code = 3;
inline void DeleteServingResponse::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteServingResponse::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteServingResponse::error_code() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_code)
  return _internal_error_code();
}
inline void DeleteServingResponse::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void DeleteServingResponse::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_code)
}

// string error_msg = 4;
inline void DeleteServingResponse::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& DeleteServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
  return _internal_error_msg();
}
inline void DeleteServingResponse::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}
inline std::string* DeleteServingResponse::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& DeleteServingResponse::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void DeleteServingResponse::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteServingResponse::set_error_msg(std::string&& value) {
  
  error_msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}
inline void DeleteServingResponse::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}
inline void DeleteServingResponse::set_error_msg(const char* value,
    size_t size) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}
inline std::string* DeleteServingResponse::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteServingResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::nus::dbsystem::falcon::v0::ServingStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::nus::dbsystem::falcon::v0::ServingStatus>() {
  return ::com::nus::dbsystem::falcon::v0::ServingStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_serving_2eproto
