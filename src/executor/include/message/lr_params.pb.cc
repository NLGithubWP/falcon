// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lr_params.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lr_params.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {

namespace {

const ::google::protobuf::Descriptor* LogisticRegressionParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogisticRegressionParams_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lr_5fparams_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_lr_5fparams_2eproto() {
  protobuf_AddDesc_lr_5fparams_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lr_params.proto");
  GOOGLE_CHECK(file != NULL);
  LogisticRegressionParams_descriptor_ = file->message_type(0);
  static const int LogisticRegressionParams_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, max_iteration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, converge_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, with_regularization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, learning_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, optimizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, multi_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, metric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, differential_privacy_budget_),
  };
  LogisticRegressionParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogisticRegressionParams_descriptor_,
      LogisticRegressionParams::default_instance_,
      LogisticRegressionParams_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogisticRegressionParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogisticRegressionParams, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lr_5fparams_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogisticRegressionParams_descriptor_, &LogisticRegressionParams::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lr_5fparams_2eproto() {
  delete LogisticRegressionParams::default_instance_;
  delete LogisticRegressionParams_reflection_;
}

void protobuf_AddDesc_lr_5fparams_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_lr_5fparams_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017lr_params.proto\022\031com.nus.dbsytem.falco"
    "n.v0\"\241\002\n\030LogisticRegressionParams\022\022\n\nbat"
    "ch_size\030\001 \001(\005\022\025\n\rmax_iteration\030\002 \001(\005\022\032\n\022"
    "converge_threshold\030\003 \001(\002\022\033\n\023with_regular"
    "ization\030\004 \001(\005\022\r\n\005alpha\030\005 \001(\002\022\025\n\rlearning"
    "_rate\030\006 \001(\002\022\r\n\005decay\030\007 \001(\002\022\017\n\007penalty\030\010 "
    "\001(\t\022\021\n\toptimizer\030\t \001(\t\022\023\n\013multi_class\030\n "
    "\001(\t\022\016\n\006metric\030\013 \001(\t\022#\n\033differential_priv"
    "acy_budget\030\014 \001(\002b\006proto3", 344);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lr_params.proto", &protobuf_RegisterTypes);
  LogisticRegressionParams::default_instance_ = new LogisticRegressionParams();
  LogisticRegressionParams::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lr_5fparams_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lr_5fparams_2eproto {
  StaticDescriptorInitializer_lr_5fparams_2eproto() {
    protobuf_AddDesc_lr_5fparams_2eproto();
  }
} static_descriptor_initializer_lr_5fparams_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogisticRegressionParams::kBatchSizeFieldNumber;
const int LogisticRegressionParams::kMaxIterationFieldNumber;
const int LogisticRegressionParams::kConvergeThresholdFieldNumber;
const int LogisticRegressionParams::kWithRegularizationFieldNumber;
const int LogisticRegressionParams::kAlphaFieldNumber;
const int LogisticRegressionParams::kLearningRateFieldNumber;
const int LogisticRegressionParams::kDecayFieldNumber;
const int LogisticRegressionParams::kPenaltyFieldNumber;
const int LogisticRegressionParams::kOptimizerFieldNumber;
const int LogisticRegressionParams::kMultiClassFieldNumber;
const int LogisticRegressionParams::kMetricFieldNumber;
const int LogisticRegressionParams::kDifferentialPrivacyBudgetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogisticRegressionParams::LogisticRegressionParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
}

void LogisticRegressionParams::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogisticRegressionParams::LogisticRegressionParams(const LogisticRegressionParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
}

void LogisticRegressionParams::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  batch_size_ = 0;
  max_iteration_ = 0;
  converge_threshold_ = 0;
  with_regularization_ = 0;
  alpha_ = 0;
  learning_rate_ = 0;
  decay_ = 0;
  penalty_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optimizer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multi_class_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  differential_privacy_budget_ = 0;
}

LogisticRegressionParams::~LogisticRegressionParams() {
  // @@protoc_insertion_point(destructor:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  SharedDtor();
}

void LogisticRegressionParams::SharedDtor() {
  penalty_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optimizer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multi_class_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogisticRegressionParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogisticRegressionParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogisticRegressionParams_descriptor_;
}

const LogisticRegressionParams& LogisticRegressionParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lr_5fparams_2eproto();
  return *default_instance_;
}

LogisticRegressionParams* LogisticRegressionParams::default_instance_ = NULL;

LogisticRegressionParams* LogisticRegressionParams::New(::google::protobuf::Arena* arena) const {
  LogisticRegressionParams* n = new LogisticRegressionParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogisticRegressionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LogisticRegressionParams, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LogisticRegressionParams*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(batch_size_, learning_rate_);
  decay_ = 0;
  penalty_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multi_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  differential_privacy_budget_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool LogisticRegressionParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 batch_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_iteration;
        break;
      }

      // optional int32 max_iteration = 2;
      case 2: {
        if (tag == 16) {
         parse_max_iteration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iteration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_converge_threshold;
        break;
      }

      // optional float converge_threshold = 3;
      case 3: {
        if (tag == 29) {
         parse_converge_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &converge_threshold_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_with_regularization;
        break;
      }

      // optional int32 with_regularization = 4;
      case 4: {
        if (tag == 32) {
         parse_with_regularization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &with_regularization_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_alpha;
        break;
      }

      // optional float alpha = 5;
      case 5: {
        if (tag == 45) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_learning_rate;
        break;
      }

      // optional float learning_rate = 6;
      case 6: {
        if (tag == 53) {
         parse_learning_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_decay;
        break;
      }

      // optional float decay = 7;
      case 7: {
        if (tag == 61) {
         parse_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_penalty;
        break;
      }

      // optional string penalty = 8;
      case 8: {
        if (tag == 66) {
         parse_penalty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_penalty()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->penalty().data(), this->penalty().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_optimizer;
        break;
      }

      // optional string optimizer = 9;
      case 9: {
        if (tag == 74) {
         parse_optimizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optimizer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optimizer().data(), this->optimizer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_multi_class;
        break;
      }

      // optional string multi_class = 10;
      case 10: {
        if (tag == 82) {
         parse_multi_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multi_class()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->multi_class().data(), this->multi_class().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_metric;
        break;
      }

      // optional string metric = 11;
      case 11: {
        if (tag == 90) {
         parse_metric:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metric()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metric().data(), this->metric().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_differential_privacy_budget;
        break;
      }

      // optional float differential_privacy_budget = 12;
      case 12: {
        if (tag == 101) {
         parse_differential_privacy_budget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &differential_privacy_budget_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  return false;
#undef DO_
}

void LogisticRegressionParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  // optional int32 batch_size = 1;
  if (this->batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->batch_size(), output);
  }

  // optional int32 max_iteration = 2;
  if (this->max_iteration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_iteration(), output);
  }

  // optional float converge_threshold = 3;
  if (this->converge_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->converge_threshold(), output);
  }

  // optional int32 with_regularization = 4;
  if (this->with_regularization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->with_regularization(), output);
  }

  // optional float alpha = 5;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->alpha(), output);
  }

  // optional float learning_rate = 6;
  if (this->learning_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->learning_rate(), output);
  }

  // optional float decay = 7;
  if (this->decay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->decay(), output);
  }

  // optional string penalty = 8;
  if (this->penalty().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->penalty().data(), this->penalty().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->penalty(), output);
  }

  // optional string optimizer = 9;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->optimizer(), output);
  }

  // optional string multi_class = 10;
  if (this->multi_class().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multi_class().data(), this->multi_class().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->multi_class(), output);
  }

  // optional string metric = 11;
  if (this->metric().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric().data(), this->metric().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->metric(), output);
  }

  // optional float differential_privacy_budget = 12;
  if (this->differential_privacy_budget() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->differential_privacy_budget(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
}

::google::protobuf::uint8* LogisticRegressionParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  // optional int32 batch_size = 1;
  if (this->batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->batch_size(), target);
  }

  // optional int32 max_iteration = 2;
  if (this->max_iteration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_iteration(), target);
  }

  // optional float converge_threshold = 3;
  if (this->converge_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->converge_threshold(), target);
  }

  // optional int32 with_regularization = 4;
  if (this->with_regularization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->with_regularization(), target);
  }

  // optional float alpha = 5;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->alpha(), target);
  }

  // optional float learning_rate = 6;
  if (this->learning_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->learning_rate(), target);
  }

  // optional float decay = 7;
  if (this->decay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->decay(), target);
  }

  // optional string penalty = 8;
  if (this->penalty().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->penalty().data(), this->penalty().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->penalty(), target);
  }

  // optional string optimizer = 9;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->optimizer(), target);
  }

  // optional string multi_class = 10;
  if (this->multi_class().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->multi_class().data(), this->multi_class().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->multi_class(), target);
  }

  // optional string metric = 11;
  if (this->metric().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric().data(), this->metric().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->metric(), target);
  }

  // optional float differential_privacy_budget = 12;
  if (this->differential_privacy_budget() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->differential_privacy_budget(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  return target;
}

int LogisticRegressionParams::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  int total_size = 0;

  // optional int32 batch_size = 1;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batch_size());
  }

  // optional int32 max_iteration = 2;
  if (this->max_iteration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_iteration());
  }

  // optional float converge_threshold = 3;
  if (this->converge_threshold() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 with_regularization = 4;
  if (this->with_regularization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->with_regularization());
  }

  // optional float alpha = 5;
  if (this->alpha() != 0) {
    total_size += 1 + 4;
  }

  // optional float learning_rate = 6;
  if (this->learning_rate() != 0) {
    total_size += 1 + 4;
  }

  // optional float decay = 7;
  if (this->decay() != 0) {
    total_size += 1 + 4;
  }

  // optional string penalty = 8;
  if (this->penalty().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->penalty());
  }

  // optional string optimizer = 9;
  if (this->optimizer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optimizer());
  }

  // optional string multi_class = 10;
  if (this->multi_class().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->multi_class());
  }

  // optional string metric = 11;
  if (this->metric().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metric());
  }

  // optional float differential_privacy_budget = 12;
  if (this->differential_privacy_budget() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogisticRegressionParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogisticRegressionParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogisticRegressionParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
    MergeFrom(*source);
  }
}

void LogisticRegressionParams::MergeFrom(const LogisticRegressionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
  if (from.max_iteration() != 0) {
    set_max_iteration(from.max_iteration());
  }
  if (from.converge_threshold() != 0) {
    set_converge_threshold(from.converge_threshold());
  }
  if (from.with_regularization() != 0) {
    set_with_regularization(from.with_regularization());
  }
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.learning_rate() != 0) {
    set_learning_rate(from.learning_rate());
  }
  if (from.decay() != 0) {
    set_decay(from.decay());
  }
  if (from.penalty().size() > 0) {

    penalty_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.penalty_);
  }
  if (from.optimizer().size() > 0) {

    optimizer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optimizer_);
  }
  if (from.multi_class().size() > 0) {

    multi_class_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.multi_class_);
  }
  if (from.metric().size() > 0) {

    metric_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_);
  }
  if (from.differential_privacy_budget() != 0) {
    set_differential_privacy_budget(from.differential_privacy_budget());
  }
}

void LogisticRegressionParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogisticRegressionParams::CopyFrom(const LogisticRegressionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsytem.falcon.v0.LogisticRegressionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogisticRegressionParams::IsInitialized() const {

  return true;
}

void LogisticRegressionParams::Swap(LogisticRegressionParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogisticRegressionParams::InternalSwap(LogisticRegressionParams* other) {
  std::swap(batch_size_, other->batch_size_);
  std::swap(max_iteration_, other->max_iteration_);
  std::swap(converge_threshold_, other->converge_threshold_);
  std::swap(with_regularization_, other->with_regularization_);
  std::swap(alpha_, other->alpha_);
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(decay_, other->decay_);
  penalty_.Swap(&other->penalty_);
  optimizer_.Swap(&other->optimizer_);
  multi_class_.Swap(&other->multi_class_);
  metric_.Swap(&other->metric_);
  std::swap(differential_privacy_budget_, other->differential_privacy_budget_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogisticRegressionParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogisticRegressionParams_descriptor_;
  metadata.reflection = LogisticRegressionParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogisticRegressionParams

// optional int32 batch_size = 1;
void LogisticRegressionParams::clear_batch_size() {
  batch_size_ = 0;
}
 ::google::protobuf::int32 LogisticRegressionParams::batch_size() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.batch_size)
  return batch_size_;
}
 void LogisticRegressionParams::set_batch_size(::google::protobuf::int32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.batch_size)
}

// optional int32 max_iteration = 2;
void LogisticRegressionParams::clear_max_iteration() {
  max_iteration_ = 0;
}
 ::google::protobuf::int32 LogisticRegressionParams::max_iteration() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.max_iteration)
  return max_iteration_;
}
 void LogisticRegressionParams::set_max_iteration(::google::protobuf::int32 value) {
  
  max_iteration_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.max_iteration)
}

// optional float converge_threshold = 3;
void LogisticRegressionParams::clear_converge_threshold() {
  converge_threshold_ = 0;
}
 float LogisticRegressionParams::converge_threshold() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.converge_threshold)
  return converge_threshold_;
}
 void LogisticRegressionParams::set_converge_threshold(float value) {
  
  converge_threshold_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.converge_threshold)
}

// optional int32 with_regularization = 4;
void LogisticRegressionParams::clear_with_regularization() {
  with_regularization_ = 0;
}
 ::google::protobuf::int32 LogisticRegressionParams::with_regularization() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.with_regularization)
  return with_regularization_;
}
 void LogisticRegressionParams::set_with_regularization(::google::protobuf::int32 value) {
  
  with_regularization_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.with_regularization)
}

// optional float alpha = 5;
void LogisticRegressionParams::clear_alpha() {
  alpha_ = 0;
}
 float LogisticRegressionParams::alpha() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.alpha)
  return alpha_;
}
 void LogisticRegressionParams::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.alpha)
}

// optional float learning_rate = 6;
void LogisticRegressionParams::clear_learning_rate() {
  learning_rate_ = 0;
}
 float LogisticRegressionParams::learning_rate() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.learning_rate)
  return learning_rate_;
}
 void LogisticRegressionParams::set_learning_rate(float value) {
  
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.learning_rate)
}

// optional float decay = 7;
void LogisticRegressionParams::clear_decay() {
  decay_ = 0;
}
 float LogisticRegressionParams::decay() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.decay)
  return decay_;
}
 void LogisticRegressionParams::set_decay(float value) {
  
  decay_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.decay)
}

// optional string penalty = 8;
void LogisticRegressionParams::clear_penalty() {
  penalty_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogisticRegressionParams::penalty() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
  return penalty_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogisticRegressionParams::set_penalty(const ::std::string& value) {
  
  penalty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}
 void LogisticRegressionParams::set_penalty(const char* value) {
  
  penalty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}
 void LogisticRegressionParams::set_penalty(const char* value, size_t size) {
  
  penalty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}
 ::std::string* LogisticRegressionParams::mutable_penalty() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
  return penalty_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogisticRegressionParams::release_penalty() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
  
  return penalty_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogisticRegressionParams::set_allocated_penalty(::std::string* penalty) {
  if (penalty != NULL) {
    
  } else {
    
  }
  penalty_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), penalty);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.penalty)
}

// optional string optimizer = 9;
void LogisticRegressionParams::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogisticRegressionParams::optimizer() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
  return optimizer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogisticRegressionParams::set_optimizer(const ::std::string& value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}
 void LogisticRegressionParams::set_optimizer(const char* value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}
 void LogisticRegressionParams::set_optimizer(const char* value, size_t size) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}
 ::std::string* LogisticRegressionParams::mutable_optimizer() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
  return optimizer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogisticRegressionParams::release_optimizer() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
  
  return optimizer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogisticRegressionParams::set_allocated_optimizer(::std::string* optimizer) {
  if (optimizer != NULL) {
    
  } else {
    
  }
  optimizer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.optimizer)
}

// optional string multi_class = 10;
void LogisticRegressionParams::clear_multi_class() {
  multi_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogisticRegressionParams::multi_class() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
  return multi_class_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogisticRegressionParams::set_multi_class(const ::std::string& value) {
  
  multi_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}
 void LogisticRegressionParams::set_multi_class(const char* value) {
  
  multi_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}
 void LogisticRegressionParams::set_multi_class(const char* value, size_t size) {
  
  multi_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}
 ::std::string* LogisticRegressionParams::mutable_multi_class() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
  return multi_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogisticRegressionParams::release_multi_class() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
  
  return multi_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogisticRegressionParams::set_allocated_multi_class(::std::string* multi_class) {
  if (multi_class != NULL) {
    
  } else {
    
  }
  multi_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), multi_class);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.multi_class)
}

// optional string metric = 11;
void LogisticRegressionParams::clear_metric() {
  metric_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogisticRegressionParams::metric() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
  return metric_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogisticRegressionParams::set_metric(const ::std::string& value) {
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}
 void LogisticRegressionParams::set_metric(const char* value) {
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}
 void LogisticRegressionParams::set_metric(const char* value, size_t size) {
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}
 ::std::string* LogisticRegressionParams::mutable_metric() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
  return metric_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogisticRegressionParams::release_metric() {
  // @@protoc_insertion_point(field_release:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
  
  return metric_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogisticRegressionParams::set_allocated_metric(::std::string* metric) {
  if (metric != NULL) {
    
  } else {
    
  }
  metric_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.metric)
}

// optional float differential_privacy_budget = 12;
void LogisticRegressionParams::clear_differential_privacy_budget() {
  differential_privacy_budget_ = 0;
}
 float LogisticRegressionParams::differential_privacy_budget() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.differential_privacy_budget)
  return differential_privacy_budget_;
}
 void LogisticRegressionParams::set_differential_privacy_budget(float value) {
  
  differential_privacy_budget_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.LogisticRegressionParams.differential_privacy_budget)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)
