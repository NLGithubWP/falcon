// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lr_grpc.proto

#include "lr_grpc.pb.h"
#include "lr_grpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {
namespace inference {

static const char* InferenceService_method_names[] = {
    "/com.nus.dbsytem.falcon.v0.inference.InferenceService/Prediction",
};

std::unique_ptr< InferenceService::Stub> InferenceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InferenceService::Stub> stub(new InferenceService::Stub(channel));
  return stub;
}

InferenceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
    : channel_(channel), rpcmethod_Prediction_(InferenceService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
{}

::grpc::Status InferenceService::Stub::Prediction(::grpc::ClientContext* context, const ::com::nus::dbsytem::falcon::v0::inference::PredictionRequest& request, ::com::nus::dbsytem::falcon::v0::inference::PredictionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Prediction_, context, request, response);
}

void InferenceService::Stub::experimental_async::Prediction(::grpc::ClientContext* context, const ::com::nus::dbsytem::falcon::v0::inference::PredictionRequest* request, ::com::nus::dbsytem::falcon::v0::inference::PredictionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Prediction_, context, request, response, std::move(f));
}

void InferenceService::Stub::experimental_async::Prediction(::grpc::ClientContext* context, const ::com::nus::dbsytem::falcon::v0::inference::PredictionRequest* request, ::com::nus::dbsytem::falcon::v0::inference::PredictionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Prediction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::nus::dbsytem::falcon::v0::inference::PredictionResponse>* InferenceService::Stub::PrepareAsyncPredictionRaw(::grpc::ClientContext* context, const ::com::nus::dbsytem::falcon::v0::inference::PredictionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::com::nus::dbsytem::falcon::v0::inference::PredictionResponse>::Create(channel_.get(), cq, rpcmethod_Prediction_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::com::nus::dbsytem::falcon::v0::inference::PredictionResponse>* InferenceService::Stub::AsyncPredictionRaw(::grpc::ClientContext* context, const ::com::nus::dbsytem::falcon::v0::inference::PredictionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
      this->PrepareAsyncPredictionRaw(context, request, cq);
  result->StartCall();
  return result;
}

InferenceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InferenceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InferenceService::Service, ::com::nus::dbsytem::falcon::v0::inference::PredictionRequest, ::com::nus::dbsytem::falcon::v0::inference::PredictionResponse>(
          [](InferenceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::nus::dbsytem::falcon::v0::inference::PredictionRequest* req,
             ::com::nus::dbsytem::falcon::v0::inference::PredictionResponse* resp) {
            return service->Prediction(ctx, req, resp);
          }, this)));
}

InferenceService::Service::~Service() {
}

::grpc::Status InferenceService::Service::Prediction(::grpc::ServerContext* context, const ::com::nus::dbsytem::falcon::v0::inference::PredictionRequest* request, ::com::nus::dbsytem::falcon::v0::inference::PredictionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace com
}  // namespace nus
}  // namespace dbsytem
}  // namespace falcon
}  // namespace v0
}  // namespace inference

