// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto;
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {
class NetworkConfig;
class NetworkConfigDefaultTypeInternal;
extern NetworkConfigDefaultTypeInternal _NetworkConfig_default_instance_;
class PortArray;
class PortArrayDefaultTypeInternal;
extern PortArrayDefaultTypeInternal _PortArray_default_instance_;
}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::nus::dbsytem::falcon::v0::NetworkConfig* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::NetworkConfig>(Arena*);
template<> ::com::nus::dbsytem::falcon::v0::PortArray* Arena::CreateMaybeMessage<::com::nus::dbsytem::falcon::v0::PortArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace nus {
namespace dbsytem {
namespace falcon {
namespace v0 {

// ===================================================================

class NetworkConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.NetworkConfig) */ {
 public:
  inline NetworkConfig() : NetworkConfig(nullptr) {}
  virtual ~NetworkConfig();

  NetworkConfig(const NetworkConfig& from);
  NetworkConfig(NetworkConfig&& from) noexcept
    : NetworkConfig() {
    *this = ::std::move(from);
  }

  inline NetworkConfig& operator=(const NetworkConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkConfig& operator=(NetworkConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkConfig& default_instance();

  static inline const NetworkConfig* internal_default_instance() {
    return reinterpret_cast<const NetworkConfig*>(
               &_NetworkConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkConfig& a, NetworkConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkConfig* New() const final {
    return CreateMaybeMessage<NetworkConfig>(nullptr);
  }

  NetworkConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkConfig& from);
  void MergeFrom(const NetworkConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.NetworkConfig";
  }
  protected:
  explicit NetworkConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpsFieldNumber = 1,
    kPortArraysFieldNumber = 2,
  };
  // repeated string ips = 1;
  int ips_size() const;
  private:
  int _internal_ips_size() const;
  public:
  void clear_ips();
  const std::string& ips(int index) const;
  std::string* mutable_ips(int index);
  void set_ips(int index, const std::string& value);
  void set_ips(int index, std::string&& value);
  void set_ips(int index, const char* value);
  void set_ips(int index, const char* value, size_t size);
  std::string* add_ips();
  void add_ips(const std::string& value);
  void add_ips(std::string&& value);
  void add_ips(const char* value);
  void add_ips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ips();
  private:
  const std::string& _internal_ips(int index) const;
  std::string* _internal_add_ips();
  public:

  // repeated .com.nus.dbsytem.falcon.v0.PortArray port_arrays = 2;
  int port_arrays_size() const;
  private:
  int _internal_port_arrays_size() const;
  public:
  void clear_port_arrays();
  ::com::nus::dbsytem::falcon::v0::PortArray* mutable_port_arrays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PortArray >*
      mutable_port_arrays();
  private:
  const ::com::nus::dbsytem::falcon::v0::PortArray& _internal_port_arrays(int index) const;
  ::com::nus::dbsytem::falcon::v0::PortArray* _internal_add_port_arrays();
  public:
  const ::com::nus::dbsytem::falcon::v0::PortArray& port_arrays(int index) const;
  ::com::nus::dbsytem::falcon::v0::PortArray* add_port_arrays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PortArray >&
      port_arrays() const;

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.NetworkConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ips_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PortArray > port_arrays_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class PortArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsytem.falcon.v0.PortArray) */ {
 public:
  inline PortArray() : PortArray(nullptr) {}
  virtual ~PortArray();

  PortArray(const PortArray& from);
  PortArray(PortArray&& from) noexcept
    : PortArray() {
    *this = ::std::move(from);
  }

  inline PortArray& operator=(const PortArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortArray& operator=(PortArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortArray& default_instance();

  static inline const PortArray* internal_default_instance() {
    return reinterpret_cast<const PortArray*>(
               &_PortArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PortArray& a, PortArray& b) {
    a.Swap(&b);
  }
  inline void Swap(PortArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortArray* New() const final {
    return CreateMaybeMessage<PortArray>(nullptr);
  }

  PortArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortArray& from);
  void MergeFrom(const PortArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.nus.dbsytem.falcon.v0.PortArray";
  }
  protected:
  explicit PortArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortsFieldNumber = 1,
  };
  // repeated int32 ports = 1;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ports(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ports() const;
  void _internal_add_ports(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ports();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ports(int index) const;
  void set_ports(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ports(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ports();

  // @@protoc_insertion_point(class_scope:com.nus.dbsytem.falcon.v0.PortArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ports_;
  mutable std::atomic<int> _ports_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkConfig

// repeated string ips = 1;
inline int NetworkConfig::_internal_ips_size() const {
  return ips_.size();
}
inline int NetworkConfig::ips_size() const {
  return _internal_ips_size();
}
inline void NetworkConfig::clear_ips() {
  ips_.Clear();
}
inline std::string* NetworkConfig::add_ips() {
  // @@protoc_insertion_point(field_add_mutable:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  return _internal_add_ips();
}
inline const std::string& NetworkConfig::_internal_ips(int index) const {
  return ips_.Get(index);
}
inline const std::string& NetworkConfig::ips(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  return _internal_ips(index);
}
inline std::string* NetworkConfig::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  return ips_.Mutable(index);
}
inline void NetworkConfig::set_ips(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  ips_.Mutable(index)->assign(value);
}
inline void NetworkConfig::set_ips(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  ips_.Mutable(index)->assign(std::move(value));
}
inline void NetworkConfig::set_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
}
inline void NetworkConfig::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
}
inline std::string* NetworkConfig::_internal_add_ips() {
  return ips_.Add();
}
inline void NetworkConfig::add_ips(const std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
}
inline void NetworkConfig::add_ips(std::string&& value) {
  ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
}
inline void NetworkConfig::add_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
}
inline void NetworkConfig::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetworkConfig::ips() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  return ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetworkConfig::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.NetworkConfig.ips)
  return &ips_;
}

// repeated .com.nus.dbsytem.falcon.v0.PortArray port_arrays = 2;
inline int NetworkConfig::_internal_port_arrays_size() const {
  return port_arrays_.size();
}
inline int NetworkConfig::port_arrays_size() const {
  return _internal_port_arrays_size();
}
inline void NetworkConfig::clear_port_arrays() {
  port_arrays_.Clear();
}
inline ::com::nus::dbsytem::falcon::v0::PortArray* NetworkConfig::mutable_port_arrays(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsytem.falcon.v0.NetworkConfig.port_arrays)
  return port_arrays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PortArray >*
NetworkConfig::mutable_port_arrays() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.NetworkConfig.port_arrays)
  return &port_arrays_;
}
inline const ::com::nus::dbsytem::falcon::v0::PortArray& NetworkConfig::_internal_port_arrays(int index) const {
  return port_arrays_.Get(index);
}
inline const ::com::nus::dbsytem::falcon::v0::PortArray& NetworkConfig::port_arrays(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.NetworkConfig.port_arrays)
  return _internal_port_arrays(index);
}
inline ::com::nus::dbsytem::falcon::v0::PortArray* NetworkConfig::_internal_add_port_arrays() {
  return port_arrays_.Add();
}
inline ::com::nus::dbsytem::falcon::v0::PortArray* NetworkConfig::add_port_arrays() {
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.NetworkConfig.port_arrays)
  return _internal_add_port_arrays();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::nus::dbsytem::falcon::v0::PortArray >&
NetworkConfig::port_arrays() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.NetworkConfig.port_arrays)
  return port_arrays_;
}

// -------------------------------------------------------------------

// PortArray

// repeated int32 ports = 1;
inline int PortArray::_internal_ports_size() const {
  return ports_.size();
}
inline int PortArray::ports_size() const {
  return _internal_ports_size();
}
inline void PortArray::clear_ports() {
  ports_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortArray::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PortArray::ports(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsytem.falcon.v0.PortArray.ports)
  return _internal_ports(index);
}
inline void PortArray::set_ports(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.nus.dbsytem.falcon.v0.PortArray.ports)
}
inline void PortArray::_internal_add_ports(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ports_.Add(value);
}
inline void PortArray::add_ports(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ports(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsytem.falcon.v0.PortArray.ports)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PortArray::_internal_ports() const {
  return ports_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PortArray::ports() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsytem.falcon.v0.PortArray.ports)
  return _internal_ports();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PortArray::_internal_mutable_ports() {
  return &ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PortArray::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsytem.falcon.v0.PortArray.ports)
  return _internal_mutable_ports();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsytem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_2eproto
