// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: mlp.proto

package v0

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Layer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the number of inputs for each neuron in this layer
	// in fact, it is the number of neurons (number of outputs) of the previous layer
	NumInputs int32 `protobuf:"varint,1,opt,name=num_inputs,json=numInputs,proto3" json:"num_inputs,omitempty"`
	// the number of outputs for this layer
	NumOutputs int32 `protobuf:"varint,2,opt,name=num_outputs,json=numOutputs,proto3" json:"num_outputs,omitempty"`
	// whether the neurons of this layer have bias (default true)
	FitBias bool `protobuf:"varint,3,opt,name=fit_bias,json=fitBias,proto3" json:"fit_bias,omitempty"`
	// the activation function string
	ActivationFuncStr string `protobuf:"bytes,4,opt,name=activation_func_str,json=activationFuncStr,proto3" json:"activation_func_str,omitempty"`
	// the weight matrix, encrypted values during training, dimension = (m_num_inputs, m_num_outputs)
	WeightMat *EncodedNumberMatrix `protobuf:"bytes,5,opt,name=weight_mat,json=weightMat,proto3" json:"weight_mat,omitempty"`
	// the bias vector, encrypted values during training, dimension = m_num_outputs
	BiasVec *EncodedNumberArray `protobuf:"bytes,6,opt,name=bias_vec,json=biasVec,proto3" json:"bias_vec,omitempty"`
}

func (x *Layer) Reset() {
	*x = Layer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer) ProtoMessage() {}

func (x *Layer) ProtoReflect() protoreflect.Message {
	mi := &file_mlp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer.ProtoReflect.Descriptor instead.
func (*Layer) Descriptor() ([]byte, []int) {
	return file_mlp_proto_rawDescGZIP(), []int{0}
}

func (x *Layer) GetNumInputs() int32 {
	if x != nil {
		return x.NumInputs
	}
	return 0
}

func (x *Layer) GetNumOutputs() int32 {
	if x != nil {
		return x.NumOutputs
	}
	return 0
}

func (x *Layer) GetFitBias() bool {
	if x != nil {
		return x.FitBias
	}
	return false
}

func (x *Layer) GetActivationFuncStr() string {
	if x != nil {
		return x.ActivationFuncStr
	}
	return ""
}

func (x *Layer) GetWeightMat() *EncodedNumberMatrix {
	if x != nil {
		return x.WeightMat
	}
	return nil
}

func (x *Layer) GetBiasVec() *EncodedNumberArray {
	if x != nil {
		return x.BiasVec
	}
	return nil
}

type MlpModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the number of inputs (input layer size)
	NumInputs int32 `protobuf:"varint,1,opt,name=num_inputs,json=numInputs,proto3" json:"num_inputs,omitempty"`
	// the number of outputs (output layer size)
	NumOutputs int32 `protobuf:"varint,2,opt,name=num_outputs,json=numOutputs,proto3" json:"num_outputs,omitempty"`
	// the number of hidden_layers
	NumHiddenLayers int32 `protobuf:"varint,3,opt,name=num_hidden_layers,json=numHiddenLayers,proto3" json:"num_hidden_layers,omitempty"`
	// the number of neurons in each layer
	NumLayersNeurons []int32 `protobuf:"varint,4,rep,packed,name=num_layers_neurons,json=numLayersNeurons,proto3" json:"num_layers_neurons,omitempty"`
	// the vector of layers
	Layers []*Layer `protobuf:"bytes,5,rep,name=layers,proto3" json:"layers,omitempty"`
}

func (x *MlpModel) Reset() {
	*x = MlpModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mlp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlpModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlpModel) ProtoMessage() {}

func (x *MlpModel) ProtoReflect() protoreflect.Message {
	mi := &file_mlp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlpModel.ProtoReflect.Descriptor instead.
func (*MlpModel) Descriptor() ([]byte, []int) {
	return file_mlp_proto_rawDescGZIP(), []int{1}
}

func (x *MlpModel) GetNumInputs() int32 {
	if x != nil {
		return x.NumInputs
	}
	return 0
}

func (x *MlpModel) GetNumOutputs() int32 {
	if x != nil {
		return x.NumOutputs
	}
	return 0
}

func (x *MlpModel) GetNumHiddenLayers() int32 {
	if x != nil {
		return x.NumHiddenLayers
	}
	return 0
}

func (x *MlpModel) GetNumLayersNeurons() []int32 {
	if x != nil {
		return x.NumLayersNeurons
	}
	return nil
}

func (x *MlpModel) GetLayers() []*Layer {
	if x != nil {
		return x.Layers
	}
	return nil
}

var File_mlp_proto protoreflect.FileDescriptor

var file_mlp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x6c, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x75, 0x73, 0x2e, 0x64, 0x62, 0x73, 0x79, 0x74, 0x65, 0x6d, 0x2e, 0x66, 0x61, 0x6c,
	0x63, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x66, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x12, 0x4d, 0x0a, 0x0a, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x75, 0x73, 0x2e, 0x64, 0x62, 0x73, 0x79, 0x74, 0x65, 0x6d, 0x2e,
	0x66, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x09, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x62, 0x69, 0x61, 0x73,
	0x5f, 0x76, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x75, 0x73, 0x2e, 0x64, 0x62, 0x73, 0x79, 0x74, 0x65, 0x6d, 0x2e, 0x66, 0x61, 0x6c,
	0x63, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x07, 0x62, 0x69, 0x61, 0x73, 0x56,
	0x65, 0x63, 0x22, 0xde, 0x01, 0x0a, 0x08, 0x4d, 0x6c, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6e,
	0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x4e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x75, 0x73, 0x2e, 0x64, 0x62, 0x73, 0x79, 0x74, 0x65, 0x6d, 0x2e, 0x66, 0x61, 0x6c, 0x63,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x42, 0x05, 0x5a, 0x03, 0x2f, 0x76, 0x30, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mlp_proto_rawDescOnce sync.Once
	file_mlp_proto_rawDescData = file_mlp_proto_rawDesc
)

func file_mlp_proto_rawDescGZIP() []byte {
	file_mlp_proto_rawDescOnce.Do(func() {
		file_mlp_proto_rawDescData = protoimpl.X.CompressGZIP(file_mlp_proto_rawDescData)
	})
	return file_mlp_proto_rawDescData
}

var file_mlp_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mlp_proto_goTypes = []interface{}{
	(*Layer)(nil),               // 0: com.nus.dbsytem.falcon.v0.Layer
	(*MlpModel)(nil),            // 1: com.nus.dbsytem.falcon.v0.MlpModel
	(*EncodedNumberMatrix)(nil), // 2: com.nus.dbsytem.falcon.v0.EncodedNumberMatrix
	(*EncodedNumberArray)(nil),  // 3: com.nus.dbsytem.falcon.v0.EncodedNumberArray
}
var file_mlp_proto_depIdxs = []int32{
	2, // 0: com.nus.dbsytem.falcon.v0.Layer.weight_mat:type_name -> com.nus.dbsytem.falcon.v0.EncodedNumberMatrix
	3, // 1: com.nus.dbsytem.falcon.v0.Layer.bias_vec:type_name -> com.nus.dbsytem.falcon.v0.EncodedNumberArray
	0, // 2: com.nus.dbsytem.falcon.v0.MlpModel.layers:type_name -> com.nus.dbsytem.falcon.v0.Layer
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_mlp_proto_init() }
func file_mlp_proto_init() {
	if File_mlp_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mlp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mlp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlpModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mlp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mlp_proto_goTypes,
		DependencyIndexes: file_mlp_proto_depIdxs,
		MessageInfos:      file_mlp_proto_msgTypes,
	}.Build()
	File_mlp_proto = out.File
	file_mlp_proto_rawDesc = nil
	file_mlp_proto_goTypes = nil
	file_mlp_proto_depIdxs = nil
}
