// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: alg_params.proto

package v0

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This message denotes the logistic regression parameters
type LogisticRegressionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// batch size in each iteration
	BatchSize int32 `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// maximum number of iterations for training
	MaxIteration int32 `protobuf:"varint,2,opt,name=max_iteration,json=maxIteration,proto3" json:"max_iteration,omitempty"`
	// tolerance of convergence
	ConvergeThreshold float64 `protobuf:"fixed64,3,opt,name=converge_threshold,json=convergeThreshold,proto3" json:"converge_threshold,omitempty"`
	// whether use regularization or not
	WithRegularization bool `protobuf:"varint,4,opt,name=with_regularization,json=withRegularization,proto3" json:"with_regularization,omitempty"`
	// regularization parameter
	Alpha float64 `protobuf:"fixed64,5,opt,name=alpha,proto3" json:"alpha,omitempty"`
	// learning rate for parameter updating
	LearningRate float64 `protobuf:"fixed64,6,opt,name=learning_rate,json=learningRate,proto3" json:"learning_rate,omitempty"`
	// decay rate for learning rate, following lr = lr0 / (1 + decay*t), t is #iteration
	Decay float64 `protobuf:"fixed64,7,opt,name=decay,proto3" json:"decay,omitempty"`
	// penalty method used, 'l1' or 'l2', default l2, currently support 'l2'
	Penalty string `protobuf:"bytes,8,opt,name=penalty,proto3" json:"penalty,omitempty"`
	// optimization method, default 'sgd', currently support 'sgd'
	Optimizer string `protobuf:"bytes,9,opt,name=optimizer,proto3" json:"optimizer,omitempty"`
	// strategy for handling multi-class classification, default 'ovr', currently support 'ovr'
	MultiClass string `protobuf:"bytes,10,opt,name=multi_class,json=multiClass,proto3" json:"multi_class,omitempty"`
	// evaluation metric for training and testing, 'acc', 'auc', or 'ks', currently support 'acc'
	Metric string `protobuf:"bytes,11,opt,name=metric,proto3" json:"metric,omitempty"`
	// differential privacy budget
	DifferentialPrivacyBudget float64 `protobuf:"fixed64,12,opt,name=differential_privacy_budget,json=differentialPrivacyBudget,proto3" json:"differential_privacy_budget,omitempty"`
	// whether to fit the bias the term
	FitBias bool `protobuf:"varint,13,opt,name=fit_bias,json=fitBias,proto3" json:"fit_bias,omitempty"`
}

func (x *LogisticRegressionParams) Reset() {
	*x = LogisticRegressionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alg_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogisticRegressionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticRegressionParams) ProtoMessage() {}

func (x *LogisticRegressionParams) ProtoReflect() protoreflect.Message {
	mi := &file_alg_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticRegressionParams.ProtoReflect.Descriptor instead.
func (*LogisticRegressionParams) Descriptor() ([]byte, []int) {
	return file_alg_params_proto_rawDescGZIP(), []int{0}
}

func (x *LogisticRegressionParams) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *LogisticRegressionParams) GetMaxIteration() int32 {
	if x != nil {
		return x.MaxIteration
	}
	return 0
}

func (x *LogisticRegressionParams) GetConvergeThreshold() float64 {
	if x != nil {
		return x.ConvergeThreshold
	}
	return 0
}

func (x *LogisticRegressionParams) GetWithRegularization() bool {
	if x != nil {
		return x.WithRegularization
	}
	return false
}

func (x *LogisticRegressionParams) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *LogisticRegressionParams) GetLearningRate() float64 {
	if x != nil {
		return x.LearningRate
	}
	return 0
}

func (x *LogisticRegressionParams) GetDecay() float64 {
	if x != nil {
		return x.Decay
	}
	return 0
}

func (x *LogisticRegressionParams) GetPenalty() string {
	if x != nil {
		return x.Penalty
	}
	return ""
}

func (x *LogisticRegressionParams) GetOptimizer() string {
	if x != nil {
		return x.Optimizer
	}
	return ""
}

func (x *LogisticRegressionParams) GetMultiClass() string {
	if x != nil {
		return x.MultiClass
	}
	return ""
}

func (x *LogisticRegressionParams) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *LogisticRegressionParams) GetDifferentialPrivacyBudget() float64 {
	if x != nil {
		return x.DifferentialPrivacyBudget
	}
	return 0
}

func (x *LogisticRegressionParams) GetFitBias() bool {
	if x != nil {
		return x.FitBias
	}
	return false
}

// This message denotes the linear regression parameters
type LinearRegressionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// batch size in each iteration
	BatchSize int32 `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// maximum number of iterations for training
	MaxIteration int32 `protobuf:"varint,2,opt,name=max_iteration,json=maxIteration,proto3" json:"max_iteration,omitempty"`
	// tolerance of convergence
	ConvergeThreshold float64 `protobuf:"fixed64,3,opt,name=converge_threshold,json=convergeThreshold,proto3" json:"converge_threshold,omitempty"`
	// whether use regularization or not
	WithRegularization bool `protobuf:"varint,4,opt,name=with_regularization,json=withRegularization,proto3" json:"with_regularization,omitempty"`
	// regularization parameter
	Alpha float64 `protobuf:"fixed64,5,opt,name=alpha,proto3" json:"alpha,omitempty"`
	// learning rate for parameter updating
	LearningRate float64 `protobuf:"fixed64,6,opt,name=learning_rate,json=learningRate,proto3" json:"learning_rate,omitempty"`
	// decay rate for learning rate, following lr = lr0 / (1 + decay*t), t is #iteration
	Decay float64 `protobuf:"fixed64,7,opt,name=decay,proto3" json:"decay,omitempty"`
	// penalty method used, 'l1' or 'l2', default l2, currently support 'l2'
	Penalty string `protobuf:"bytes,8,opt,name=penalty,proto3" json:"penalty,omitempty"`
	// optimization method, default 'sgd', currently support 'sgd'
	Optimizer string `protobuf:"bytes,9,opt,name=optimizer,proto3" json:"optimizer,omitempty"`
	// evaluation metric for training and testing, 'mse'
	Metric string `protobuf:"bytes,10,opt,name=metric,proto3" json:"metric,omitempty"`
	// differential privacy budget
	DifferentialPrivacyBudget float64 `protobuf:"fixed64,11,opt,name=differential_privacy_budget,json=differentialPrivacyBudget,proto3" json:"differential_privacy_budget,omitempty"`
	// whether to fit the bias the term
	FitBias bool `protobuf:"varint,12,opt,name=fit_bias,json=fitBias,proto3" json:"fit_bias,omitempty"`
}

func (x *LinearRegressionParams) Reset() {
	*x = LinearRegressionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alg_params_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearRegressionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearRegressionParams) ProtoMessage() {}

func (x *LinearRegressionParams) ProtoReflect() protoreflect.Message {
	mi := &file_alg_params_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearRegressionParams.ProtoReflect.Descriptor instead.
func (*LinearRegressionParams) Descriptor() ([]byte, []int) {
	return file_alg_params_proto_rawDescGZIP(), []int{1}
}

func (x *LinearRegressionParams) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *LinearRegressionParams) GetMaxIteration() int32 {
	if x != nil {
		return x.MaxIteration
	}
	return 0
}

func (x *LinearRegressionParams) GetConvergeThreshold() float64 {
	if x != nil {
		return x.ConvergeThreshold
	}
	return 0
}

func (x *LinearRegressionParams) GetWithRegularization() bool {
	if x != nil {
		return x.WithRegularization
	}
	return false
}

func (x *LinearRegressionParams) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *LinearRegressionParams) GetLearningRate() float64 {
	if x != nil {
		return x.LearningRate
	}
	return 0
}

func (x *LinearRegressionParams) GetDecay() float64 {
	if x != nil {
		return x.Decay
	}
	return 0
}

func (x *LinearRegressionParams) GetPenalty() string {
	if x != nil {
		return x.Penalty
	}
	return ""
}

func (x *LinearRegressionParams) GetOptimizer() string {
	if x != nil {
		return x.Optimizer
	}
	return ""
}

func (x *LinearRegressionParams) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *LinearRegressionParams) GetDifferentialPrivacyBudget() float64 {
	if x != nil {
		return x.DifferentialPrivacyBudget
	}
	return 0
}

func (x *LinearRegressionParams) GetFitBias() bool {
	if x != nil {
		return x.FitBias
	}
	return false
}

// This message denotes the decision tree builder parameters
type DecisionTreeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the tree, 'classification' or 'regression'
	TreeType string `protobuf:"bytes,1,opt,name=tree_type,json=treeType,proto3" json:"tree_type,omitempty"`
	// the function to measure the quality of a split 'gini' or 'entropy'
	Criterion string `protobuf:"bytes,2,opt,name=criterion,proto3" json:"criterion,omitempty"`
	// the strategy used to choose a split at each node, 'best' or 'random'
	SplitStrategy string `protobuf:"bytes,3,opt,name=split_strategy,json=splitStrategy,proto3" json:"split_strategy,omitempty"`
	// the number of classes in the dataset, if regression, set to 1
	ClassNum int32 `protobuf:"varint,4,opt,name=class_num,json=classNum,proto3" json:"class_num,omitempty"`
	// the maximum depth of the tree
	MaxDepth int32 `protobuf:"varint,5,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	// the maximum number of bins to split a feature
	MaxBins int32 `protobuf:"varint,6,opt,name=max_bins,json=maxBins,proto3" json:"max_bins,omitempty"`
	// the minimum number of samples required to split an internal node
	MinSamplesSplit int32 `protobuf:"varint,7,opt,name=min_samples_split,json=minSamplesSplit,proto3" json:"min_samples_split,omitempty"`
	// the minimum number of samples required to be at a leaf node
	MinSamplesLeaf int32 `protobuf:"varint,8,opt,name=min_samples_leaf,json=minSamplesLeaf,proto3" json:"min_samples_leaf,omitempty"`
	// the maximum number of leaf nodes
	MaxLeafNodes int32 `protobuf:"varint,9,opt,name=max_leaf_nodes,json=maxLeafNodes,proto3" json:"max_leaf_nodes,omitempty"`
	// a node will be split if this split induces a decrease of impurity >= this value
	MinImpurityDecrease float64 `protobuf:"fixed64,10,opt,name=min_impurity_decrease,json=minImpurityDecrease,proto3" json:"min_impurity_decrease,omitempty"`
	// threshold for early stopping in tree growth
	MinImpuritySplit float64 `protobuf:"fixed64,11,opt,name=min_impurity_split,json=minImpuritySplit,proto3" json:"min_impurity_split,omitempty"`
	// differential privacy (DP) budget, 0 denotes not use DP
	DpBudget float64 `protobuf:"fixed64,12,opt,name=dp_budget,json=dpBudget,proto3" json:"dp_budget,omitempty"`
}

func (x *DecisionTreeParams) Reset() {
	*x = DecisionTreeParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alg_params_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionTreeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionTreeParams) ProtoMessage() {}

func (x *DecisionTreeParams) ProtoReflect() protoreflect.Message {
	mi := &file_alg_params_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionTreeParams.ProtoReflect.Descriptor instead.
func (*DecisionTreeParams) Descriptor() ([]byte, []int) {
	return file_alg_params_proto_rawDescGZIP(), []int{2}
}

func (x *DecisionTreeParams) GetTreeType() string {
	if x != nil {
		return x.TreeType
	}
	return ""
}

func (x *DecisionTreeParams) GetCriterion() string {
	if x != nil {
		return x.Criterion
	}
	return ""
}

func (x *DecisionTreeParams) GetSplitStrategy() string {
	if x != nil {
		return x.SplitStrategy
	}
	return ""
}

func (x *DecisionTreeParams) GetClassNum() int32 {
	if x != nil {
		return x.ClassNum
	}
	return 0
}

func (x *DecisionTreeParams) GetMaxDepth() int32 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

func (x *DecisionTreeParams) GetMaxBins() int32 {
	if x != nil {
		return x.MaxBins
	}
	return 0
}

func (x *DecisionTreeParams) GetMinSamplesSplit() int32 {
	if x != nil {
		return x.MinSamplesSplit
	}
	return 0
}

func (x *DecisionTreeParams) GetMinSamplesLeaf() int32 {
	if x != nil {
		return x.MinSamplesLeaf
	}
	return 0
}

func (x *DecisionTreeParams) GetMaxLeafNodes() int32 {
	if x != nil {
		return x.MaxLeafNodes
	}
	return 0
}

func (x *DecisionTreeParams) GetMinImpurityDecrease() float64 {
	if x != nil {
		return x.MinImpurityDecrease
	}
	return 0
}

func (x *DecisionTreeParams) GetMinImpuritySplit() float64 {
	if x != nil {
		return x.MinImpuritySplit
	}
	return 0
}

func (x *DecisionTreeParams) GetDpBudget() float64 {
	if x != nil {
		return x.DpBudget
	}
	return 0
}

// This message denotes the random forest builder parameters
type RandomForestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of trees in the forest
	NEstimator int32 `protobuf:"varint,1,opt,name=n_estimator,json=nEstimator,proto3" json:"n_estimator,omitempty"`
	// sample rate for each tree in the forest
	SampleRate float64 `protobuf:"fixed64,2,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// decision tree builder params
	DtParam *DecisionTreeParams `protobuf:"bytes,3,opt,name=dt_param,json=dtParam,proto3" json:"dt_param,omitempty"`
}

func (x *RandomForestParams) Reset() {
	*x = RandomForestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alg_params_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomForestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomForestParams) ProtoMessage() {}

func (x *RandomForestParams) ProtoReflect() protoreflect.Message {
	mi := &file_alg_params_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomForestParams.ProtoReflect.Descriptor instead.
func (*RandomForestParams) Descriptor() ([]byte, []int) {
	return file_alg_params_proto_rawDescGZIP(), []int{3}
}

func (x *RandomForestParams) GetNEstimator() int32 {
	if x != nil {
		return x.NEstimator
	}
	return 0
}

func (x *RandomForestParams) GetSampleRate() float64 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *RandomForestParams) GetDtParam() *DecisionTreeParams {
	if x != nil {
		return x.DtParam
	}
	return nil
}

// This message denotes the gradient boosting decision tree builder parameters
type GbdtParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of estimators (note that the number of total trees in the model
	// does not necessarily equal to the number of estimators for classification)
	NEstimator int32 `protobuf:"varint,1,opt,name=n_estimator,json=nEstimator,proto3" json:"n_estimator,omitempty"`
	// loss function to be optimized
	Loss string `protobuf:"bytes,2,opt,name=loss,proto3" json:"loss,omitempty"`
	// learning rate shrinks the contribution of each tree
	LearningRate float64 `protobuf:"fixed64,3,opt,name=learning_rate,json=learningRate,proto3" json:"learning_rate,omitempty"`
	// the fraction of samples to be used for fitting individual base learners
	// default 1.0, reserved here for future usage
	Subsample float64 `protobuf:"fixed64,4,opt,name=subsample,proto3" json:"subsample,omitempty"`
	// decision tree builder params (note that the tree type here may be changed
	// when building the gbdt model as they are all regression trees in gbdt)
	DtParam *DecisionTreeParams `protobuf:"bytes,5,opt,name=dt_param,json=dtParam,proto3" json:"dt_param,omitempty"`
}

func (x *GbdtParams) Reset() {
	*x = GbdtParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_alg_params_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GbdtParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GbdtParams) ProtoMessage() {}

func (x *GbdtParams) ProtoReflect() protoreflect.Message {
	mi := &file_alg_params_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GbdtParams.ProtoReflect.Descriptor instead.
func (*GbdtParams) Descriptor() ([]byte, []int) {
	return file_alg_params_proto_rawDescGZIP(), []int{4}
}

func (x *GbdtParams) GetNEstimator() int32 {
	if x != nil {
		return x.NEstimator
	}
	return 0
}

func (x *GbdtParams) GetLoss() string {
	if x != nil {
		return x.Loss
	}
	return ""
}

func (x *GbdtParams) GetLearningRate() float64 {
	if x != nil {
		return x.LearningRate
	}
	return 0
}

func (x *GbdtParams) GetSubsample() float64 {
	if x != nil {
		return x.Subsample
	}
	return 0
}

func (x *GbdtParams) GetDtParam() *DecisionTreeParams {
	if x != nil {
		return x.DtParam
	}
	return nil
}

var File_alg_params_proto protoreflect.FileDescriptor

var file_alg_params_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x6c, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x75, 0x73, 0x2e, 0x64, 0x62, 0x73, 0x79,
	0x74, 0x65, 0x6d, 0x2e, 0x66, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x22, 0xdb, 0x03,
	0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2f, 0x0a,
	0x13, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x63,
	0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x63, 0x61, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x66, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x22, 0xb8, 0x03, 0x0a, 0x16,
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x61, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x63, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3e, 0x0a, 0x1b, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x19, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x69, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66,
	0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x22, 0xc6, 0x03, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x42, 0x69, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6d, 0x69, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x6c, 0x65, 0x61, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x6d, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x6d, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x70, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x70, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x22,
	0xa0, 0x01, 0x0a, 0x12, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x64, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x75, 0x73, 0x2e, 0x64, 0x62, 0x73, 0x79, 0x74, 0x65, 0x6d, 0x2e, 0x66, 0x61, 0x6c,
	0x63, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x07, 0x64, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0xce, 0x01, 0x0a, 0x0a, 0x47, 0x62, 0x64, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x64, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x75, 0x73, 0x2e, 0x64, 0x62, 0x73, 0x79, 0x74, 0x65, 0x6d, 0x2e, 0x66, 0x61,
	0x6c, 0x63, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x07, 0x64, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x42, 0x05, 0x5a, 0x03, 0x2f, 0x76, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_alg_params_proto_rawDescOnce sync.Once
	file_alg_params_proto_rawDescData = file_alg_params_proto_rawDesc
)

func file_alg_params_proto_rawDescGZIP() []byte {
	file_alg_params_proto_rawDescOnce.Do(func() {
		file_alg_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_alg_params_proto_rawDescData)
	})
	return file_alg_params_proto_rawDescData
}

var file_alg_params_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_alg_params_proto_goTypes = []interface{}{
	(*LogisticRegressionParams)(nil), // 0: com.nus.dbsytem.falcon.v0.LogisticRegressionParams
	(*LinearRegressionParams)(nil),   // 1: com.nus.dbsytem.falcon.v0.LinearRegressionParams
	(*DecisionTreeParams)(nil),       // 2: com.nus.dbsytem.falcon.v0.DecisionTreeParams
	(*RandomForestParams)(nil),       // 3: com.nus.dbsytem.falcon.v0.RandomForestParams
	(*GbdtParams)(nil),               // 4: com.nus.dbsytem.falcon.v0.GbdtParams
}
var file_alg_params_proto_depIdxs = []int32{
	2, // 0: com.nus.dbsytem.falcon.v0.RandomForestParams.dt_param:type_name -> com.nus.dbsytem.falcon.v0.DecisionTreeParams
	2, // 1: com.nus.dbsytem.falcon.v0.GbdtParams.dt_param:type_name -> com.nus.dbsytem.falcon.v0.DecisionTreeParams
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_alg_params_proto_init() }
func file_alg_params_proto_init() {
	if File_alg_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_alg_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogisticRegressionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alg_params_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearRegressionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alg_params_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecisionTreeParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alg_params_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomForestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_alg_params_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GbdtParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_alg_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_alg_params_proto_goTypes,
		DependencyIndexes: file_alg_params_proto_depIdxs,
		MessageInfos:      file_alg_params_proto_msgTypes,
	}.Build()
	File_alg_params_proto = out.File
	file_alg_params_proto_rawDesc = nil
	file_alg_params_proto_goTypes = nil
	file_alg_params_proto_depIdxs = nil
}
