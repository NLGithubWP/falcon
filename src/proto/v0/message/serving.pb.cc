// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serving.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serving.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

namespace {

const ::google::protobuf::Descriptor* CreateServingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateServingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateServingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateServingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnableServingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnableServingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnableServingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnableServingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateServingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateServingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateServingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateServingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryServingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryServingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryServingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryServingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisableServingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisableServingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisableServingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisableServingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteServingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteServingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteServingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteServingResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServingStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_serving_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_serving_2eproto() {
  protobuf_AddDesc_serving_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serving.proto");
  GOOGLE_CHECK(file != NULL);
  CreateServingRequest_descriptor_ = file->message_type(0);
  static const int CreateServingRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServingRequest, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServingRequest, serving_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServingRequest, model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServingRequest, party_id_),
  };
  CreateServingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateServingRequest_descriptor_,
      CreateServingRequest::default_instance_,
      CreateServingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateServingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServingRequest, _is_default_instance_));
  CreateServingResponse_descriptor_ = file->message_type(1);
  static const int CreateServingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServingResponse, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServingResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServingResponse, error_msg_),
  };
  CreateServingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateServingResponse_descriptor_,
      CreateServingResponse::default_instance_,
      CreateServingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateServingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateServingResponse, _is_default_instance_));
  EnableServingRequest_descriptor_ = file->message_type(2);
  static const int EnableServingRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServingRequest, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServingRequest, model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServingRequest, party_id_),
  };
  EnableServingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnableServingRequest_descriptor_,
      EnableServingRequest::default_instance_,
      EnableServingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnableServingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServingRequest, _is_default_instance_));
  EnableServingResponse_descriptor_ = file->message_type(3);
  static const int EnableServingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServingResponse, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServingResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServingResponse, error_msg_),
  };
  EnableServingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnableServingResponse_descriptor_,
      EnableServingResponse::default_instance_,
      EnableServingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(EnableServingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableServingResponse, _is_default_instance_));
  UpdateServingRequest_descriptor_ = file->message_type(4);
  static const int UpdateServingRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServingRequest, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServingRequest, new_model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServingRequest, party_id_),
  };
  UpdateServingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateServingRequest_descriptor_,
      UpdateServingRequest::default_instance_,
      UpdateServingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateServingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServingRequest, _is_default_instance_));
  UpdateServingResponse_descriptor_ = file->message_type(5);
  static const int UpdateServingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServingResponse, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServingResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServingResponse, error_msg_),
  };
  UpdateServingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateServingResponse_descriptor_,
      UpdateServingResponse::default_instance_,
      UpdateServingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateServingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateServingResponse, _is_default_instance_));
  QueryServingRequest_descriptor_ = file->message_type(6);
  static const int QueryServingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServingRequest, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServingRequest, party_id_),
  };
  QueryServingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryServingRequest_descriptor_,
      QueryServingRequest::default_instance_,
      QueryServingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryServingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServingRequest, _is_default_instance_));
  ServingInfo_descriptor_ = file->message_type(7);
  static const int ServingInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServingInfo, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServingInfo, served_model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServingInfo, status_),
  };
  ServingInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServingInfo_descriptor_,
      ServingInfo::default_instance_,
      ServingInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServingInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServingInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServingInfo, _is_default_instance_));
  QueryServingResponse_descriptor_ = file->message_type(8);
  static const int QueryServingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServingResponse, serving_infos_),
  };
  QueryServingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryServingResponse_descriptor_,
      QueryServingResponse::default_instance_,
      QueryServingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryServingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryServingResponse, _is_default_instance_));
  DisableServingRequest_descriptor_ = file->message_type(9);
  static const int DisableServingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServingRequest, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServingRequest, party_id_),
  };
  DisableServingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DisableServingRequest_descriptor_,
      DisableServingRequest::default_instance_,
      DisableServingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DisableServingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServingRequest, _is_default_instance_));
  DisableServingResponse_descriptor_ = file->message_type(10);
  static const int DisableServingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServingResponse, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServingResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServingResponse, error_msg_),
  };
  DisableServingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DisableServingResponse_descriptor_,
      DisableServingResponse::default_instance_,
      DisableServingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DisableServingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableServingResponse, _is_default_instance_));
  DeleteServingRequest_descriptor_ = file->message_type(11);
  static const int DeleteServingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServingRequest, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServingRequest, party_id_),
  };
  DeleteServingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteServingRequest_descriptor_,
      DeleteServingRequest::default_instance_,
      DeleteServingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteServingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServingRequest, _is_default_instance_));
  DeleteServingResponse_descriptor_ = file->message_type(12);
  static const int DeleteServingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServingResponse, serving_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServingResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServingResponse, error_msg_),
  };
  DeleteServingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteServingResponse_descriptor_,
      DeleteServingResponse::default_instance_,
      DeleteServingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteServingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteServingResponse, _is_default_instance_));
  ServingStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serving_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateServingRequest_descriptor_, &CreateServingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateServingResponse_descriptor_, &CreateServingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnableServingRequest_descriptor_, &EnableServingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnableServingResponse_descriptor_, &EnableServingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateServingRequest_descriptor_, &UpdateServingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateServingResponse_descriptor_, &UpdateServingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryServingRequest_descriptor_, &QueryServingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServingInfo_descriptor_, &ServingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryServingResponse_descriptor_, &QueryServingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DisableServingRequest_descriptor_, &DisableServingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DisableServingResponse_descriptor_, &DisableServingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteServingRequest_descriptor_, &DeleteServingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteServingResponse_descriptor_, &DeleteServingResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serving_2eproto() {
  delete CreateServingRequest::default_instance_;
  delete CreateServingRequest_reflection_;
  delete CreateServingResponse::default_instance_;
  delete CreateServingResponse_reflection_;
  delete EnableServingRequest::default_instance_;
  delete EnableServingRequest_reflection_;
  delete EnableServingResponse::default_instance_;
  delete EnableServingResponse_reflection_;
  delete UpdateServingRequest::default_instance_;
  delete UpdateServingRequest_reflection_;
  delete UpdateServingResponse::default_instance_;
  delete UpdateServingResponse_reflection_;
  delete QueryServingRequest::default_instance_;
  delete QueryServingRequest_reflection_;
  delete ServingInfo::default_instance_;
  delete ServingInfo_reflection_;
  delete QueryServingResponse::default_instance_;
  delete QueryServingResponse_reflection_;
  delete DisableServingRequest::default_instance_;
  delete DisableServingRequest_reflection_;
  delete DisableServingResponse::default_instance_;
  delete DisableServingResponse_reflection_;
  delete DeleteServingRequest::default_instance_;
  delete DeleteServingRequest_reflection_;
  delete DeleteServingResponse::default_instance_;
  delete DeleteServingResponse_reflection_;
}

void protobuf_AddDesc_serving_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_serving_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rserving.proto\022\032com.nus.dbsystem.falcon"
    ".v0\"d\n\024CreateServingRequest\022\022\n\nserving_i"
    "d\030\001 \001(\005\022\024\n\014serving_name\030\002 \001(\t\022\020\n\010model_i"
    "d\030\003 \001(\005\022\020\n\010party_id\030\004 \001(\005\"R\n\025CreateServi"
    "ngResponse\022\022\n\nserving_id\030\001 \001(\005\022\022\n\nis_suc"
    "cess\030\002 \001(\005\022\021\n\terror_msg\030\003 \001(\t\"N\n\024EnableS"
    "ervingRequest\022\022\n\nserving_id\030\001 \001(\005\022\020\n\010mod"
    "el_id\030\002 \001(\005\022\020\n\010party_id\030\003 \001(\005\"R\n\025EnableS"
    "ervingResponse\022\022\n\nserving_id\030\001 \001(\005\022\022\n\nis"
    "_success\030\002 \001(\005\022\021\n\terror_msg\030\003 \001(\t\"R\n\024Upd"
    "ateServingRequest\022\022\n\nserving_id\030\001 \001(\005\022\024\n"
    "\014new_model_id\030\002 \001(\005\022\020\n\010party_id\030\003 \001(\005\"R\n"
    "\025UpdateServingResponse\022\022\n\nserving_id\030\001 \001"
    "(\005\022\022\n\nis_success\030\002 \001(\005\022\021\n\terror_msg\030\003 \001("
    "\t\";\n\023QueryServingRequest\022\022\n\nserving_id\030\001"
    " \003(\005\022\020\n\010party_id\030\002 \001(\005\"u\n\013ServingInfo\022\022\n"
    "\nserving_id\030\001 \001(\005\022\027\n\017served_model_id\030\002 \001"
    "(\005\0229\n\006status\030\003 \001(\0162).com.nus.dbsystem.fa"
    "lcon.v0.ServingStatus\"V\n\024QueryServingRes"
    "ponse\022>\n\rserving_infos\030\001 \003(\0132\'.com.nus.d"
    "bsystem.falcon.v0.ServingInfo\"=\n\025Disable"
    "ServingRequest\022\022\n\nserving_id\030\001 \001(\005\022\020\n\010pa"
    "rty_id\030\002 \001(\005\"S\n\026DisableServingResponse\022\022"
    "\n\nserving_id\030\001 \001(\005\022\022\n\nis_success\030\002 \001(\005\022\021"
    "\n\terror_msg\030\003 \001(\t\"<\n\024DeleteServingReques"
    "t\022\022\n\nserving_id\030\001 \001(\005\022\020\n\010party_id\030\002 \001(\005\""
    "R\n\025DeleteServingResponse\022\022\n\nserving_id\030\001"
    " \001(\005\022\022\n\nis_success\030\002 \001(\005\022\021\n\terror_msg\030\003 "
    "\001(\t*5\n\rServingStatus\022\013\n\007created\020\000\022\n\n\006onl"
    "ine\020\001\022\013\n\007offline\020\002b\006proto3", 1186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serving.proto", &protobuf_RegisterTypes);
  CreateServingRequest::default_instance_ = new CreateServingRequest();
  CreateServingResponse::default_instance_ = new CreateServingResponse();
  EnableServingRequest::default_instance_ = new EnableServingRequest();
  EnableServingResponse::default_instance_ = new EnableServingResponse();
  UpdateServingRequest::default_instance_ = new UpdateServingRequest();
  UpdateServingResponse::default_instance_ = new UpdateServingResponse();
  QueryServingRequest::default_instance_ = new QueryServingRequest();
  ServingInfo::default_instance_ = new ServingInfo();
  QueryServingResponse::default_instance_ = new QueryServingResponse();
  DisableServingRequest::default_instance_ = new DisableServingRequest();
  DisableServingResponse::default_instance_ = new DisableServingResponse();
  DeleteServingRequest::default_instance_ = new DeleteServingRequest();
  DeleteServingResponse::default_instance_ = new DeleteServingResponse();
  CreateServingRequest::default_instance_->InitAsDefaultInstance();
  CreateServingResponse::default_instance_->InitAsDefaultInstance();
  EnableServingRequest::default_instance_->InitAsDefaultInstance();
  EnableServingResponse::default_instance_->InitAsDefaultInstance();
  UpdateServingRequest::default_instance_->InitAsDefaultInstance();
  UpdateServingResponse::default_instance_->InitAsDefaultInstance();
  QueryServingRequest::default_instance_->InitAsDefaultInstance();
  ServingInfo::default_instance_->InitAsDefaultInstance();
  QueryServingResponse::default_instance_->InitAsDefaultInstance();
  DisableServingRequest::default_instance_->InitAsDefaultInstance();
  DisableServingResponse::default_instance_->InitAsDefaultInstance();
  DeleteServingRequest::default_instance_->InitAsDefaultInstance();
  DeleteServingResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serving_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serving_2eproto {
  StaticDescriptorInitializer_serving_2eproto() {
    protobuf_AddDesc_serving_2eproto();
  }
} static_descriptor_initializer_serving_2eproto_;
const ::google::protobuf::EnumDescriptor* ServingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServingStatus_descriptor_;
}
bool ServingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateServingRequest::kServingIdFieldNumber;
const int CreateServingRequest::kServingNameFieldNumber;
const int CreateServingRequest::kModelIdFieldNumber;
const int CreateServingRequest::kPartyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateServingRequest::CreateServingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.CreateServingRequest)
}

void CreateServingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateServingRequest::CreateServingRequest(const CreateServingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.CreateServingRequest)
}

void CreateServingRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serving_id_ = 0;
  serving_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_id_ = 0;
  party_id_ = 0;
}

CreateServingRequest::~CreateServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  SharedDtor();
}

void CreateServingRequest::SharedDtor() {
  serving_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateServingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateServingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateServingRequest_descriptor_;
}

const CreateServingRequest& CreateServingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

CreateServingRequest* CreateServingRequest::default_instance_ = NULL;

CreateServingRequest* CreateServingRequest::New(::google::protobuf::Arena* arena) const {
  CreateServingRequest* n = new CreateServingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CreateServingRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CreateServingRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serving_id_, party_id_);
  serving_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CreateServingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serving_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serving_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serving_name;
        break;
      }

      // optional string serving_name = 2;
      case 2: {
        if (tag == 18) {
         parse_serving_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serving_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serving_name().data(), this->serving_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_model_id;
        break;
      }

      // optional int32 model_id = 3;
      case 3: {
        if (tag == 24) {
         parse_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_party_id;
        break;
      }

      // optional int32 party_id = 4;
      case 4: {
        if (tag == 32) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &party_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  return false;
#undef DO_
}

void CreateServingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serving_id(), output);
  }

  // optional string serving_name = 2;
  if (this->serving_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serving_name().data(), this->serving_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serving_name(), output);
  }

  // optional int32 model_id = 3;
  if (this->model_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model_id(), output);
  }

  // optional int32 party_id = 4;
  if (this->party_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->party_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.CreateServingRequest)
}

::google::protobuf::uint8* CreateServingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serving_id(), target);
  }

  // optional string serving_name = 2;
  if (this->serving_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serving_name().data(), this->serving_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serving_name(), target);
  }

  // optional int32 model_id = 3;
  if (this->model_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model_id(), target);
  }

  // optional int32 party_id = 4;
  if (this->party_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->party_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  return target;
}

int CreateServingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  int total_size = 0;

  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serving_id());
  }

  // optional string serving_name = 2;
  if (this->serving_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serving_name());
  }

  // optional int32 model_id = 3;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());
  }

  // optional int32 party_id = 4;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->party_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateServingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateServingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateServingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.CreateServingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.CreateServingRequest)
    MergeFrom(*source);
  }
}

void CreateServingRequest::MergeFrom(const CreateServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serving_id() != 0) {
    set_serving_id(from.serving_id());
  }
  if (from.serving_name().size() > 0) {

    serving_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serving_name_);
  }
  if (from.model_id() != 0) {
    set_model_id(from.model_id());
  }
  if (from.party_id() != 0) {
    set_party_id(from.party_id());
  }
}

void CreateServingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServingRequest::CopyFrom(const CreateServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.CreateServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateServingRequest::IsInitialized() const {

  return true;
}

void CreateServingRequest::Swap(CreateServingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateServingRequest::InternalSwap(CreateServingRequest* other) {
  std::swap(serving_id_, other->serving_id_);
  serving_name_.Swap(&other->serving_name_);
  std::swap(model_id_, other->model_id_);
  std::swap(party_id_, other->party_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateServingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateServingRequest_descriptor_;
  metadata.reflection = CreateServingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateServingRequest

// optional int32 serving_id = 1;
void CreateServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
 ::google::protobuf::int32 CreateServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_id)
  return serving_id_;
}
 void CreateServingRequest::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_id)
}

// optional string serving_name = 2;
void CreateServingRequest::clear_serving_name() {
  serving_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateServingRequest::serving_name() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
  return serving_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateServingRequest::set_serving_name(const ::std::string& value) {
  
  serving_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}
 void CreateServingRequest::set_serving_name(const char* value) {
  
  serving_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}
 void CreateServingRequest::set_serving_name(const char* value, size_t size) {
  
  serving_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}
 ::std::string* CreateServingRequest::mutable_serving_name() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
  return serving_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateServingRequest::release_serving_name() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
  
  return serving_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateServingRequest::set_allocated_serving_name(::std::string* serving_name) {
  if (serving_name != NULL) {
    
  } else {
    
  }
  serving_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serving_name);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}

// optional int32 model_id = 3;
void CreateServingRequest::clear_model_id() {
  model_id_ = 0;
}
 ::google::protobuf::int32 CreateServingRequest::model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.model_id)
  return model_id_;
}
 void CreateServingRequest::set_model_id(::google::protobuf::int32 value) {
  
  model_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.model_id)
}

// optional int32 party_id = 4;
void CreateServingRequest::clear_party_id() {
  party_id_ = 0;
}
 ::google::protobuf::int32 CreateServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.party_id)
  return party_id_;
}
 void CreateServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.party_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateServingResponse::kServingIdFieldNumber;
const int CreateServingResponse::kIsSuccessFieldNumber;
const int CreateServingResponse::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateServingResponse::CreateServingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.CreateServingResponse)
}

void CreateServingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateServingResponse::CreateServingResponse(const CreateServingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.CreateServingResponse)
}

void CreateServingResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serving_id_ = 0;
  is_success_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateServingResponse::~CreateServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  SharedDtor();
}

void CreateServingResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateServingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateServingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateServingResponse_descriptor_;
}

const CreateServingResponse& CreateServingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

CreateServingResponse* CreateServingResponse::default_instance_ = NULL;

CreateServingResponse* CreateServingResponse::New(::google::protobuf::Arena* arena) const {
  CreateServingResponse* n = new CreateServingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CreateServingResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CreateServingResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serving_id_, is_success_);
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CreateServingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serving_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serving_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_success;
        break;
      }

      // optional int32 is_success = 2;
      case 2: {
        if (tag == 16) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  return false;
#undef DO_
}

void CreateServingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serving_id(), output);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_success(), output);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.CreateServingResponse)
}

::google::protobuf::uint8* CreateServingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serving_id(), target);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_success(), target);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  return target;
}

int CreateServingResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  int total_size = 0;

  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serving_id());
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_success());
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateServingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CreateServingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateServingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.CreateServingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.CreateServingResponse)
    MergeFrom(*source);
  }
}

void CreateServingResponse::MergeFrom(const CreateServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serving_id() != 0) {
    set_serving_id(from.serving_id());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void CreateServingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServingResponse::CopyFrom(const CreateServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.CreateServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateServingResponse::IsInitialized() const {

  return true;
}

void CreateServingResponse::Swap(CreateServingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateServingResponse::InternalSwap(CreateServingResponse* other) {
  std::swap(serving_id_, other->serving_id_);
  std::swap(is_success_, other->is_success_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateServingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateServingResponse_descriptor_;
  metadata.reflection = CreateServingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateServingResponse

// optional int32 serving_id = 1;
void CreateServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
 ::google::protobuf::int32 CreateServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingResponse.serving_id)
  return serving_id_;
}
 void CreateServingResponse::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingResponse.serving_id)
}

// optional int32 is_success = 2;
void CreateServingResponse::clear_is_success() {
  is_success_ = 0;
}
 ::google::protobuf::int32 CreateServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingResponse.is_success)
  return is_success_;
}
 void CreateServingResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingResponse.is_success)
}

// optional string error_msg = 3;
void CreateServingResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateServingResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}
 void CreateServingResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}
 void CreateServingResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}
 ::std::string* CreateServingResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateServingResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnableServingRequest::kServingIdFieldNumber;
const int EnableServingRequest::kModelIdFieldNumber;
const int EnableServingRequest::kPartyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableServingRequest::EnableServingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.EnableServingRequest)
}

void EnableServingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EnableServingRequest::EnableServingRequest(const EnableServingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.EnableServingRequest)
}

void EnableServingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  serving_id_ = 0;
  model_id_ = 0;
  party_id_ = 0;
}

EnableServingRequest::~EnableServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  SharedDtor();
}

void EnableServingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnableServingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableServingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableServingRequest_descriptor_;
}

const EnableServingRequest& EnableServingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

EnableServingRequest* EnableServingRequest::default_instance_ = NULL;

EnableServingRequest* EnableServingRequest::New(::google::protobuf::Arena* arena) const {
  EnableServingRequest* n = new EnableServingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EnableServingRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnableServingRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serving_id_, party_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool EnableServingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serving_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serving_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_model_id;
        break;
      }

      // optional int32 model_id = 2;
      case 2: {
        if (tag == 16) {
         parse_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_party_id;
        break;
      }

      // optional int32 party_id = 3;
      case 3: {
        if (tag == 24) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &party_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  return false;
#undef DO_
}

void EnableServingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serving_id(), output);
  }

  // optional int32 model_id = 2;
  if (this->model_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->model_id(), output);
  }

  // optional int32 party_id = 3;
  if (this->party_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->party_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.EnableServingRequest)
}

::google::protobuf::uint8* EnableServingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serving_id(), target);
  }

  // optional int32 model_id = 2;
  if (this->model_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->model_id(), target);
  }

  // optional int32 party_id = 3;
  if (this->party_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->party_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  return target;
}

int EnableServingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  int total_size = 0;

  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serving_id());
  }

  // optional int32 model_id = 2;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());
  }

  // optional int32 party_id = 3;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->party_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableServingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnableServingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableServingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.EnableServingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.EnableServingRequest)
    MergeFrom(*source);
  }
}

void EnableServingRequest::MergeFrom(const EnableServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serving_id() != 0) {
    set_serving_id(from.serving_id());
  }
  if (from.model_id() != 0) {
    set_model_id(from.model_id());
  }
  if (from.party_id() != 0) {
    set_party_id(from.party_id());
  }
}

void EnableServingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableServingRequest::CopyFrom(const EnableServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.EnableServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableServingRequest::IsInitialized() const {

  return true;
}

void EnableServingRequest::Swap(EnableServingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableServingRequest::InternalSwap(EnableServingRequest* other) {
  std::swap(serving_id_, other->serving_id_);
  std::swap(model_id_, other->model_id_);
  std::swap(party_id_, other->party_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableServingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnableServingRequest_descriptor_;
  metadata.reflection = EnableServingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnableServingRequest

// optional int32 serving_id = 1;
void EnableServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
 ::google::protobuf::int32 EnableServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingRequest.serving_id)
  return serving_id_;
}
 void EnableServingRequest::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingRequest.serving_id)
}

// optional int32 model_id = 2;
void EnableServingRequest::clear_model_id() {
  model_id_ = 0;
}
 ::google::protobuf::int32 EnableServingRequest::model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingRequest.model_id)
  return model_id_;
}
 void EnableServingRequest::set_model_id(::google::protobuf::int32 value) {
  
  model_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingRequest.model_id)
}

// optional int32 party_id = 3;
void EnableServingRequest::clear_party_id() {
  party_id_ = 0;
}
 ::google::protobuf::int32 EnableServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingRequest.party_id)
  return party_id_;
}
 void EnableServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingRequest.party_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnableServingResponse::kServingIdFieldNumber;
const int EnableServingResponse::kIsSuccessFieldNumber;
const int EnableServingResponse::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableServingResponse::EnableServingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.EnableServingResponse)
}

void EnableServingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EnableServingResponse::EnableServingResponse(const EnableServingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.EnableServingResponse)
}

void EnableServingResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serving_id_ = 0;
  is_success_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EnableServingResponse::~EnableServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  SharedDtor();
}

void EnableServingResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EnableServingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableServingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableServingResponse_descriptor_;
}

const EnableServingResponse& EnableServingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

EnableServingResponse* EnableServingResponse::default_instance_ = NULL;

EnableServingResponse* EnableServingResponse::New(::google::protobuf::Arena* arena) const {
  EnableServingResponse* n = new EnableServingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EnableServingResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnableServingResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serving_id_, is_success_);
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool EnableServingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serving_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serving_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_success;
        break;
      }

      // optional int32 is_success = 2;
      case 2: {
        if (tag == 16) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  return false;
#undef DO_
}

void EnableServingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serving_id(), output);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_success(), output);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.EnableServingResponse)
}

::google::protobuf::uint8* EnableServingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serving_id(), target);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_success(), target);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  return target;
}

int EnableServingResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  int total_size = 0;

  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serving_id());
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_success());
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableServingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnableServingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableServingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.EnableServingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.EnableServingResponse)
    MergeFrom(*source);
  }
}

void EnableServingResponse::MergeFrom(const EnableServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serving_id() != 0) {
    set_serving_id(from.serving_id());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void EnableServingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableServingResponse::CopyFrom(const EnableServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.EnableServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableServingResponse::IsInitialized() const {

  return true;
}

void EnableServingResponse::Swap(EnableServingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableServingResponse::InternalSwap(EnableServingResponse* other) {
  std::swap(serving_id_, other->serving_id_);
  std::swap(is_success_, other->is_success_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableServingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnableServingResponse_descriptor_;
  metadata.reflection = EnableServingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnableServingResponse

// optional int32 serving_id = 1;
void EnableServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
 ::google::protobuf::int32 EnableServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingResponse.serving_id)
  return serving_id_;
}
 void EnableServingResponse::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingResponse.serving_id)
}

// optional int32 is_success = 2;
void EnableServingResponse::clear_is_success() {
  is_success_ = 0;
}
 ::google::protobuf::int32 EnableServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingResponse.is_success)
  return is_success_;
}
 void EnableServingResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingResponse.is_success)
}

// optional string error_msg = 3;
void EnableServingResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EnableServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnableServingResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}
 void EnableServingResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}
 void EnableServingResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}
 ::std::string* EnableServingResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EnableServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnableServingResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateServingRequest::kServingIdFieldNumber;
const int UpdateServingRequest::kNewModelIdFieldNumber;
const int UpdateServingRequest::kPartyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateServingRequest::UpdateServingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
}

void UpdateServingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateServingRequest::UpdateServingRequest(const UpdateServingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
}

void UpdateServingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  serving_id_ = 0;
  new_model_id_ = 0;
  party_id_ = 0;
}

UpdateServingRequest::~UpdateServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  SharedDtor();
}

void UpdateServingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateServingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateServingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateServingRequest_descriptor_;
}

const UpdateServingRequest& UpdateServingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

UpdateServingRequest* UpdateServingRequest::default_instance_ = NULL;

UpdateServingRequest* UpdateServingRequest::New(::google::protobuf::Arena* arena) const {
  UpdateServingRequest* n = new UpdateServingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UpdateServingRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UpdateServingRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serving_id_, party_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool UpdateServingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serving_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serving_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_model_id;
        break;
      }

      // optional int32 new_model_id = 2;
      case 2: {
        if (tag == 16) {
         parse_new_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_model_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_party_id;
        break;
      }

      // optional int32 party_id = 3;
      case 3: {
        if (tag == 24) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &party_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  return false;
#undef DO_
}

void UpdateServingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serving_id(), output);
  }

  // optional int32 new_model_id = 2;
  if (this->new_model_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_model_id(), output);
  }

  // optional int32 party_id = 3;
  if (this->party_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->party_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
}

::google::protobuf::uint8* UpdateServingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serving_id(), target);
  }

  // optional int32 new_model_id = 2;
  if (this->new_model_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_model_id(), target);
  }

  // optional int32 party_id = 3;
  if (this->party_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->party_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  return target;
}

int UpdateServingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  int total_size = 0;

  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serving_id());
  }

  // optional int32 new_model_id = 2;
  if (this->new_model_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->new_model_id());
  }

  // optional int32 party_id = 3;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->party_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateServingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateServingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateServingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
    MergeFrom(*source);
  }
}

void UpdateServingRequest::MergeFrom(const UpdateServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serving_id() != 0) {
    set_serving_id(from.serving_id());
  }
  if (from.new_model_id() != 0) {
    set_new_model_id(from.new_model_id());
  }
  if (from.party_id() != 0) {
    set_party_id(from.party_id());
  }
}

void UpdateServingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateServingRequest::CopyFrom(const UpdateServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateServingRequest::IsInitialized() const {

  return true;
}

void UpdateServingRequest::Swap(UpdateServingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateServingRequest::InternalSwap(UpdateServingRequest* other) {
  std::swap(serving_id_, other->serving_id_);
  std::swap(new_model_id_, other->new_model_id_);
  std::swap(party_id_, other->party_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateServingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateServingRequest_descriptor_;
  metadata.reflection = UpdateServingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateServingRequest

// optional int32 serving_id = 1;
void UpdateServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
 ::google::protobuf::int32 UpdateServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingRequest.serving_id)
  return serving_id_;
}
 void UpdateServingRequest::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingRequest.serving_id)
}

// optional int32 new_model_id = 2;
void UpdateServingRequest::clear_new_model_id() {
  new_model_id_ = 0;
}
 ::google::protobuf::int32 UpdateServingRequest::new_model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingRequest.new_model_id)
  return new_model_id_;
}
 void UpdateServingRequest::set_new_model_id(::google::protobuf::int32 value) {
  
  new_model_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingRequest.new_model_id)
}

// optional int32 party_id = 3;
void UpdateServingRequest::clear_party_id() {
  party_id_ = 0;
}
 ::google::protobuf::int32 UpdateServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingRequest.party_id)
  return party_id_;
}
 void UpdateServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingRequest.party_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateServingResponse::kServingIdFieldNumber;
const int UpdateServingResponse::kIsSuccessFieldNumber;
const int UpdateServingResponse::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateServingResponse::UpdateServingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
}

void UpdateServingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateServingResponse::UpdateServingResponse(const UpdateServingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
}

void UpdateServingResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serving_id_ = 0;
  is_success_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateServingResponse::~UpdateServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  SharedDtor();
}

void UpdateServingResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UpdateServingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateServingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateServingResponse_descriptor_;
}

const UpdateServingResponse& UpdateServingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

UpdateServingResponse* UpdateServingResponse::default_instance_ = NULL;

UpdateServingResponse* UpdateServingResponse::New(::google::protobuf::Arena* arena) const {
  UpdateServingResponse* n = new UpdateServingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UpdateServingResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UpdateServingResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serving_id_, is_success_);
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool UpdateServingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serving_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serving_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_success;
        break;
      }

      // optional int32 is_success = 2;
      case 2: {
        if (tag == 16) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  return false;
#undef DO_
}

void UpdateServingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serving_id(), output);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_success(), output);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
}

::google::protobuf::uint8* UpdateServingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serving_id(), target);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_success(), target);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  return target;
}

int UpdateServingResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  int total_size = 0;

  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serving_id());
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_success());
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateServingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateServingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateServingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
    MergeFrom(*source);
  }
}

void UpdateServingResponse::MergeFrom(const UpdateServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serving_id() != 0) {
    set_serving_id(from.serving_id());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void UpdateServingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateServingResponse::CopyFrom(const UpdateServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateServingResponse::IsInitialized() const {

  return true;
}

void UpdateServingResponse::Swap(UpdateServingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateServingResponse::InternalSwap(UpdateServingResponse* other) {
  std::swap(serving_id_, other->serving_id_);
  std::swap(is_success_, other->is_success_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateServingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateServingResponse_descriptor_;
  metadata.reflection = UpdateServingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateServingResponse

// optional int32 serving_id = 1;
void UpdateServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
 ::google::protobuf::int32 UpdateServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingResponse.serving_id)
  return serving_id_;
}
 void UpdateServingResponse::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingResponse.serving_id)
}

// optional int32 is_success = 2;
void UpdateServingResponse::clear_is_success() {
  is_success_ = 0;
}
 ::google::protobuf::int32 UpdateServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingResponse.is_success)
  return is_success_;
}
 void UpdateServingResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingResponse.is_success)
}

// optional string error_msg = 3;
void UpdateServingResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpdateServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateServingResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}
 void UpdateServingResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}
 void UpdateServingResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}
 ::std::string* UpdateServingResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateServingResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryServingRequest::kServingIdFieldNumber;
const int QueryServingRequest::kPartyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryServingRequest::QueryServingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.QueryServingRequest)
}

void QueryServingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryServingRequest::QueryServingRequest(const QueryServingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.QueryServingRequest)
}

void QueryServingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  party_id_ = 0;
}

QueryServingRequest::~QueryServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  SharedDtor();
}

void QueryServingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryServingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryServingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryServingRequest_descriptor_;
}

const QueryServingRequest& QueryServingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

QueryServingRequest* QueryServingRequest::default_instance_ = NULL;

QueryServingRequest* QueryServingRequest::New(::google::protobuf::Arena* arena) const {
  QueryServingRequest* n = new QueryServingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  party_id_ = 0;
  serving_id_.Clear();
}

bool QueryServingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 serving_id = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_serving_id())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_serving_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_party_id;
        break;
      }

      // optional int32 party_id = 2;
      case 2: {
        if (tag == 16) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &party_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  return false;
#undef DO_
}

void QueryServingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  // repeated int32 serving_id = 1;
  if (this->serving_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_serving_id_cached_byte_size_);
  }
  for (int i = 0; i < this->serving_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->serving_id(i), output);
  }

  // optional int32 party_id = 2;
  if (this->party_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->party_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.QueryServingRequest)
}

::google::protobuf::uint8* QueryServingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  // repeated int32 serving_id = 1;
  if (this->serving_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _serving_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->serving_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->serving_id(i), target);
  }

  // optional int32 party_id = 2;
  if (this->party_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->party_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  return target;
}

int QueryServingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  int total_size = 0;

  // optional int32 party_id = 2;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->party_id());
  }

  // repeated int32 serving_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->serving_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->serving_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _serving_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryServingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryServingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryServingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.QueryServingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.QueryServingRequest)
    MergeFrom(*source);
  }
}

void QueryServingRequest::MergeFrom(const QueryServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  serving_id_.MergeFrom(from.serving_id_);
  if (from.party_id() != 0) {
    set_party_id(from.party_id());
  }
}

void QueryServingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryServingRequest::CopyFrom(const QueryServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.QueryServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryServingRequest::IsInitialized() const {

  return true;
}

void QueryServingRequest::Swap(QueryServingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryServingRequest::InternalSwap(QueryServingRequest* other) {
  serving_id_.UnsafeArenaSwap(&other->serving_id_);
  std::swap(party_id_, other->party_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryServingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryServingRequest_descriptor_;
  metadata.reflection = QueryServingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryServingRequest

// repeated int32 serving_id = 1;
int QueryServingRequest::serving_id_size() const {
  return serving_id_.size();
}
void QueryServingRequest::clear_serving_id() {
  serving_id_.Clear();
}
 ::google::protobuf::int32 QueryServingRequest::serving_id(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
  return serving_id_.Get(index);
}
 void QueryServingRequest::set_serving_id(int index, ::google::protobuf::int32 value) {
  serving_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
}
 void QueryServingRequest::add_serving_id(::google::protobuf::int32 value) {
  serving_id_.Add(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
  return serving_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryServingRequest::mutable_serving_id() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
  return &serving_id_;
}

// optional int32 party_id = 2;
void QueryServingRequest::clear_party_id() {
  party_id_ = 0;
}
 ::google::protobuf::int32 QueryServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.QueryServingRequest.party_id)
  return party_id_;
}
 void QueryServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.QueryServingRequest.party_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServingInfo::kServingIdFieldNumber;
const int ServingInfo::kServedModelIdFieldNumber;
const int ServingInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServingInfo::ServingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.ServingInfo)
}

void ServingInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServingInfo::ServingInfo(const ServingInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.ServingInfo)
}

void ServingInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  serving_id_ = 0;
  served_model_id_ = 0;
  status_ = 0;
}

ServingInfo::~ServingInfo() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.ServingInfo)
  SharedDtor();
}

void ServingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServingInfo_descriptor_;
}

const ServingInfo& ServingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

ServingInfo* ServingInfo::default_instance_ = NULL;

ServingInfo* ServingInfo::New(::google::protobuf::Arena* arena) const {
  ServingInfo* n = new ServingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.ServingInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServingInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServingInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serving_id_, status_);

#undef ZR_HELPER_
#undef ZR_

}

bool ServingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serving_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serving_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_served_model_id;
        break;
      }

      // optional int32 served_model_id = 2;
      case 2: {
        if (tag == 16) {
         parse_served_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &served_model_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::com::nus::dbsystem::falcon::v0::ServingStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.ServingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.ServingInfo)
  return false;
#undef DO_
}

void ServingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serving_id(), output);
  }

  // optional int32 served_model_id = 2;
  if (this->served_model_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->served_model_id(), output);
  }

  // optional .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.ServingInfo)
}

::google::protobuf::uint8* ServingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serving_id(), target);
  }

  // optional int32 served_model_id = 2;
  if (this->served_model_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->served_model_id(), target);
  }

  // optional .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.ServingInfo)
  return target;
}

int ServingInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  int total_size = 0;

  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serving_id());
  }

  // optional int32 served_model_id = 2;
  if (this->served_model_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->served_model_id());
  }

  // optional .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServingInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.ServingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.ServingInfo)
    MergeFrom(*source);
  }
}

void ServingInfo::MergeFrom(const ServingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serving_id() != 0) {
    set_serving_id(from.serving_id());
  }
  if (from.served_model_id() != 0) {
    set_served_model_id(from.served_model_id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ServingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServingInfo::CopyFrom(const ServingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.ServingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServingInfo::IsInitialized() const {

  return true;
}

void ServingInfo::Swap(ServingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServingInfo::InternalSwap(ServingInfo* other) {
  std::swap(serving_id_, other->serving_id_);
  std::swap(served_model_id_, other->served_model_id_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServingInfo_descriptor_;
  metadata.reflection = ServingInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServingInfo

// optional int32 serving_id = 1;
void ServingInfo::clear_serving_id() {
  serving_id_ = 0;
}
 ::google::protobuf::int32 ServingInfo::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ServingInfo.serving_id)
  return serving_id_;
}
 void ServingInfo::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ServingInfo.serving_id)
}

// optional int32 served_model_id = 2;
void ServingInfo::clear_served_model_id() {
  served_model_id_ = 0;
}
 ::google::protobuf::int32 ServingInfo::served_model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ServingInfo.served_model_id)
  return served_model_id_;
}
 void ServingInfo::set_served_model_id(::google::protobuf::int32 value) {
  
  served_model_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ServingInfo.served_model_id)
}

// optional .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
void ServingInfo::clear_status() {
  status_ = 0;
}
 ::com::nus::dbsystem::falcon::v0::ServingStatus ServingInfo::status() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ServingInfo.status)
  return static_cast< ::com::nus::dbsystem::falcon::v0::ServingStatus >(status_);
}
 void ServingInfo::set_status(::com::nus::dbsystem::falcon::v0::ServingStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ServingInfo.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryServingResponse::kServingInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryServingResponse::QueryServingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.QueryServingResponse)
}

void QueryServingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryServingResponse::QueryServingResponse(const QueryServingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.QueryServingResponse)
}

void QueryServingResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

QueryServingResponse::~QueryServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  SharedDtor();
}

void QueryServingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryServingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryServingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryServingResponse_descriptor_;
}

const QueryServingResponse& QueryServingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

QueryServingResponse* QueryServingResponse::default_instance_ = NULL;

QueryServingResponse* QueryServingResponse::New(::google::protobuf::Arena* arena) const {
  QueryServingResponse* n = new QueryServingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  serving_infos_.Clear();
}

bool QueryServingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_serving_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_serving_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_serving_infos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  return false;
#undef DO_
}

void QueryServingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  // repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
  for (unsigned int i = 0, n = this->serving_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serving_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.QueryServingResponse)
}

::google::protobuf::uint8* QueryServingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  // repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
  for (unsigned int i = 0, n = this->serving_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->serving_infos(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  return target;
}

int QueryServingResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  int total_size = 0;

  // repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
  total_size += 1 * this->serving_infos_size();
  for (int i = 0; i < this->serving_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serving_infos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryServingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryServingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryServingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.QueryServingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.QueryServingResponse)
    MergeFrom(*source);
  }
}

void QueryServingResponse::MergeFrom(const QueryServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  serving_infos_.MergeFrom(from.serving_infos_);
}

void QueryServingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryServingResponse::CopyFrom(const QueryServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.QueryServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryServingResponse::IsInitialized() const {

  return true;
}

void QueryServingResponse::Swap(QueryServingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryServingResponse::InternalSwap(QueryServingResponse* other) {
  serving_infos_.UnsafeArenaSwap(&other->serving_infos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryServingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryServingResponse_descriptor_;
  metadata.reflection = QueryServingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryServingResponse

// repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
int QueryServingResponse::serving_infos_size() const {
  return serving_infos_.size();
}
void QueryServingResponse::clear_serving_infos() {
  serving_infos_.Clear();
}
const ::com::nus::dbsystem::falcon::v0::ServingInfo& QueryServingResponse::serving_infos(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return serving_infos_.Get(index);
}
::com::nus::dbsystem::falcon::v0::ServingInfo* QueryServingResponse::mutable_serving_infos(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return serving_infos_.Mutable(index);
}
::com::nus::dbsystem::falcon::v0::ServingInfo* QueryServingResponse::add_serving_infos() {
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return serving_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo >*
QueryServingResponse::mutable_serving_infos() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return &serving_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo >&
QueryServingResponse::serving_infos() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return serving_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisableServingRequest::kServingIdFieldNumber;
const int DisableServingRequest::kPartyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisableServingRequest::DisableServingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.DisableServingRequest)
}

void DisableServingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DisableServingRequest::DisableServingRequest(const DisableServingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.DisableServingRequest)
}

void DisableServingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  serving_id_ = 0;
  party_id_ = 0;
}

DisableServingRequest::~DisableServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  SharedDtor();
}

void DisableServingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DisableServingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableServingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisableServingRequest_descriptor_;
}

const DisableServingRequest& DisableServingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

DisableServingRequest* DisableServingRequest::default_instance_ = NULL;

DisableServingRequest* DisableServingRequest::New(::google::protobuf::Arena* arena) const {
  DisableServingRequest* n = new DisableServingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisableServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DisableServingRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DisableServingRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serving_id_, party_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool DisableServingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serving_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serving_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_party_id;
        break;
      }

      // optional int32 party_id = 2;
      case 2: {
        if (tag == 16) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &party_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  return false;
#undef DO_
}

void DisableServingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serving_id(), output);
  }

  // optional int32 party_id = 2;
  if (this->party_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->party_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.DisableServingRequest)
}

::google::protobuf::uint8* DisableServingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serving_id(), target);
  }

  // optional int32 party_id = 2;
  if (this->party_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->party_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  return target;
}

int DisableServingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  int total_size = 0;

  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serving_id());
  }

  // optional int32 party_id = 2;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->party_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableServingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DisableServingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DisableServingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.DisableServingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.DisableServingRequest)
    MergeFrom(*source);
  }
}

void DisableServingRequest::MergeFrom(const DisableServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serving_id() != 0) {
    set_serving_id(from.serving_id());
  }
  if (from.party_id() != 0) {
    set_party_id(from.party_id());
  }
}

void DisableServingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableServingRequest::CopyFrom(const DisableServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.DisableServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableServingRequest::IsInitialized() const {

  return true;
}

void DisableServingRequest::Swap(DisableServingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisableServingRequest::InternalSwap(DisableServingRequest* other) {
  std::swap(serving_id_, other->serving_id_);
  std::swap(party_id_, other->party_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisableServingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisableServingRequest_descriptor_;
  metadata.reflection = DisableServingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisableServingRequest

// optional int32 serving_id = 1;
void DisableServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
 ::google::protobuf::int32 DisableServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingRequest.serving_id)
  return serving_id_;
}
 void DisableServingRequest::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingRequest.serving_id)
}

// optional int32 party_id = 2;
void DisableServingRequest::clear_party_id() {
  party_id_ = 0;
}
 ::google::protobuf::int32 DisableServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingRequest.party_id)
  return party_id_;
}
 void DisableServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingRequest.party_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisableServingResponse::kServingIdFieldNumber;
const int DisableServingResponse::kIsSuccessFieldNumber;
const int DisableServingResponse::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisableServingResponse::DisableServingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.DisableServingResponse)
}

void DisableServingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DisableServingResponse::DisableServingResponse(const DisableServingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.DisableServingResponse)
}

void DisableServingResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serving_id_ = 0;
  is_success_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DisableServingResponse::~DisableServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  SharedDtor();
}

void DisableServingResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DisableServingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableServingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisableServingResponse_descriptor_;
}

const DisableServingResponse& DisableServingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

DisableServingResponse* DisableServingResponse::default_instance_ = NULL;

DisableServingResponse* DisableServingResponse::New(::google::protobuf::Arena* arena) const {
  DisableServingResponse* n = new DisableServingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisableServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DisableServingResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DisableServingResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serving_id_, is_success_);
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DisableServingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serving_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serving_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_success;
        break;
      }

      // optional int32 is_success = 2;
      case 2: {
        if (tag == 16) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  return false;
#undef DO_
}

void DisableServingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serving_id(), output);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_success(), output);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.DisableServingResponse)
}

::google::protobuf::uint8* DisableServingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serving_id(), target);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_success(), target);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  return target;
}

int DisableServingResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  int total_size = 0;

  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serving_id());
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_success());
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableServingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DisableServingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DisableServingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.DisableServingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.DisableServingResponse)
    MergeFrom(*source);
  }
}

void DisableServingResponse::MergeFrom(const DisableServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serving_id() != 0) {
    set_serving_id(from.serving_id());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void DisableServingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableServingResponse::CopyFrom(const DisableServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.DisableServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableServingResponse::IsInitialized() const {

  return true;
}

void DisableServingResponse::Swap(DisableServingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisableServingResponse::InternalSwap(DisableServingResponse* other) {
  std::swap(serving_id_, other->serving_id_);
  std::swap(is_success_, other->is_success_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisableServingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisableServingResponse_descriptor_;
  metadata.reflection = DisableServingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisableServingResponse

// optional int32 serving_id = 1;
void DisableServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
 ::google::protobuf::int32 DisableServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingResponse.serving_id)
  return serving_id_;
}
 void DisableServingResponse::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingResponse.serving_id)
}

// optional int32 is_success = 2;
void DisableServingResponse::clear_is_success() {
  is_success_ = 0;
}
 ::google::protobuf::int32 DisableServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingResponse.is_success)
  return is_success_;
}
 void DisableServingResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingResponse.is_success)
}

// optional string error_msg = 3;
void DisableServingResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DisableServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DisableServingResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}
 void DisableServingResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}
 void DisableServingResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}
 ::std::string* DisableServingResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DisableServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DisableServingResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteServingRequest::kServingIdFieldNumber;
const int DeleteServingRequest::kPartyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteServingRequest::DeleteServingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
}

void DeleteServingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteServingRequest::DeleteServingRequest(const DeleteServingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
}

void DeleteServingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  serving_id_ = 0;
  party_id_ = 0;
}

DeleteServingRequest::~DeleteServingRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  SharedDtor();
}

void DeleteServingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteServingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteServingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteServingRequest_descriptor_;
}

const DeleteServingRequest& DeleteServingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

DeleteServingRequest* DeleteServingRequest::default_instance_ = NULL;

DeleteServingRequest* DeleteServingRequest::New(::google::protobuf::Arena* arena) const {
  DeleteServingRequest* n = new DeleteServingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteServingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeleteServingRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeleteServingRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serving_id_, party_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool DeleteServingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serving_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serving_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_party_id;
        break;
      }

      // optional int32 party_id = 2;
      case 2: {
        if (tag == 16) {
         parse_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &party_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  return false;
#undef DO_
}

void DeleteServingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serving_id(), output);
  }

  // optional int32 party_id = 2;
  if (this->party_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->party_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
}

::google::protobuf::uint8* DeleteServingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serving_id(), target);
  }

  // optional int32 party_id = 2;
  if (this->party_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->party_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  return target;
}

int DeleteServingRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  int total_size = 0;

  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serving_id());
  }

  // optional int32 party_id = 2;
  if (this->party_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->party_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteServingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteServingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteServingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
    MergeFrom(*source);
  }
}

void DeleteServingRequest::MergeFrom(const DeleteServingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serving_id() != 0) {
    set_serving_id(from.serving_id());
  }
  if (from.party_id() != 0) {
    set_party_id(from.party_id());
  }
}

void DeleteServingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteServingRequest::CopyFrom(const DeleteServingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServingRequest::IsInitialized() const {

  return true;
}

void DeleteServingRequest::Swap(DeleteServingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteServingRequest::InternalSwap(DeleteServingRequest* other) {
  std::swap(serving_id_, other->serving_id_);
  std::swap(party_id_, other->party_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteServingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteServingRequest_descriptor_;
  metadata.reflection = DeleteServingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteServingRequest

// optional int32 serving_id = 1;
void DeleteServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
 ::google::protobuf::int32 DeleteServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingRequest.serving_id)
  return serving_id_;
}
 void DeleteServingRequest::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingRequest.serving_id)
}

// optional int32 party_id = 2;
void DeleteServingRequest::clear_party_id() {
  party_id_ = 0;
}
 ::google::protobuf::int32 DeleteServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingRequest.party_id)
  return party_id_;
}
 void DeleteServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingRequest.party_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteServingResponse::kServingIdFieldNumber;
const int DeleteServingResponse::kIsSuccessFieldNumber;
const int DeleteServingResponse::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteServingResponse::DeleteServingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
}

void DeleteServingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeleteServingResponse::DeleteServingResponse(const DeleteServingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
}

void DeleteServingResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serving_id_ = 0;
  is_success_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteServingResponse::~DeleteServingResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  SharedDtor();
}

void DeleteServingResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeleteServingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteServingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteServingResponse_descriptor_;
}

const DeleteServingResponse& DeleteServingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serving_2eproto();
  return *default_instance_;
}

DeleteServingResponse* DeleteServingResponse::default_instance_ = NULL;

DeleteServingResponse* DeleteServingResponse::New(::google::protobuf::Arena* arena) const {
  DeleteServingResponse* n = new DeleteServingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteServingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeleteServingResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeleteServingResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(serving_id_, is_success_);
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DeleteServingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serving_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serving_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_success;
        break;
      }

      // optional int32 is_success = 2;
      case 2: {
        if (tag == 16) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  return false;
#undef DO_
}

void DeleteServingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serving_id(), output);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_success(), output);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
}

::google::protobuf::uint8* DeleteServingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serving_id(), target);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_success(), target);
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  return target;
}

int DeleteServingResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  int total_size = 0;

  // optional int32 serving_id = 1;
  if (this->serving_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serving_id());
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_success());
  }

  // optional string error_msg = 3;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteServingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeleteServingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteServingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
    MergeFrom(*source);
  }
}

void DeleteServingResponse::MergeFrom(const DeleteServingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.serving_id() != 0) {
    set_serving_id(from.serving_id());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void DeleteServingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteServingResponse::CopyFrom(const DeleteServingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServingResponse::IsInitialized() const {

  return true;
}

void DeleteServingResponse::Swap(DeleteServingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteServingResponse::InternalSwap(DeleteServingResponse* other) {
  std::swap(serving_id_, other->serving_id_);
  std::swap(is_success_, other->is_success_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteServingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteServingResponse_descriptor_;
  metadata.reflection = DeleteServingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteServingResponse

// optional int32 serving_id = 1;
void DeleteServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
 ::google::protobuf::int32 DeleteServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingResponse.serving_id)
  return serving_id_;
}
 void DeleteServingResponse::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingResponse.serving_id)
}

// optional int32 is_success = 2;
void DeleteServingResponse::clear_is_success() {
  is_success_ = 0;
}
 ::google::protobuf::int32 DeleteServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingResponse.is_success)
  return is_success_;
}
 void DeleteServingResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingResponse.is_success)
}

// optional string error_msg = 3;
void DeleteServingResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeleteServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteServingResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}
 void DeleteServingResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}
 void DeleteServingResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}
 ::std::string* DeleteServingResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeleteServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeleteServingResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)
