// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

namespace {

const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutorStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_status_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_status_2eproto() {
  protobuf_AddDesc_status_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "status.proto");
  GOOGLE_CHECK(file != NULL);
  HeartBeat_descriptor_ = file->message_type(0);
  static const int HeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, timestamp_),
  };
  HeartBeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeartBeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _is_default_instance_));
  TaskStatus_descriptor_ = file->message_type(1);
  static const int TaskStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, task_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, task_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, error_msg_),
  };
  TaskStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskStatus_descriptor_,
      TaskStatus::default_instance_,
      TaskStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _is_default_instance_));
  JobStatus_descriptor_ = file->message_type(2);
  static const int JobStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, job_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, job_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, tasks_),
  };
  JobStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JobStatus_descriptor_,
      JobStatus::default_instance_,
      JobStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(JobStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, _is_default_instance_));
  ExecutorStatus_descriptor_ = file->message_type(3);
  static const int ExecutorStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorStatus, heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorStatus, jobs_),
  };
  ExecutorStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExecutorStatus_descriptor_,
      ExecutorStatus::default_instance_,
      ExecutorStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExecutorStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorStatus, _is_default_instance_));
  StatusType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_status_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartBeat_descriptor_, &HeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskStatus_descriptor_, &TaskStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JobStatus_descriptor_, &JobStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExecutorStatus_descriptor_, &ExecutorStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_status_2eproto() {
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
  delete TaskStatus::default_instance_;
  delete TaskStatus_reflection_;
  delete JobStatus::default_instance_;
  delete JobStatus_reflection_;
  delete ExecutorStatus::default_instance_;
  delete ExecutorStatus_reflection_;
}

void protobuf_AddDesc_status_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_status_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014status.proto\022\032com.nus.dbsystem.falcon."
    "v0\032\037google/protobuf/timestamp.proto\":\n\tH"
    "eartBeat\022-\n\ttimestamp\030\001 \001(\0132\032.google.pro"
    "tobuf.Timestamp\"\202\001\n\nTaskStatus\022\017\n\007task_i"
    "d\030\001 \001(\005\022;\n\013task_status\030\002 \001(\0162&.com.nus.d"
    "bsystem.falcon.v0.StatusType\022\023\n\013task_res"
    "ult\030\003 \001(\t\022\021\n\terror_msg\030\004 \001(\t\"\265\001\n\tJobStat"
    "us\022\016\n\006job_id\030\001 \001(\005\022:\n\njob_status\030\002 \001(\0162&"
    ".com.nus.dbsystem.falcon.v0.StatusType\022\022"
    "\n\njob_result\030\003 \001(\t\022\021\n\terror_msg\030\004 \001(\t\0225\n"
    "\005tasks\030\005 \003(\0132&.com.nus.dbsystem.falcon.v"
    "0.TaskStatus\"\177\n\016ExecutorStatus\0228\n\theartb"
    "eat\030\001 \001(\0132%.com.nus.dbsystem.falcon.v0.H"
    "eartBeat\0223\n\004jobs\030\002 \003(\0132%.com.nus.dbsyste"
    "m.falcon.v0.JobStatus*C\n\nStatusType\022\017\n\013i"
    "nitialized\020\000\022\013\n\007running\020\001\022\013\n\007succeed\020\002\022\n"
    "\n\006failed\020\003b\006proto3", 658);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "status.proto", &protobuf_RegisterTypes);
  HeartBeat::default_instance_ = new HeartBeat();
  TaskStatus::default_instance_ = new TaskStatus();
  JobStatus::default_instance_ = new JobStatus();
  ExecutorStatus::default_instance_ = new ExecutorStatus();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  TaskStatus::default_instance_->InitAsDefaultInstance();
  JobStatus::default_instance_->InitAsDefaultInstance();
  ExecutorStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_status_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_status_2eproto {
  StaticDescriptorInitializer_status_2eproto() {
    protobuf_AddDesc_status_2eproto();
  }
} static_descriptor_initializer_status_2eproto_;
const ::google::protobuf::EnumDescriptor* StatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusType_descriptor_;
}
bool StatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeat::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeat::HeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.HeartBeat)
}

void HeartBeat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.HeartBeat)
}

void HeartBeat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = NULL;
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.HeartBeat)
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_status_2eproto();
  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New(::google::protobuf::Arena* arena) const {
  HeartBeat* n = new HeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Timestamp timestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.HeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.HeartBeat)
  return false;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  // optional .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.HeartBeat)
}

::google::protobuf::uint8* HeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  // optional .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->timestamp_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.HeartBeat)
  return target;
}

int HeartBeat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  int total_size = 0;

  // optional .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HeartBeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.HeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.HeartBeat)
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {

  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeat::InternalSwap(HeartBeat* other) {
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeat

// optional .google.protobuf.Timestamp timestamp = 1;
bool HeartBeat::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void HeartBeat::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& HeartBeat::timestamp() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::google::protobuf::Timestamp* HeartBeat::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* HeartBeat::release_timestamp() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void HeartBeat::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskStatus::kTaskIdFieldNumber;
const int TaskStatus::kTaskStatusFieldNumber;
const int TaskStatus::kTaskResultFieldNumber;
const int TaskStatus::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskStatus::TaskStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.TaskStatus)
}

void TaskStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TaskStatus::TaskStatus(const TaskStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.TaskStatus)
}

void TaskStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  task_id_ = 0;
  task_status_ = 0;
  task_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TaskStatus::~TaskStatus() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.TaskStatus)
  SharedDtor();
}

void TaskStatus::SharedDtor() {
  task_result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TaskStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_descriptor_;
}

const TaskStatus& TaskStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_status_2eproto();
  return *default_instance_;
}

TaskStatus* TaskStatus::default_instance_ = NULL;

TaskStatus* TaskStatus::New(::google::protobuf::Arena* arena) const {
  TaskStatus* n = new TaskStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.TaskStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(task_id_, task_status_);
  task_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TaskStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_task_status;
        break;
      }

      // optional .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
      case 2: {
        if (tag == 16) {
         parse_task_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_task_status(static_cast< ::com::nus::dbsystem::falcon::v0::StatusType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_task_result;
        break;
      }

      // optional string task_result = 3;
      case 3: {
        if (tag == 26) {
         parse_task_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->task_result().data(), this->task_result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.TaskStatus.task_result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.TaskStatus.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.TaskStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.TaskStatus)
  return false;
#undef DO_
}

void TaskStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  // optional int32 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // optional .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
  if (this->task_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->task_status(), output);
  }

  // optional string task_result = 3;
  if (this->task_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_result().data(), this->task_result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.TaskStatus.task_result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->task_result(), output);
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.TaskStatus.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.TaskStatus)
}

::google::protobuf::uint8* TaskStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  // optional int32 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // optional .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
  if (this->task_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->task_status(), target);
  }

  // optional string task_result = 3;
  if (this->task_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_result().data(), this->task_result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.TaskStatus.task_result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->task_result(), target);
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.TaskStatus.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.TaskStatus)
  return target;
}

int TaskStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  int total_size = 0;

  // optional int32 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_id());
  }

  // optional .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
  if (this->task_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_status());
  }

  // optional string task_result = 3;
  if (this->task_result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_result());
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TaskStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.TaskStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.TaskStatus)
    MergeFrom(*source);
  }
}

void TaskStatus::MergeFrom(const TaskStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.task_status() != 0) {
    set_task_status(from.task_status());
  }
  if (from.task_result().size() > 0) {

    task_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_result_);
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void TaskStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStatus::CopyFrom(const TaskStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.TaskStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatus::IsInitialized() const {

  return true;
}

void TaskStatus::Swap(TaskStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskStatus::InternalSwap(TaskStatus* other) {
  std::swap(task_id_, other->task_id_);
  std::swap(task_status_, other->task_status_);
  task_result_.Swap(&other->task_result_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskStatus_descriptor_;
  metadata.reflection = TaskStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskStatus

// optional int32 task_id = 1;
void TaskStatus::clear_task_id() {
  task_id_ = 0;
}
 ::google::protobuf::int32 TaskStatus::task_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.task_id)
  return task_id_;
}
 void TaskStatus::set_task_id(::google::protobuf::int32 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.task_id)
}

// optional .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
void TaskStatus::clear_task_status() {
  task_status_ = 0;
}
 ::com::nus::dbsystem::falcon::v0::StatusType TaskStatus::task_status() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.task_status)
  return static_cast< ::com::nus::dbsystem::falcon::v0::StatusType >(task_status_);
}
 void TaskStatus::set_task_status(::com::nus::dbsystem::falcon::v0::StatusType value) {
  
  task_status_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.task_status)
}

// optional string task_result = 3;
void TaskStatus::clear_task_result() {
  task_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TaskStatus::task_result() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
  return task_result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskStatus::set_task_result(const ::std::string& value) {
  
  task_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}
 void TaskStatus::set_task_result(const char* value) {
  
  task_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}
 void TaskStatus::set_task_result(const char* value, size_t size) {
  
  task_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}
 ::std::string* TaskStatus::mutable_task_result() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
  return task_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskStatus::release_task_result() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
  
  return task_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskStatus::set_allocated_task_result(::std::string* task_result) {
  if (task_result != NULL) {
    
  } else {
    
  }
  task_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_result);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}

// optional string error_msg = 4;
void TaskStatus::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TaskStatus::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskStatus::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}
 void TaskStatus::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}
 void TaskStatus::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}
 ::std::string* TaskStatus::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskStatus::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskStatus::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobStatus::kJobIdFieldNumber;
const int JobStatus::kJobStatusFieldNumber;
const int JobStatus::kJobResultFieldNumber;
const int JobStatus::kErrorMsgFieldNumber;
const int JobStatus::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobStatus::JobStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.JobStatus)
}

void JobStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

JobStatus::JobStatus(const JobStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.JobStatus)
}

void JobStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_id_ = 0;
  job_status_ = 0;
  job_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

JobStatus::~JobStatus() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.JobStatus)
  SharedDtor();
}

void JobStatus::SharedDtor() {
  job_result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void JobStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobStatus_descriptor_;
}

const JobStatus& JobStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_status_2eproto();
  return *default_instance_;
}

JobStatus* JobStatus::default_instance_ = NULL;

JobStatus* JobStatus::New(::google::protobuf::Arena* arena) const {
  JobStatus* n = new JobStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.JobStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(JobStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JobStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(job_id_, job_status_);
  job_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  tasks_.Clear();
}

bool JobStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.JobStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 job_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_job_status;
        break;
      }

      // optional .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
      case 2: {
        if (tag == 16) {
         parse_job_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_job_status(static_cast< ::com::nus::dbsystem::falcon::v0::StatusType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_job_result;
        break;
      }

      // optional string job_result = 3;
      case 3: {
        if (tag == 26) {
         parse_job_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job_result().data(), this->job_result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.JobStatus.job_result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.JobStatus.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tasks;
        break;
      }

      // repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 5;
      case 5: {
        if (tag == 42) {
         parse_tasks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_tasks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.JobStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.JobStatus)
  return false;
#undef DO_
}

void JobStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.JobStatus)
  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }

  // optional .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
  if (this->job_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->job_status(), output);
  }

  // optional string job_result = 3;
  if (this->job_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_result().data(), this->job_result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.JobStatus.job_result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->job_result(), output);
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.JobStatus.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_msg(), output);
  }

  // repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 5;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tasks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.JobStatus)
}

::google::protobuf::uint8* JobStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.JobStatus)
  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }

  // optional .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
  if (this->job_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->job_status(), target);
  }

  // optional string job_result = 3;
  if (this->job_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_result().data(), this->job_result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.JobStatus.job_result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->job_result(), target);
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.JobStatus.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  // repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 5;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->tasks(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.JobStatus)
  return target;
}

int JobStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.JobStatus)
  int total_size = 0;

  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job_id());
  }

  // optional .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
  if (this->job_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_status());
  }

  // optional string job_result = 3;
  if (this->job_result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job_result());
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 5;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.JobStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const JobStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JobStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.JobStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.JobStatus)
    MergeFrom(*source);
  }
}

void JobStatus::MergeFrom(const JobStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.JobStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tasks_.MergeFrom(from.tasks_);
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.job_status() != 0) {
    set_job_status(from.job_status());
  }
  if (from.job_result().size() > 0) {

    job_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_result_);
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void JobStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.JobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatus::CopyFrom(const JobStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.JobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatus::IsInitialized() const {

  return true;
}

void JobStatus::Swap(JobStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobStatus::InternalSwap(JobStatus* other) {
  std::swap(job_id_, other->job_id_);
  std::swap(job_status_, other->job_status_);
  job_result_.Swap(&other->job_result_);
  error_msg_.Swap(&other->error_msg_);
  tasks_.UnsafeArenaSwap(&other->tasks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobStatus_descriptor_;
  metadata.reflection = JobStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobStatus

// optional int32 job_id = 1;
void JobStatus::clear_job_id() {
  job_id_ = 0;
}
 ::google::protobuf::int32 JobStatus::job_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.job_id)
  return job_id_;
}
 void JobStatus::set_job_id(::google::protobuf::int32 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.job_id)
}

// optional .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
void JobStatus::clear_job_status() {
  job_status_ = 0;
}
 ::com::nus::dbsystem::falcon::v0::StatusType JobStatus::job_status() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.job_status)
  return static_cast< ::com::nus::dbsystem::falcon::v0::StatusType >(job_status_);
}
 void JobStatus::set_job_status(::com::nus::dbsystem::falcon::v0::StatusType value) {
  
  job_status_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.job_status)
}

// optional string job_result = 3;
void JobStatus::clear_job_result() {
  job_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& JobStatus::job_result() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
  return job_result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JobStatus::set_job_result(const ::std::string& value) {
  
  job_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}
 void JobStatus::set_job_result(const char* value) {
  
  job_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}
 void JobStatus::set_job_result(const char* value, size_t size) {
  
  job_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}
 ::std::string* JobStatus::mutable_job_result() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
  return job_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JobStatus::release_job_result() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
  
  return job_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JobStatus::set_allocated_job_result(::std::string* job_result) {
  if (job_result != NULL) {
    
  } else {
    
  }
  job_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_result);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}

// optional string error_msg = 4;
void JobStatus::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& JobStatus::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JobStatus::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}
 void JobStatus::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}
 void JobStatus::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}
 ::std::string* JobStatus::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JobStatus::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JobStatus::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}

// repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 5;
int JobStatus::tasks_size() const {
  return tasks_.size();
}
void JobStatus::clear_tasks() {
  tasks_.Clear();
}
const ::com::nus::dbsystem::falcon::v0::TaskStatus& JobStatus::tasks(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return tasks_.Get(index);
}
::com::nus::dbsystem::falcon::v0::TaskStatus* JobStatus::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return tasks_.Mutable(index);
}
::com::nus::dbsystem::falcon::v0::TaskStatus* JobStatus::add_tasks() {
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return tasks_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus >*
JobStatus::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return &tasks_;
}
const ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus >&
JobStatus::tasks() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return tasks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutorStatus::kHeartbeatFieldNumber;
const int ExecutorStatus::kJobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutorStatus::ExecutorStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.ExecutorStatus)
}

void ExecutorStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  heartbeat_ = const_cast< ::com::nus::dbsystem::falcon::v0::HeartBeat*>(&::com::nus::dbsystem::falcon::v0::HeartBeat::default_instance());
}

ExecutorStatus::ExecutorStatus(const ExecutorStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.ExecutorStatus)
}

void ExecutorStatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  heartbeat_ = NULL;
}

ExecutorStatus::~ExecutorStatus() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  SharedDtor();
}

void ExecutorStatus::SharedDtor() {
  if (this != default_instance_) {
    delete heartbeat_;
  }
}

void ExecutorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutorStatus_descriptor_;
}

const ExecutorStatus& ExecutorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_status_2eproto();
  return *default_instance_;
}

ExecutorStatus* ExecutorStatus::default_instance_ = NULL;

ExecutorStatus* ExecutorStatus::New(::google::protobuf::Arena* arena) const {
  ExecutorStatus* n = new ExecutorStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecutorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) delete heartbeat_;
  heartbeat_ = NULL;
  jobs_.Clear();
}

bool ExecutorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_jobs;
        break;
      }

      // repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
      case 2: {
        if (tag == 18) {
         parse_jobs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_jobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_jobs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_jobs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  return false;
#undef DO_
}

void ExecutorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  // optional .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
  if (this->has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->heartbeat_, output);
  }

  // repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
  for (unsigned int i = 0, n = this->jobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->jobs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.ExecutorStatus)
}

::google::protobuf::uint8* ExecutorStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  // optional .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
  if (this->has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->heartbeat_, false, target);
  }

  // repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
  for (unsigned int i = 0, n = this->jobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->jobs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  return target;
}

int ExecutorStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  int total_size = 0;

  // optional .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
  if (this->has_heartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heartbeat_);
  }

  // repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
  total_size += 1 * this->jobs_size();
  for (int i = 0; i < this->jobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jobs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutorStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExecutorStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutorStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.ExecutorStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.ExecutorStatus)
    MergeFrom(*source);
  }
}

void ExecutorStatus::MergeFrom(const ExecutorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  jobs_.MergeFrom(from.jobs_);
  if (from.has_heartbeat()) {
    mutable_heartbeat()->::com::nus::dbsystem::falcon::v0::HeartBeat::MergeFrom(from.heartbeat());
  }
}

void ExecutorStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorStatus::CopyFrom(const ExecutorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.ExecutorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorStatus::IsInitialized() const {

  return true;
}

void ExecutorStatus::Swap(ExecutorStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutorStatus::InternalSwap(ExecutorStatus* other) {
  std::swap(heartbeat_, other->heartbeat_);
  jobs_.UnsafeArenaSwap(&other->jobs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecutorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutorStatus_descriptor_;
  metadata.reflection = ExecutorStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecutorStatus

// optional .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
bool ExecutorStatus::has_heartbeat() const {
  return !_is_default_instance_ && heartbeat_ != NULL;
}
void ExecutorStatus::clear_heartbeat() {
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) delete heartbeat_;
  heartbeat_ = NULL;
}
const ::com::nus::dbsystem::falcon::v0::HeartBeat& ExecutorStatus::heartbeat() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
  return heartbeat_ != NULL ? *heartbeat_ : *default_instance_->heartbeat_;
}
::com::nus::dbsystem::falcon::v0::HeartBeat* ExecutorStatus::mutable_heartbeat() {
  
  if (heartbeat_ == NULL) {
    heartbeat_ = new ::com::nus::dbsystem::falcon::v0::HeartBeat;
  }
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
  return heartbeat_;
}
::com::nus::dbsystem::falcon::v0::HeartBeat* ExecutorStatus::release_heartbeat() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
  
  ::com::nus::dbsystem::falcon::v0::HeartBeat* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}
void ExecutorStatus::set_allocated_heartbeat(::com::nus::dbsystem::falcon::v0::HeartBeat* heartbeat) {
  delete heartbeat_;
  heartbeat_ = heartbeat;
  if (heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
}

// repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
int ExecutorStatus::jobs_size() const {
  return jobs_.size();
}
void ExecutorStatus::clear_jobs() {
  jobs_.Clear();
}
const ::com::nus::dbsystem::falcon::v0::JobStatus& ExecutorStatus::jobs(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return jobs_.Get(index);
}
::com::nus::dbsystem::falcon::v0::JobStatus* ExecutorStatus::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return jobs_.Mutable(index);
}
::com::nus::dbsystem::falcon::v0::JobStatus* ExecutorStatus::add_jobs() {
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return jobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus >*
ExecutorStatus::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return &jobs_;
}
const ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus >&
ExecutorStatus::jobs() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return jobs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)
