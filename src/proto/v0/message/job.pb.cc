// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: job.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "job.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

namespace {

const ::google::protobuf::Descriptor* ForwardJobRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardJobRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardJobResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardJobResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopJobRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopJobRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopJobResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopJobResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_job_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_job_2eproto() {
  protobuf_AddDesc_job_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "job.proto");
  GOOGLE_CHECK(file != NULL);
  ForwardJobRequest_descriptor_ = file->message_type(0);
  static const int ForwardJobRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobRequest, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobRequest, job_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobRequest, task_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobRequest, party_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobRequest, party_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobRequest, fl_setting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobRequest, job_desc_),
  };
  ForwardJobRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ForwardJobRequest_descriptor_,
      ForwardJobRequest::default_instance_,
      ForwardJobRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ForwardJobRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobRequest, _is_default_instance_));
  ForwardJobResponse_descriptor_ = file->message_type(1);
  static const int ForwardJobResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobResponse, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobResponse, error_msg_),
  };
  ForwardJobResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ForwardJobResponse_descriptor_,
      ForwardJobResponse::default_instance_,
      ForwardJobResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ForwardJobResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardJobResponse, _is_default_instance_));
  StopJobRequest_descriptor_ = file->message_type(2);
  static const int StopJobRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopJobRequest, job_id_),
  };
  StopJobRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopJobRequest_descriptor_,
      StopJobRequest::default_instance_,
      StopJobRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopJobRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopJobRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopJobRequest, _is_default_instance_));
  StopJobResponse_descriptor_ = file->message_type(3);
  static const int StopJobResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopJobResponse, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopJobResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopJobResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopJobResponse, error_msg_),
  };
  StopJobResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopJobResponse_descriptor_,
      StopJobResponse::default_instance_,
      StopJobResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopJobResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopJobResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopJobResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_job_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ForwardJobRequest_descriptor_, &ForwardJobRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ForwardJobResponse_descriptor_, &ForwardJobResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopJobRequest_descriptor_, &StopJobRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopJobResponse_descriptor_, &StopJobResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_job_2eproto() {
  delete ForwardJobRequest::default_instance_;
  delete ForwardJobRequest_reflection_;
  delete ForwardJobResponse::default_instance_;
  delete ForwardJobResponse_reflection_;
  delete StopJobRequest::default_instance_;
  delete StopJobRequest_reflection_;
  delete StopJobResponse::default_instance_;
  delete StopJobResponse_reflection_;
}

void protobuf_AddDesc_job_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_job_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fstruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tjob.proto\022\032com.nus.dbsystem.falcon.v0\032"
    "\034google/protobuf/struct.proto\"\253\001\n\021Forwar"
    "dJobRequest\022\016\n\006job_id\030\001 \001(\005\022\020\n\010job_name\030"
    "\002 \001(\t\022\020\n\010task_num\030\003 \001(\005\022\021\n\tparty_num\030\004 \001"
    "(\005\022\021\n\tparty_ids\030\005 \003(\005\022\022\n\nfl_setting\030\006 \001("
    "\005\022(\n\010job_desc\030\007 \001(\0132\026.google.protobuf.Va"
    "lue\"_\n\022ForwardJobResponse\022\016\n\006job_id\030\001 \001("
    "\005\022\022\n\nis_success\030\002 \001(\005\022\022\n\nerror_code\030\003 \001("
    "\005\022\021\n\terror_msg\030\004 \001(\t\" \n\016StopJobRequest\022\016"
    "\n\006job_id\030\001 \001(\005\"\\\n\017StopJobResponse\022\016\n\006job"
    "_id\030\001 \001(\005\022\022\n\nis_success\030\002 \001(\005\022\022\n\nerror_c"
    "ode\030\003 \001(\005\022\021\n\terror_msg\030\004 \001(\tb\006proto3", 476);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "job.proto", &protobuf_RegisterTypes);
  ForwardJobRequest::default_instance_ = new ForwardJobRequest();
  ForwardJobResponse::default_instance_ = new ForwardJobResponse();
  StopJobRequest::default_instance_ = new StopJobRequest();
  StopJobResponse::default_instance_ = new StopJobResponse();
  ForwardJobRequest::default_instance_->InitAsDefaultInstance();
  ForwardJobResponse::default_instance_->InitAsDefaultInstance();
  StopJobRequest::default_instance_->InitAsDefaultInstance();
  StopJobResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_job_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_job_2eproto {
  StaticDescriptorInitializer_job_2eproto() {
    protobuf_AddDesc_job_2eproto();
  }
} static_descriptor_initializer_job_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardJobRequest::kJobIdFieldNumber;
const int ForwardJobRequest::kJobNameFieldNumber;
const int ForwardJobRequest::kTaskNumFieldNumber;
const int ForwardJobRequest::kPartyNumFieldNumber;
const int ForwardJobRequest::kPartyIdsFieldNumber;
const int ForwardJobRequest::kFlSettingFieldNumber;
const int ForwardJobRequest::kJobDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardJobRequest::ForwardJobRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
}

void ForwardJobRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  job_desc_ = const_cast< ::google::protobuf::Value*>(&::google::protobuf::Value::default_instance());
}

ForwardJobRequest::ForwardJobRequest(const ForwardJobRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
}

void ForwardJobRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_id_ = 0;
  job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_num_ = 0;
  party_num_ = 0;
  fl_setting_ = 0;
  job_desc_ = NULL;
}

ForwardJobRequest::~ForwardJobRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  SharedDtor();
}

void ForwardJobRequest::SharedDtor() {
  job_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete job_desc_;
  }
}

void ForwardJobRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardJobRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardJobRequest_descriptor_;
}

const ForwardJobRequest& ForwardJobRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

ForwardJobRequest* ForwardJobRequest::default_instance_ = NULL;

ForwardJobRequest* ForwardJobRequest::New(::google::protobuf::Arena* arena) const {
  ForwardJobRequest* n = new ForwardJobRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ForwardJobRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ForwardJobRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(job_id_, task_num_);
  ZR_(party_num_, fl_setting_);
  job_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && job_desc_ != NULL) delete job_desc_;
  job_desc_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  party_ids_.Clear();
}

bool ForwardJobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 job_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_job_name;
        break;
      }

      // optional string job_name = 2;
      case 2: {
        if (tag == 18) {
         parse_job_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job_name().data(), this->job_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_task_num;
        break;
      }

      // optional int32 task_num = 3;
      case 3: {
        if (tag == 24) {
         parse_task_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_party_num;
        break;
      }

      // optional int32 party_num = 4;
      case 4: {
        if (tag == 32) {
         parse_party_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &party_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_party_ids;
        break;
      }

      // repeated int32 party_ids = 5;
      case 5: {
        if (tag == 42) {
         parse_party_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_party_ids())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_party_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fl_setting;
        break;
      }

      // optional int32 fl_setting = 6;
      case 6: {
        if (tag == 48) {
         parse_fl_setting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fl_setting_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_job_desc;
        break;
      }

      // optional .google.protobuf.Value job_desc = 7;
      case 7: {
        if (tag == 58) {
         parse_job_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  return false;
#undef DO_
}

void ForwardJobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }

  // optional string job_name = 2;
  if (this->job_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_name().data(), this->job_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->job_name(), output);
  }

  // optional int32 task_num = 3;
  if (this->task_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_num(), output);
  }

  // optional int32 party_num = 4;
  if (this->party_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->party_num(), output);
  }

  // repeated int32 party_ids = 5;
  if (this->party_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_party_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->party_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->party_ids(i), output);
  }

  // optional int32 fl_setting = 6;
  if (this->fl_setting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fl_setting(), output);
  }

  // optional .google.protobuf.Value job_desc = 7;
  if (this->has_job_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->job_desc_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
}

::google::protobuf::uint8* ForwardJobRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }

  // optional string job_name = 2;
  if (this->job_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_name().data(), this->job_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->job_name(), target);
  }

  // optional int32 task_num = 3;
  if (this->task_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_num(), target);
  }

  // optional int32 party_num = 4;
  if (this->party_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->party_num(), target);
  }

  // repeated int32 party_ids = 5;
  if (this->party_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _party_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->party_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->party_ids(i), target);
  }

  // optional int32 fl_setting = 6;
  if (this->fl_setting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fl_setting(), target);
  }

  // optional .google.protobuf.Value job_desc = 7;
  if (this->has_job_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->job_desc_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  return target;
}

int ForwardJobRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  int total_size = 0;

  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job_id());
  }

  // optional string job_name = 2;
  if (this->job_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job_name());
  }

  // optional int32 task_num = 3;
  if (this->task_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_num());
  }

  // optional int32 party_num = 4;
  if (this->party_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->party_num());
  }

  // optional int32 fl_setting = 6;
  if (this->fl_setting() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fl_setting());
  }

  // optional .google.protobuf.Value job_desc = 7;
  if (this->has_job_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_desc_);
  }

  // repeated int32 party_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->party_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->party_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _party_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardJobRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ForwardJobRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardJobRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
    MergeFrom(*source);
  }
}

void ForwardJobRequest::MergeFrom(const ForwardJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  party_ids_.MergeFrom(from.party_ids_);
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.job_name().size() > 0) {

    job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_name_);
  }
  if (from.task_num() != 0) {
    set_task_num(from.task_num());
  }
  if (from.party_num() != 0) {
    set_party_num(from.party_num());
  }
  if (from.fl_setting() != 0) {
    set_fl_setting(from.fl_setting());
  }
  if (from.has_job_desc()) {
    mutable_job_desc()->::google::protobuf::Value::MergeFrom(from.job_desc());
  }
}

void ForwardJobRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardJobRequest::CopyFrom(const ForwardJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.ForwardJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardJobRequest::IsInitialized() const {

  return true;
}

void ForwardJobRequest::Swap(ForwardJobRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardJobRequest::InternalSwap(ForwardJobRequest* other) {
  std::swap(job_id_, other->job_id_);
  job_name_.Swap(&other->job_name_);
  std::swap(task_num_, other->task_num_);
  std::swap(party_num_, other->party_num_);
  party_ids_.UnsafeArenaSwap(&other->party_ids_);
  std::swap(fl_setting_, other->fl_setting_);
  std::swap(job_desc_, other->job_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardJobRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardJobRequest_descriptor_;
  metadata.reflection = ForwardJobRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardJobRequest

// optional int32 job_id = 1;
void ForwardJobRequest::clear_job_id() {
  job_id_ = 0;
}
 ::google::protobuf::int32 ForwardJobRequest::job_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_id)
  return job_id_;
}
 void ForwardJobRequest::set_job_id(::google::protobuf::int32 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_id)
}

// optional string job_name = 2;
void ForwardJobRequest::clear_job_name() {
  job_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ForwardJobRequest::job_name() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_name)
  return job_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForwardJobRequest::set_job_name(const ::std::string& value) {
  
  job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_name)
}
 void ForwardJobRequest::set_job_name(const char* value) {
  
  job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_name)
}
 void ForwardJobRequest::set_job_name(const char* value, size_t size) {
  
  job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_name)
}
 ::std::string* ForwardJobRequest::mutable_job_name() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_name)
  return job_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ForwardJobRequest::release_job_name() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_name)
  
  return job_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForwardJobRequest::set_allocated_job_name(::std::string* job_name) {
  if (job_name != NULL) {
    
  } else {
    
  }
  job_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_name);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_name)
}

// optional int32 task_num = 3;
void ForwardJobRequest::clear_task_num() {
  task_num_ = 0;
}
 ::google::protobuf::int32 ForwardJobRequest::task_num() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ForwardJobRequest.task_num)
  return task_num_;
}
 void ForwardJobRequest::set_task_num(::google::protobuf::int32 value) {
  
  task_num_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ForwardJobRequest.task_num)
}

// optional int32 party_num = 4;
void ForwardJobRequest::clear_party_num() {
  party_num_ = 0;
}
 ::google::protobuf::int32 ForwardJobRequest::party_num() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ForwardJobRequest.party_num)
  return party_num_;
}
 void ForwardJobRequest::set_party_num(::google::protobuf::int32 value) {
  
  party_num_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ForwardJobRequest.party_num)
}

// repeated int32 party_ids = 5;
int ForwardJobRequest::party_ids_size() const {
  return party_ids_.size();
}
void ForwardJobRequest::clear_party_ids() {
  party_ids_.Clear();
}
 ::google::protobuf::int32 ForwardJobRequest::party_ids(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ForwardJobRequest.party_ids)
  return party_ids_.Get(index);
}
 void ForwardJobRequest::set_party_ids(int index, ::google::protobuf::int32 value) {
  party_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ForwardJobRequest.party_ids)
}
 void ForwardJobRequest::add_party_ids(::google::protobuf::int32 value) {
  party_ids_.Add(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.ForwardJobRequest.party_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ForwardJobRequest::party_ids() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.ForwardJobRequest.party_ids)
  return party_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ForwardJobRequest::mutable_party_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.ForwardJobRequest.party_ids)
  return &party_ids_;
}

// optional int32 fl_setting = 6;
void ForwardJobRequest::clear_fl_setting() {
  fl_setting_ = 0;
}
 ::google::protobuf::int32 ForwardJobRequest::fl_setting() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ForwardJobRequest.fl_setting)
  return fl_setting_;
}
 void ForwardJobRequest::set_fl_setting(::google::protobuf::int32 value) {
  
  fl_setting_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ForwardJobRequest.fl_setting)
}

// optional .google.protobuf.Value job_desc = 7;
bool ForwardJobRequest::has_job_desc() const {
  return !_is_default_instance_ && job_desc_ != NULL;
}
void ForwardJobRequest::clear_job_desc() {
  if (GetArenaNoVirtual() == NULL && job_desc_ != NULL) delete job_desc_;
  job_desc_ = NULL;
}
const ::google::protobuf::Value& ForwardJobRequest::job_desc() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_desc)
  return job_desc_ != NULL ? *job_desc_ : *default_instance_->job_desc_;
}
::google::protobuf::Value* ForwardJobRequest::mutable_job_desc() {
  
  if (job_desc_ == NULL) {
    job_desc_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_desc)
  return job_desc_;
}
::google::protobuf::Value* ForwardJobRequest::release_job_desc() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_desc)
  
  ::google::protobuf::Value* temp = job_desc_;
  job_desc_ = NULL;
  return temp;
}
void ForwardJobRequest::set_allocated_job_desc(::google::protobuf::Value* job_desc) {
  delete job_desc_;
  job_desc_ = job_desc;
  if (job_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.ForwardJobRequest.job_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardJobResponse::kJobIdFieldNumber;
const int ForwardJobResponse::kIsSuccessFieldNumber;
const int ForwardJobResponse::kErrorCodeFieldNumber;
const int ForwardJobResponse::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardJobResponse::ForwardJobResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
}

void ForwardJobResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ForwardJobResponse::ForwardJobResponse(const ForwardJobResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
}

void ForwardJobResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_id_ = 0;
  is_success_ = 0;
  error_code_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ForwardJobResponse::~ForwardJobResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  SharedDtor();
}

void ForwardJobResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ForwardJobResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardJobResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardJobResponse_descriptor_;
}

const ForwardJobResponse& ForwardJobResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

ForwardJobResponse* ForwardJobResponse::default_instance_ = NULL;

ForwardJobResponse* ForwardJobResponse::New(::google::protobuf::Arena* arena) const {
  ForwardJobResponse* n = new ForwardJobResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ForwardJobResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ForwardJobResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(job_id_, is_success_);
  error_code_ = 0;
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ForwardJobResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 job_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_success;
        break;
      }

      // optional int32 is_success = 2;
      case 2: {
        if (tag == 16) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 3;
      case 3: {
        if (tag == 24) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  return false;
#undef DO_
}

void ForwardJobResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_success(), output);
  }

  // optional int32 error_code = 3;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error_code(), output);
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
}

::google::protobuf::uint8* ForwardJobResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_success(), target);
  }

  // optional int32 error_code = 3;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error_code(), target);
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  return target;
}

int ForwardJobResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  int total_size = 0;

  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job_id());
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_success());
  }

  // optional int32 error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardJobResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ForwardJobResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardJobResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
    MergeFrom(*source);
  }
}

void ForwardJobResponse::MergeFrom(const ForwardJobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void ForwardJobResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardJobResponse::CopyFrom(const ForwardJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.ForwardJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardJobResponse::IsInitialized() const {

  return true;
}

void ForwardJobResponse::Swap(ForwardJobResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardJobResponse::InternalSwap(ForwardJobResponse* other) {
  std::swap(job_id_, other->job_id_);
  std::swap(is_success_, other->is_success_);
  std::swap(error_code_, other->error_code_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardJobResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardJobResponse_descriptor_;
  metadata.reflection = ForwardJobResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardJobResponse

// optional int32 job_id = 1;
void ForwardJobResponse::clear_job_id() {
  job_id_ = 0;
}
 ::google::protobuf::int32 ForwardJobResponse::job_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ForwardJobResponse.job_id)
  return job_id_;
}
 void ForwardJobResponse::set_job_id(::google::protobuf::int32 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ForwardJobResponse.job_id)
}

// optional int32 is_success = 2;
void ForwardJobResponse::clear_is_success() {
  is_success_ = 0;
}
 ::google::protobuf::int32 ForwardJobResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ForwardJobResponse.is_success)
  return is_success_;
}
 void ForwardJobResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ForwardJobResponse.is_success)
}

// optional int32 error_code = 3;
void ForwardJobResponse::clear_error_code() {
  error_code_ = 0;
}
 ::google::protobuf::int32 ForwardJobResponse::error_code() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_code)
  return error_code_;
}
 void ForwardJobResponse::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_code)
}

// optional string error_msg = 4;
void ForwardJobResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ForwardJobResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForwardJobResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_msg)
}
 void ForwardJobResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_msg)
}
 void ForwardJobResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_msg)
}
 ::std::string* ForwardJobResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ForwardJobResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForwardJobResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.ForwardJobResponse.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopJobRequest::kJobIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopJobRequest::StopJobRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.StopJobRequest)
}

void StopJobRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StopJobRequest::StopJobRequest(const StopJobRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.StopJobRequest)
}

void StopJobRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  job_id_ = 0;
}

StopJobRequest::~StopJobRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.StopJobRequest)
  SharedDtor();
}

void StopJobRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopJobRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopJobRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopJobRequest_descriptor_;
}

const StopJobRequest& StopJobRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

StopJobRequest* StopJobRequest::default_instance_ = NULL;

StopJobRequest* StopJobRequest::New(::google::protobuf::Arena* arena) const {
  StopJobRequest* n = new StopJobRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.StopJobRequest)
  job_id_ = 0;
}

bool StopJobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.StopJobRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 job_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.StopJobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.StopJobRequest)
  return false;
#undef DO_
}

void StopJobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.StopJobRequest)
  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.StopJobRequest)
}

::google::protobuf::uint8* StopJobRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.StopJobRequest)
  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.StopJobRequest)
  return target;
}

int StopJobRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.StopJobRequest)
  int total_size = 0;

  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopJobRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.StopJobRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopJobRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopJobRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.StopJobRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.StopJobRequest)
    MergeFrom(*source);
  }
}

void StopJobRequest::MergeFrom(const StopJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.StopJobRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
}

void StopJobRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.StopJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopJobRequest::CopyFrom(const StopJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.StopJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopJobRequest::IsInitialized() const {

  return true;
}

void StopJobRequest::Swap(StopJobRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopJobRequest::InternalSwap(StopJobRequest* other) {
  std::swap(job_id_, other->job_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopJobRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopJobRequest_descriptor_;
  metadata.reflection = StopJobRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopJobRequest

// optional int32 job_id = 1;
void StopJobRequest::clear_job_id() {
  job_id_ = 0;
}
 ::google::protobuf::int32 StopJobRequest::job_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.StopJobRequest.job_id)
  return job_id_;
}
 void StopJobRequest::set_job_id(::google::protobuf::int32 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.StopJobRequest.job_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopJobResponse::kJobIdFieldNumber;
const int StopJobResponse::kIsSuccessFieldNumber;
const int StopJobResponse::kErrorCodeFieldNumber;
const int StopJobResponse::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopJobResponse::StopJobResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.StopJobResponse)
}

void StopJobResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StopJobResponse::StopJobResponse(const StopJobResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.StopJobResponse)
}

void StopJobResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_id_ = 0;
  is_success_ = 0;
  error_code_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StopJobResponse::~StopJobResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.StopJobResponse)
  SharedDtor();
}

void StopJobResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StopJobResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopJobResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopJobResponse_descriptor_;
}

const StopJobResponse& StopJobResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

StopJobResponse* StopJobResponse::default_instance_ = NULL;

StopJobResponse* StopJobResponse::New(::google::protobuf::Arena* arena) const {
  StopJobResponse* n = new StopJobResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopJobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.StopJobResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StopJobResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StopJobResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(job_id_, is_success_);
  error_code_ = 0;
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool StopJobResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.StopJobResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 job_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_success;
        break;
      }

      // optional int32 is_success = 2;
      case 2: {
        if (tag == 16) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 3;
      case 3: {
        if (tag == 24) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.StopJobResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.StopJobResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.StopJobResponse)
  return false;
#undef DO_
}

void StopJobResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.StopJobResponse)
  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_success(), output);
  }

  // optional int32 error_code = 3;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error_code(), output);
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.StopJobResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.StopJobResponse)
}

::google::protobuf::uint8* StopJobResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.StopJobResponse)
  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_success(), target);
  }

  // optional int32 error_code = 3;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error_code(), target);
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.StopJobResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.StopJobResponse)
  return target;
}

int StopJobResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.StopJobResponse)
  int total_size = 0;

  // optional int32 job_id = 1;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job_id());
  }

  // optional int32 is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_success());
  }

  // optional int32 error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // optional string error_msg = 4;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopJobResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.StopJobResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopJobResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopJobResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.StopJobResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.StopJobResponse)
    MergeFrom(*source);
  }
}

void StopJobResponse::MergeFrom(const StopJobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.StopJobResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void StopJobResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.StopJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopJobResponse::CopyFrom(const StopJobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.StopJobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopJobResponse::IsInitialized() const {

  return true;
}

void StopJobResponse::Swap(StopJobResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopJobResponse::InternalSwap(StopJobResponse* other) {
  std::swap(job_id_, other->job_id_);
  std::swap(is_success_, other->is_success_);
  std::swap(error_code_, other->error_code_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopJobResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopJobResponse_descriptor_;
  metadata.reflection = StopJobResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopJobResponse

// optional int32 job_id = 1;
void StopJobResponse::clear_job_id() {
  job_id_ = 0;
}
 ::google::protobuf::int32 StopJobResponse::job_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.StopJobResponse.job_id)
  return job_id_;
}
 void StopJobResponse::set_job_id(::google::protobuf::int32 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.StopJobResponse.job_id)
}

// optional int32 is_success = 2;
void StopJobResponse::clear_is_success() {
  is_success_ = 0;
}
 ::google::protobuf::int32 StopJobResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.StopJobResponse.is_success)
  return is_success_;
}
 void StopJobResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.StopJobResponse.is_success)
}

// optional int32 error_code = 3;
void StopJobResponse::clear_error_code() {
  error_code_ = 0;
}
 ::google::protobuf::int32 StopJobResponse::error_code() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.StopJobResponse.error_code)
  return error_code_;
}
 void StopJobResponse::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.StopJobResponse.error_code)
}

// optional string error_msg = 4;
void StopJobResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StopJobResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.StopJobResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopJobResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.StopJobResponse.error_msg)
}
 void StopJobResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.StopJobResponse.error_msg)
}
 void StopJobResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.StopJobResponse.error_msg)
}
 ::std::string* StopJobResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.StopJobResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopJobResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.StopJobResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopJobResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.StopJobResponse.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)
