// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serving.proto

#ifndef PROTOBUF_serving_2eproto__INCLUDED
#define PROTOBUF_serving_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_serving_2eproto();
void protobuf_AssignDesc_serving_2eproto();
void protobuf_ShutdownFile_serving_2eproto();

class CreateServingRequest;
class CreateServingResponse;
class DeleteServingRequest;
class DeleteServingResponse;
class DisableServingRequest;
class DisableServingResponse;
class EnableServingRequest;
class EnableServingResponse;
class QueryServingRequest;
class QueryServingResponse;
class ServingInfo;
class UpdateServingRequest;
class UpdateServingResponse;

enum ServingStatus {
  created = 0,
  online = 1,
  offline = 2,
  ServingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServingStatus_IsValid(int value);
const ServingStatus ServingStatus_MIN = created;
const ServingStatus ServingStatus_MAX = offline;
const int ServingStatus_ARRAYSIZE = ServingStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServingStatus_descriptor();
inline const ::std::string& ServingStatus_Name(ServingStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServingStatus_descriptor(), value);
}
inline bool ServingStatus_Parse(
    const ::std::string& name, ServingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServingStatus>(
    ServingStatus_descriptor(), name, value);
}
// ===================================================================

class CreateServingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.CreateServingRequest) */ {
 public:
  CreateServingRequest();
  virtual ~CreateServingRequest();

  CreateServingRequest(const CreateServingRequest& from);

  inline CreateServingRequest& operator=(const CreateServingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateServingRequest& default_instance();

  void Swap(CreateServingRequest* other);

  // implements Message ----------------------------------------------

  inline CreateServingRequest* New() const { return New(NULL); }

  CreateServingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateServingRequest& from);
  void MergeFrom(const CreateServingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateServingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serving_id = 1;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id() const;
  void set_serving_id(::google::protobuf::int32 value);

  // optional string serving_name = 2;
  void clear_serving_name();
  static const int kServingNameFieldNumber = 2;
  const ::std::string& serving_name() const;
  void set_serving_name(const ::std::string& value);
  void set_serving_name(const char* value);
  void set_serving_name(const char* value, size_t size);
  ::std::string* mutable_serving_name();
  ::std::string* release_serving_name();
  void set_allocated_serving_name(::std::string* serving_name);

  // optional int32 model_id = 3;
  void clear_model_id();
  static const int kModelIdFieldNumber = 3;
  ::google::protobuf::int32 model_id() const;
  void set_model_id(::google::protobuf::int32 value);

  // optional int32 party_id = 4;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 4;
  ::google::protobuf::int32 party_id() const;
  void set_party_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.CreateServingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr serving_name_;
  ::google::protobuf::int32 serving_id_;
  ::google::protobuf::int32 model_id_;
  ::google::protobuf::int32 party_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static CreateServingRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateServingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.CreateServingResponse) */ {
 public:
  CreateServingResponse();
  virtual ~CreateServingResponse();

  CreateServingResponse(const CreateServingResponse& from);

  inline CreateServingResponse& operator=(const CreateServingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateServingResponse& default_instance();

  void Swap(CreateServingResponse* other);

  // implements Message ----------------------------------------------

  inline CreateServingResponse* New() const { return New(NULL); }

  CreateServingResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateServingResponse& from);
  void MergeFrom(const CreateServingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateServingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serving_id = 1;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id() const;
  void set_serving_id(::google::protobuf::int32 value);

  // optional int32 is_success = 2;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 2;
  ::google::protobuf::int32 is_success() const;
  void set_is_success(::google::protobuf::int32 value);

  // optional string error_msg = 3;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.CreateServingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 serving_id_;
  ::google::protobuf::int32 is_success_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static CreateServingResponse* default_instance_;
};
// -------------------------------------------------------------------

class EnableServingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.EnableServingRequest) */ {
 public:
  EnableServingRequest();
  virtual ~EnableServingRequest();

  EnableServingRequest(const EnableServingRequest& from);

  inline EnableServingRequest& operator=(const EnableServingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableServingRequest& default_instance();

  void Swap(EnableServingRequest* other);

  // implements Message ----------------------------------------------

  inline EnableServingRequest* New() const { return New(NULL); }

  EnableServingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnableServingRequest& from);
  void MergeFrom(const EnableServingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableServingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serving_id = 1;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id() const;
  void set_serving_id(::google::protobuf::int32 value);

  // optional int32 model_id = 2;
  void clear_model_id();
  static const int kModelIdFieldNumber = 2;
  ::google::protobuf::int32 model_id() const;
  void set_model_id(::google::protobuf::int32 value);

  // optional int32 party_id = 3;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 3;
  ::google::protobuf::int32 party_id() const;
  void set_party_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.EnableServingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 serving_id_;
  ::google::protobuf::int32 model_id_;
  ::google::protobuf::int32 party_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static EnableServingRequest* default_instance_;
};
// -------------------------------------------------------------------

class EnableServingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.EnableServingResponse) */ {
 public:
  EnableServingResponse();
  virtual ~EnableServingResponse();

  EnableServingResponse(const EnableServingResponse& from);

  inline EnableServingResponse& operator=(const EnableServingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableServingResponse& default_instance();

  void Swap(EnableServingResponse* other);

  // implements Message ----------------------------------------------

  inline EnableServingResponse* New() const { return New(NULL); }

  EnableServingResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnableServingResponse& from);
  void MergeFrom(const EnableServingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableServingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serving_id = 1;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id() const;
  void set_serving_id(::google::protobuf::int32 value);

  // optional int32 is_success = 2;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 2;
  ::google::protobuf::int32 is_success() const;
  void set_is_success(::google::protobuf::int32 value);

  // optional string error_msg = 3;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.EnableServingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 serving_id_;
  ::google::protobuf::int32 is_success_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static EnableServingResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateServingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.UpdateServingRequest) */ {
 public:
  UpdateServingRequest();
  virtual ~UpdateServingRequest();

  UpdateServingRequest(const UpdateServingRequest& from);

  inline UpdateServingRequest& operator=(const UpdateServingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateServingRequest& default_instance();

  void Swap(UpdateServingRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateServingRequest* New() const { return New(NULL); }

  UpdateServingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateServingRequest& from);
  void MergeFrom(const UpdateServingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateServingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serving_id = 1;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id() const;
  void set_serving_id(::google::protobuf::int32 value);

  // optional int32 new_model_id = 2;
  void clear_new_model_id();
  static const int kNewModelIdFieldNumber = 2;
  ::google::protobuf::int32 new_model_id() const;
  void set_new_model_id(::google::protobuf::int32 value);

  // optional int32 party_id = 3;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 3;
  ::google::protobuf::int32 party_id() const;
  void set_party_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.UpdateServingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 serving_id_;
  ::google::protobuf::int32 new_model_id_;
  ::google::protobuf::int32 party_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static UpdateServingRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateServingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.UpdateServingResponse) */ {
 public:
  UpdateServingResponse();
  virtual ~UpdateServingResponse();

  UpdateServingResponse(const UpdateServingResponse& from);

  inline UpdateServingResponse& operator=(const UpdateServingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateServingResponse& default_instance();

  void Swap(UpdateServingResponse* other);

  // implements Message ----------------------------------------------

  inline UpdateServingResponse* New() const { return New(NULL); }

  UpdateServingResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateServingResponse& from);
  void MergeFrom(const UpdateServingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateServingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serving_id = 1;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id() const;
  void set_serving_id(::google::protobuf::int32 value);

  // optional int32 is_success = 2;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 2;
  ::google::protobuf::int32 is_success() const;
  void set_is_success(::google::protobuf::int32 value);

  // optional string error_msg = 3;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.UpdateServingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 serving_id_;
  ::google::protobuf::int32 is_success_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static UpdateServingResponse* default_instance_;
};
// -------------------------------------------------------------------

class QueryServingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.QueryServingRequest) */ {
 public:
  QueryServingRequest();
  virtual ~QueryServingRequest();

  QueryServingRequest(const QueryServingRequest& from);

  inline QueryServingRequest& operator=(const QueryServingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryServingRequest& default_instance();

  void Swap(QueryServingRequest* other);

  // implements Message ----------------------------------------------

  inline QueryServingRequest* New() const { return New(NULL); }

  QueryServingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryServingRequest& from);
  void MergeFrom(const QueryServingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryServingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 serving_id = 1;
  int serving_id_size() const;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id(int index) const;
  void set_serving_id(int index, ::google::protobuf::int32 value);
  void add_serving_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      serving_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_serving_id();

  // optional int32 party_id = 2;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 2;
  ::google::protobuf::int32 party_id() const;
  void set_party_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.QueryServingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > serving_id_;
  mutable int _serving_id_cached_byte_size_;
  ::google::protobuf::int32 party_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static QueryServingRequest* default_instance_;
};
// -------------------------------------------------------------------

class ServingInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.ServingInfo) */ {
 public:
  ServingInfo();
  virtual ~ServingInfo();

  ServingInfo(const ServingInfo& from);

  inline ServingInfo& operator=(const ServingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServingInfo& default_instance();

  void Swap(ServingInfo* other);

  // implements Message ----------------------------------------------

  inline ServingInfo* New() const { return New(NULL); }

  ServingInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServingInfo& from);
  void MergeFrom(const ServingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serving_id = 1;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id() const;
  void set_serving_id(::google::protobuf::int32 value);

  // optional int32 served_model_id = 2;
  void clear_served_model_id();
  static const int kServedModelIdFieldNumber = 2;
  ::google::protobuf::int32 served_model_id() const;
  void set_served_model_id(::google::protobuf::int32 value);

  // optional .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::com::nus::dbsystem::falcon::v0::ServingStatus status() const;
  void set_status(::com::nus::dbsystem::falcon::v0::ServingStatus value);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.ServingInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 serving_id_;
  ::google::protobuf::int32 served_model_id_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static ServingInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryServingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.QueryServingResponse) */ {
 public:
  QueryServingResponse();
  virtual ~QueryServingResponse();

  QueryServingResponse(const QueryServingResponse& from);

  inline QueryServingResponse& operator=(const QueryServingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryServingResponse& default_instance();

  void Swap(QueryServingResponse* other);

  // implements Message ----------------------------------------------

  inline QueryServingResponse* New() const { return New(NULL); }

  QueryServingResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryServingResponse& from);
  void MergeFrom(const QueryServingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryServingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
  int serving_infos_size() const;
  void clear_serving_infos();
  static const int kServingInfosFieldNumber = 1;
  const ::com::nus::dbsystem::falcon::v0::ServingInfo& serving_infos(int index) const;
  ::com::nus::dbsystem::falcon::v0::ServingInfo* mutable_serving_infos(int index);
  ::com::nus::dbsystem::falcon::v0::ServingInfo* add_serving_infos();
  ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo >*
      mutable_serving_infos();
  const ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo >&
      serving_infos() const;

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.QueryServingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo > serving_infos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static QueryServingResponse* default_instance_;
};
// -------------------------------------------------------------------

class DisableServingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.DisableServingRequest) */ {
 public:
  DisableServingRequest();
  virtual ~DisableServingRequest();

  DisableServingRequest(const DisableServingRequest& from);

  inline DisableServingRequest& operator=(const DisableServingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisableServingRequest& default_instance();

  void Swap(DisableServingRequest* other);

  // implements Message ----------------------------------------------

  inline DisableServingRequest* New() const { return New(NULL); }

  DisableServingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisableServingRequest& from);
  void MergeFrom(const DisableServingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableServingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serving_id = 1;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id() const;
  void set_serving_id(::google::protobuf::int32 value);

  // optional int32 party_id = 2;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 2;
  ::google::protobuf::int32 party_id() const;
  void set_party_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.DisableServingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 serving_id_;
  ::google::protobuf::int32 party_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static DisableServingRequest* default_instance_;
};
// -------------------------------------------------------------------

class DisableServingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.DisableServingResponse) */ {
 public:
  DisableServingResponse();
  virtual ~DisableServingResponse();

  DisableServingResponse(const DisableServingResponse& from);

  inline DisableServingResponse& operator=(const DisableServingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisableServingResponse& default_instance();

  void Swap(DisableServingResponse* other);

  // implements Message ----------------------------------------------

  inline DisableServingResponse* New() const { return New(NULL); }

  DisableServingResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisableServingResponse& from);
  void MergeFrom(const DisableServingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableServingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serving_id = 1;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id() const;
  void set_serving_id(::google::protobuf::int32 value);

  // optional int32 is_success = 2;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 2;
  ::google::protobuf::int32 is_success() const;
  void set_is_success(::google::protobuf::int32 value);

  // optional string error_msg = 3;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.DisableServingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 serving_id_;
  ::google::protobuf::int32 is_success_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static DisableServingResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteServingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.DeleteServingRequest) */ {
 public:
  DeleteServingRequest();
  virtual ~DeleteServingRequest();

  DeleteServingRequest(const DeleteServingRequest& from);

  inline DeleteServingRequest& operator=(const DeleteServingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteServingRequest& default_instance();

  void Swap(DeleteServingRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteServingRequest* New() const { return New(NULL); }

  DeleteServingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteServingRequest& from);
  void MergeFrom(const DeleteServingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteServingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serving_id = 1;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id() const;
  void set_serving_id(::google::protobuf::int32 value);

  // optional int32 party_id = 2;
  void clear_party_id();
  static const int kPartyIdFieldNumber = 2;
  ::google::protobuf::int32 party_id() const;
  void set_party_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.DeleteServingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 serving_id_;
  ::google::protobuf::int32 party_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static DeleteServingRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteServingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.DeleteServingResponse) */ {
 public:
  DeleteServingResponse();
  virtual ~DeleteServingResponse();

  DeleteServingResponse(const DeleteServingResponse& from);

  inline DeleteServingResponse& operator=(const DeleteServingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteServingResponse& default_instance();

  void Swap(DeleteServingResponse* other);

  // implements Message ----------------------------------------------

  inline DeleteServingResponse* New() const { return New(NULL); }

  DeleteServingResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteServingResponse& from);
  void MergeFrom(const DeleteServingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteServingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serving_id = 1;
  void clear_serving_id();
  static const int kServingIdFieldNumber = 1;
  ::google::protobuf::int32 serving_id() const;
  void set_serving_id(::google::protobuf::int32 value);

  // optional int32 is_success = 2;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 2;
  ::google::protobuf::int32 is_success() const;
  void set_is_success(::google::protobuf::int32 value);

  // optional string error_msg = 3;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 3;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.DeleteServingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 serving_id_;
  ::google::protobuf::int32 is_success_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_serving_2eproto();
  friend void protobuf_AssignDesc_serving_2eproto();
  friend void protobuf_ShutdownFile_serving_2eproto();

  void InitAsDefaultInstance();
  static DeleteServingResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateServingRequest

// optional int32 serving_id = 1;
inline void CreateServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
inline ::google::protobuf::int32 CreateServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_id)
  return serving_id_;
}
inline void CreateServingRequest::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_id)
}

// optional string serving_name = 2;
inline void CreateServingRequest::clear_serving_name() {
  serving_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateServingRequest::serving_name() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
  return serving_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateServingRequest::set_serving_name(const ::std::string& value) {
  
  serving_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}
inline void CreateServingRequest::set_serving_name(const char* value) {
  
  serving_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}
inline void CreateServingRequest::set_serving_name(const char* value, size_t size) {
  
  serving_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}
inline ::std::string* CreateServingRequest::mutable_serving_name() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
  return serving_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateServingRequest::release_serving_name() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
  
  return serving_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateServingRequest::set_allocated_serving_name(::std::string* serving_name) {
  if (serving_name != NULL) {
    
  } else {
    
  }
  serving_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serving_name);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.CreateServingRequest.serving_name)
}

// optional int32 model_id = 3;
inline void CreateServingRequest::clear_model_id() {
  model_id_ = 0;
}
inline ::google::protobuf::int32 CreateServingRequest::model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.model_id)
  return model_id_;
}
inline void CreateServingRequest::set_model_id(::google::protobuf::int32 value) {
  
  model_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.model_id)
}

// optional int32 party_id = 4;
inline void CreateServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::google::protobuf::int32 CreateServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingRequest.party_id)
  return party_id_;
}
inline void CreateServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingRequest.party_id)
}

// -------------------------------------------------------------------

// CreateServingResponse

// optional int32 serving_id = 1;
inline void CreateServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
inline ::google::protobuf::int32 CreateServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingResponse.serving_id)
  return serving_id_;
}
inline void CreateServingResponse::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingResponse.serving_id)
}

// optional int32 is_success = 2;
inline void CreateServingResponse::clear_is_success() {
  is_success_ = 0;
}
inline ::google::protobuf::int32 CreateServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingResponse.is_success)
  return is_success_;
}
inline void CreateServingResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingResponse.is_success)
}

// optional string error_msg = 3;
inline void CreateServingResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateServingResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}
inline void CreateServingResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}
inline void CreateServingResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}
inline ::std::string* CreateServingResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateServingResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.CreateServingResponse.error_msg)
}

// -------------------------------------------------------------------

// EnableServingRequest

// optional int32 serving_id = 1;
inline void EnableServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
inline ::google::protobuf::int32 EnableServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingRequest.serving_id)
  return serving_id_;
}
inline void EnableServingRequest::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingRequest.serving_id)
}

// optional int32 model_id = 2;
inline void EnableServingRequest::clear_model_id() {
  model_id_ = 0;
}
inline ::google::protobuf::int32 EnableServingRequest::model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingRequest.model_id)
  return model_id_;
}
inline void EnableServingRequest::set_model_id(::google::protobuf::int32 value) {
  
  model_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingRequest.model_id)
}

// optional int32 party_id = 3;
inline void EnableServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::google::protobuf::int32 EnableServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingRequest.party_id)
  return party_id_;
}
inline void EnableServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingRequest.party_id)
}

// -------------------------------------------------------------------

// EnableServingResponse

// optional int32 serving_id = 1;
inline void EnableServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
inline ::google::protobuf::int32 EnableServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingResponse.serving_id)
  return serving_id_;
}
inline void EnableServingResponse::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingResponse.serving_id)
}

// optional int32 is_success = 2;
inline void EnableServingResponse::clear_is_success() {
  is_success_ = 0;
}
inline ::google::protobuf::int32 EnableServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingResponse.is_success)
  return is_success_;
}
inline void EnableServingResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingResponse.is_success)
}

// optional string error_msg = 3;
inline void EnableServingResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnableServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnableServingResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}
inline void EnableServingResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}
inline void EnableServingResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}
inline ::std::string* EnableServingResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnableServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnableServingResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.EnableServingResponse.error_msg)
}

// -------------------------------------------------------------------

// UpdateServingRequest

// optional int32 serving_id = 1;
inline void UpdateServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
inline ::google::protobuf::int32 UpdateServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingRequest.serving_id)
  return serving_id_;
}
inline void UpdateServingRequest::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingRequest.serving_id)
}

// optional int32 new_model_id = 2;
inline void UpdateServingRequest::clear_new_model_id() {
  new_model_id_ = 0;
}
inline ::google::protobuf::int32 UpdateServingRequest::new_model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingRequest.new_model_id)
  return new_model_id_;
}
inline void UpdateServingRequest::set_new_model_id(::google::protobuf::int32 value) {
  
  new_model_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingRequest.new_model_id)
}

// optional int32 party_id = 3;
inline void UpdateServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::google::protobuf::int32 UpdateServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingRequest.party_id)
  return party_id_;
}
inline void UpdateServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingRequest.party_id)
}

// -------------------------------------------------------------------

// UpdateServingResponse

// optional int32 serving_id = 1;
inline void UpdateServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
inline ::google::protobuf::int32 UpdateServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingResponse.serving_id)
  return serving_id_;
}
inline void UpdateServingResponse::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingResponse.serving_id)
}

// optional int32 is_success = 2;
inline void UpdateServingResponse::clear_is_success() {
  is_success_ = 0;
}
inline ::google::protobuf::int32 UpdateServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingResponse.is_success)
  return is_success_;
}
inline void UpdateServingResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingResponse.is_success)
}

// optional string error_msg = 3;
inline void UpdateServingResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateServingResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}
inline void UpdateServingResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}
inline void UpdateServingResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}
inline ::std::string* UpdateServingResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateServingResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.UpdateServingResponse.error_msg)
}

// -------------------------------------------------------------------

// QueryServingRequest

// repeated int32 serving_id = 1;
inline int QueryServingRequest::serving_id_size() const {
  return serving_id_.size();
}
inline void QueryServingRequest::clear_serving_id() {
  serving_id_.Clear();
}
inline ::google::protobuf::int32 QueryServingRequest::serving_id(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
  return serving_id_.Get(index);
}
inline void QueryServingRequest::set_serving_id(int index, ::google::protobuf::int32 value) {
  serving_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
}
inline void QueryServingRequest::add_serving_id(::google::protobuf::int32 value) {
  serving_id_.Add(value);
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
  return serving_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryServingRequest::mutable_serving_id() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.QueryServingRequest.serving_id)
  return &serving_id_;
}

// optional int32 party_id = 2;
inline void QueryServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::google::protobuf::int32 QueryServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.QueryServingRequest.party_id)
  return party_id_;
}
inline void QueryServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.QueryServingRequest.party_id)
}

// -------------------------------------------------------------------

// ServingInfo

// optional int32 serving_id = 1;
inline void ServingInfo::clear_serving_id() {
  serving_id_ = 0;
}
inline ::google::protobuf::int32 ServingInfo::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ServingInfo.serving_id)
  return serving_id_;
}
inline void ServingInfo::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ServingInfo.serving_id)
}

// optional int32 served_model_id = 2;
inline void ServingInfo::clear_served_model_id() {
  served_model_id_ = 0;
}
inline ::google::protobuf::int32 ServingInfo::served_model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ServingInfo.served_model_id)
  return served_model_id_;
}
inline void ServingInfo::set_served_model_id(::google::protobuf::int32 value) {
  
  served_model_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ServingInfo.served_model_id)
}

// optional .com.nus.dbsystem.falcon.v0.ServingStatus status = 3;
inline void ServingInfo::clear_status() {
  status_ = 0;
}
inline ::com::nus::dbsystem::falcon::v0::ServingStatus ServingInfo::status() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ServingInfo.status)
  return static_cast< ::com::nus::dbsystem::falcon::v0::ServingStatus >(status_);
}
inline void ServingInfo::set_status(::com::nus::dbsystem::falcon::v0::ServingStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ServingInfo.status)
}

// -------------------------------------------------------------------

// QueryServingResponse

// repeated .com.nus.dbsystem.falcon.v0.ServingInfo serving_infos = 1;
inline int QueryServingResponse::serving_infos_size() const {
  return serving_infos_.size();
}
inline void QueryServingResponse::clear_serving_infos() {
  serving_infos_.Clear();
}
inline const ::com::nus::dbsystem::falcon::v0::ServingInfo& QueryServingResponse::serving_infos(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return serving_infos_.Get(index);
}
inline ::com::nus::dbsystem::falcon::v0::ServingInfo* QueryServingResponse::mutable_serving_infos(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return serving_infos_.Mutable(index);
}
inline ::com::nus::dbsystem::falcon::v0::ServingInfo* QueryServingResponse::add_serving_infos() {
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return serving_infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo >*
QueryServingResponse::mutable_serving_infos() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return &serving_infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::ServingInfo >&
QueryServingResponse::serving_infos() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.QueryServingResponse.serving_infos)
  return serving_infos_;
}

// -------------------------------------------------------------------

// DisableServingRequest

// optional int32 serving_id = 1;
inline void DisableServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
inline ::google::protobuf::int32 DisableServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingRequest.serving_id)
  return serving_id_;
}
inline void DisableServingRequest::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingRequest.serving_id)
}

// optional int32 party_id = 2;
inline void DisableServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::google::protobuf::int32 DisableServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingRequest.party_id)
  return party_id_;
}
inline void DisableServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingRequest.party_id)
}

// -------------------------------------------------------------------

// DisableServingResponse

// optional int32 serving_id = 1;
inline void DisableServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
inline ::google::protobuf::int32 DisableServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingResponse.serving_id)
  return serving_id_;
}
inline void DisableServingResponse::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingResponse.serving_id)
}

// optional int32 is_success = 2;
inline void DisableServingResponse::clear_is_success() {
  is_success_ = 0;
}
inline ::google::protobuf::int32 DisableServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingResponse.is_success)
  return is_success_;
}
inline void DisableServingResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingResponse.is_success)
}

// optional string error_msg = 3;
inline void DisableServingResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisableServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisableServingResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}
inline void DisableServingResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}
inline void DisableServingResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}
inline ::std::string* DisableServingResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisableServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisableServingResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.DisableServingResponse.error_msg)
}

// -------------------------------------------------------------------

// DeleteServingRequest

// optional int32 serving_id = 1;
inline void DeleteServingRequest::clear_serving_id() {
  serving_id_ = 0;
}
inline ::google::protobuf::int32 DeleteServingRequest::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingRequest.serving_id)
  return serving_id_;
}
inline void DeleteServingRequest::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingRequest.serving_id)
}

// optional int32 party_id = 2;
inline void DeleteServingRequest::clear_party_id() {
  party_id_ = 0;
}
inline ::google::protobuf::int32 DeleteServingRequest::party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingRequest.party_id)
  return party_id_;
}
inline void DeleteServingRequest::set_party_id(::google::protobuf::int32 value) {
  
  party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingRequest.party_id)
}

// -------------------------------------------------------------------

// DeleteServingResponse

// optional int32 serving_id = 1;
inline void DeleteServingResponse::clear_serving_id() {
  serving_id_ = 0;
}
inline ::google::protobuf::int32 DeleteServingResponse::serving_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingResponse.serving_id)
  return serving_id_;
}
inline void DeleteServingResponse::set_serving_id(::google::protobuf::int32 value) {
  
  serving_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingResponse.serving_id)
}

// optional int32 is_success = 2;
inline void DeleteServingResponse::clear_is_success() {
  is_success_ = 0;
}
inline ::google::protobuf::int32 DeleteServingResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingResponse.is_success)
  return is_success_;
}
inline void DeleteServingResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingResponse.is_success)
}

// optional string error_msg = 3;
inline void DeleteServingResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteServingResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteServingResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}
inline void DeleteServingResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}
inline void DeleteServingResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}
inline ::std::string* DeleteServingResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteServingResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteServingResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.DeleteServingResponse.error_msg)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::nus::dbsystem::falcon::v0::ServingStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::nus::dbsystem::falcon::v0::ServingStatus>() {
  return ::com::nus::dbsystem::falcon::v0::ServingStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_serving_2eproto__INCLUDED
