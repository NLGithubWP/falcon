// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#ifndef PROTOBUF_status_2eproto__INCLUDED
#define PROTOBUF_status_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_status_2eproto();
void protobuf_AssignDesc_status_2eproto();
void protobuf_ShutdownFile_status_2eproto();

class ExecutorStatus;
class HeartBeat;
class JobStatus;
class TaskStatus;

enum StatusType {
  initialized = 0,
  running = 1,
  succeed = 2,
  failed = 3,
  StatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusType_IsValid(int value);
const StatusType StatusType_MIN = initialized;
const StatusType StatusType_MAX = failed;
const int StatusType_ARRAYSIZE = StatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusType_descriptor();
inline const ::std::string& StatusType_Name(StatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusType_descriptor(), value);
}
inline bool StatusType_Parse(
    const ::std::string& name, StatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusType>(
    StatusType_descriptor(), name, value);
}
// ===================================================================

class HeartBeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.HeartBeat) */ {
 public:
  HeartBeat();
  virtual ~HeartBeat();

  HeartBeat(const HeartBeat& from);

  inline HeartBeat& operator=(const HeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeat& default_instance();

  void Swap(HeartBeat* other);

  // implements Message ----------------------------------------------

  inline HeartBeat* New() const { return New(NULL); }

  HeartBeat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeat& from);
  void MergeFrom(const HeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.HeartBeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_status_2eproto();
  friend void protobuf_AssignDesc_status_2eproto();
  friend void protobuf_ShutdownFile_status_2eproto();

  void InitAsDefaultInstance();
  static HeartBeat* default_instance_;
};
// -------------------------------------------------------------------

class TaskStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.TaskStatus) */ {
 public:
  TaskStatus();
  virtual ~TaskStatus();

  TaskStatus(const TaskStatus& from);

  inline TaskStatus& operator=(const TaskStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskStatus& default_instance();

  void Swap(TaskStatus* other);

  // implements Message ----------------------------------------------

  inline TaskStatus* New() const { return New(NULL); }

  TaskStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskStatus& from);
  void MergeFrom(const TaskStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::int32 task_id() const;
  void set_task_id(::google::protobuf::int32 value);

  // optional .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
  void clear_task_status();
  static const int kTaskStatusFieldNumber = 2;
  ::com::nus::dbsystem::falcon::v0::StatusType task_status() const;
  void set_task_status(::com::nus::dbsystem::falcon::v0::StatusType value);

  // optional string task_result = 3;
  void clear_task_result();
  static const int kTaskResultFieldNumber = 3;
  const ::std::string& task_result() const;
  void set_task_result(const ::std::string& value);
  void set_task_result(const char* value);
  void set_task_result(const char* value, size_t size);
  ::std::string* mutable_task_result();
  ::std::string* release_task_result();
  void set_allocated_task_result(::std::string* task_result);

  // optional string error_msg = 4;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 4;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.TaskStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 task_id_;
  int task_status_;
  ::google::protobuf::internal::ArenaStringPtr task_result_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_status_2eproto();
  friend void protobuf_AssignDesc_status_2eproto();
  friend void protobuf_ShutdownFile_status_2eproto();

  void InitAsDefaultInstance();
  static TaskStatus* default_instance_;
};
// -------------------------------------------------------------------

class JobStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.JobStatus) */ {
 public:
  JobStatus();
  virtual ~JobStatus();

  JobStatus(const JobStatus& from);

  inline JobStatus& operator=(const JobStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobStatus& default_instance();

  void Swap(JobStatus* other);

  // implements Message ----------------------------------------------

  inline JobStatus* New() const { return New(NULL); }

  JobStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobStatus& from);
  void MergeFrom(const JobStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JobStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 job_id = 1;
  void clear_job_id();
  static const int kJobIdFieldNumber = 1;
  ::google::protobuf::int32 job_id() const;
  void set_job_id(::google::protobuf::int32 value);

  // optional .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
  void clear_job_status();
  static const int kJobStatusFieldNumber = 2;
  ::com::nus::dbsystem::falcon::v0::StatusType job_status() const;
  void set_job_status(::com::nus::dbsystem::falcon::v0::StatusType value);

  // optional string job_result = 3;
  void clear_job_result();
  static const int kJobResultFieldNumber = 3;
  const ::std::string& job_result() const;
  void set_job_result(const ::std::string& value);
  void set_job_result(const char* value);
  void set_job_result(const char* value, size_t size);
  ::std::string* mutable_job_result();
  ::std::string* release_job_result();
  void set_allocated_job_result(::std::string* job_result);

  // optional string error_msg = 4;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 4;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 5;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 5;
  const ::com::nus::dbsystem::falcon::v0::TaskStatus& tasks(int index) const;
  ::com::nus::dbsystem::falcon::v0::TaskStatus* mutable_tasks(int index);
  ::com::nus::dbsystem::falcon::v0::TaskStatus* add_tasks();
  ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus >*
      mutable_tasks();
  const ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus >&
      tasks() const;

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.JobStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 job_id_;
  int job_status_;
  ::google::protobuf::internal::ArenaStringPtr job_result_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus > tasks_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_status_2eproto();
  friend void protobuf_AssignDesc_status_2eproto();
  friend void protobuf_ShutdownFile_status_2eproto();

  void InitAsDefaultInstance();
  static JobStatus* default_instance_;
};
// -------------------------------------------------------------------

class ExecutorStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.nus.dbsystem.falcon.v0.ExecutorStatus) */ {
 public:
  ExecutorStatus();
  virtual ~ExecutorStatus();

  ExecutorStatus(const ExecutorStatus& from);

  inline ExecutorStatus& operator=(const ExecutorStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutorStatus& default_instance();

  void Swap(ExecutorStatus* other);

  // implements Message ----------------------------------------------

  inline ExecutorStatus* New() const { return New(NULL); }

  ExecutorStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutorStatus& from);
  void MergeFrom(const ExecutorStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExecutorStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
  bool has_heartbeat() const;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 1;
  const ::com::nus::dbsystem::falcon::v0::HeartBeat& heartbeat() const;
  ::com::nus::dbsystem::falcon::v0::HeartBeat* mutable_heartbeat();
  ::com::nus::dbsystem::falcon::v0::HeartBeat* release_heartbeat();
  void set_allocated_heartbeat(::com::nus::dbsystem::falcon::v0::HeartBeat* heartbeat);

  // repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
  int jobs_size() const;
  void clear_jobs();
  static const int kJobsFieldNumber = 2;
  const ::com::nus::dbsystem::falcon::v0::JobStatus& jobs(int index) const;
  ::com::nus::dbsystem::falcon::v0::JobStatus* mutable_jobs(int index);
  ::com::nus::dbsystem::falcon::v0::JobStatus* add_jobs();
  ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus >*
      mutable_jobs();
  const ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus >&
      jobs() const;

  // @@protoc_insertion_point(class_scope:com.nus.dbsystem.falcon.v0.ExecutorStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::com::nus::dbsystem::falcon::v0::HeartBeat* heartbeat_;
  ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus > jobs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_status_2eproto();
  friend void protobuf_AssignDesc_status_2eproto();
  friend void protobuf_ShutdownFile_status_2eproto();

  void InitAsDefaultInstance();
  static ExecutorStatus* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeat

// optional .google.protobuf.Timestamp timestamp = 1;
inline bool HeartBeat::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void HeartBeat::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& HeartBeat::timestamp() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* HeartBeat::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* HeartBeat::release_timestamp() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void HeartBeat::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.HeartBeat.timestamp)
}

// -------------------------------------------------------------------

// TaskStatus

// optional int32 task_id = 1;
inline void TaskStatus::clear_task_id() {
  task_id_ = 0;
}
inline ::google::protobuf::int32 TaskStatus::task_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.task_id)
  return task_id_;
}
inline void TaskStatus::set_task_id(::google::protobuf::int32 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.task_id)
}

// optional .com.nus.dbsystem.falcon.v0.StatusType task_status = 2;
inline void TaskStatus::clear_task_status() {
  task_status_ = 0;
}
inline ::com::nus::dbsystem::falcon::v0::StatusType TaskStatus::task_status() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.task_status)
  return static_cast< ::com::nus::dbsystem::falcon::v0::StatusType >(task_status_);
}
inline void TaskStatus::set_task_status(::com::nus::dbsystem::falcon::v0::StatusType value) {
  
  task_status_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.task_status)
}

// optional string task_result = 3;
inline void TaskStatus::clear_task_result() {
  task_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskStatus::task_result() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
  return task_result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStatus::set_task_result(const ::std::string& value) {
  
  task_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}
inline void TaskStatus::set_task_result(const char* value) {
  
  task_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}
inline void TaskStatus::set_task_result(const char* value, size_t size) {
  
  task_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}
inline ::std::string* TaskStatus::mutable_task_result() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
  return task_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskStatus::release_task_result() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
  
  return task_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStatus::set_allocated_task_result(::std::string* task_result) {
  if (task_result != NULL) {
    
  } else {
    
  }
  task_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_result);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.TaskStatus.task_result)
}

// optional string error_msg = 4;
inline void TaskStatus::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskStatus::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStatus::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}
inline void TaskStatus::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}
inline void TaskStatus::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}
inline ::std::string* TaskStatus::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskStatus::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStatus::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.TaskStatus.error_msg)
}

// -------------------------------------------------------------------

// JobStatus

// optional int32 job_id = 1;
inline void JobStatus::clear_job_id() {
  job_id_ = 0;
}
inline ::google::protobuf::int32 JobStatus::job_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.job_id)
  return job_id_;
}
inline void JobStatus::set_job_id(::google::protobuf::int32 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.job_id)
}

// optional .com.nus.dbsystem.falcon.v0.StatusType job_status = 2;
inline void JobStatus::clear_job_status() {
  job_status_ = 0;
}
inline ::com::nus::dbsystem::falcon::v0::StatusType JobStatus::job_status() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.job_status)
  return static_cast< ::com::nus::dbsystem::falcon::v0::StatusType >(job_status_);
}
inline void JobStatus::set_job_status(::com::nus::dbsystem::falcon::v0::StatusType value) {
  
  job_status_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.job_status)
}

// optional string job_result = 3;
inline void JobStatus::clear_job_result() {
  job_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobStatus::job_result() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
  return job_result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobStatus::set_job_result(const ::std::string& value) {
  
  job_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}
inline void JobStatus::set_job_result(const char* value) {
  
  job_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}
inline void JobStatus::set_job_result(const char* value, size_t size) {
  
  job_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}
inline ::std::string* JobStatus::mutable_job_result() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
  return job_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobStatus::release_job_result() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
  
  return job_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobStatus::set_allocated_job_result(::std::string* job_result) {
  if (job_result != NULL) {
    
  } else {
    
  }
  job_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_result);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.JobStatus.job_result)
}

// optional string error_msg = 4;
inline void JobStatus::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JobStatus::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobStatus::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}
inline void JobStatus::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}
inline void JobStatus::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}
inline ::std::string* JobStatus::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobStatus::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobStatus::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.JobStatus.error_msg)
}

// repeated .com.nus.dbsystem.falcon.v0.TaskStatus tasks = 5;
inline int JobStatus::tasks_size() const {
  return tasks_.size();
}
inline void JobStatus::clear_tasks() {
  tasks_.Clear();
}
inline const ::com::nus::dbsystem::falcon::v0::TaskStatus& JobStatus::tasks(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return tasks_.Get(index);
}
inline ::com::nus::dbsystem::falcon::v0::TaskStatus* JobStatus::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return tasks_.Mutable(index);
}
inline ::com::nus::dbsystem::falcon::v0::TaskStatus* JobStatus::add_tasks() {
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return tasks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus >*
JobStatus::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return &tasks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::TaskStatus >&
JobStatus::tasks() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.JobStatus.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// ExecutorStatus

// optional .com.nus.dbsystem.falcon.v0.HeartBeat heartbeat = 1;
inline bool ExecutorStatus::has_heartbeat() const {
  return !_is_default_instance_ && heartbeat_ != NULL;
}
inline void ExecutorStatus::clear_heartbeat() {
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) delete heartbeat_;
  heartbeat_ = NULL;
}
inline const ::com::nus::dbsystem::falcon::v0::HeartBeat& ExecutorStatus::heartbeat() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
  return heartbeat_ != NULL ? *heartbeat_ : *default_instance_->heartbeat_;
}
inline ::com::nus::dbsystem::falcon::v0::HeartBeat* ExecutorStatus::mutable_heartbeat() {
  
  if (heartbeat_ == NULL) {
    heartbeat_ = new ::com::nus::dbsystem::falcon::v0::HeartBeat;
  }
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
  return heartbeat_;
}
inline ::com::nus::dbsystem::falcon::v0::HeartBeat* ExecutorStatus::release_heartbeat() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
  
  ::com::nus::dbsystem::falcon::v0::HeartBeat* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}
inline void ExecutorStatus::set_allocated_heartbeat(::com::nus::dbsystem::falcon::v0::HeartBeat* heartbeat) {
  delete heartbeat_;
  heartbeat_ = heartbeat;
  if (heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.ExecutorStatus.heartbeat)
}

// repeated .com.nus.dbsystem.falcon.v0.JobStatus jobs = 2;
inline int ExecutorStatus::jobs_size() const {
  return jobs_.size();
}
inline void ExecutorStatus::clear_jobs() {
  jobs_.Clear();
}
inline const ::com::nus::dbsystem::falcon::v0::JobStatus& ExecutorStatus::jobs(int index) const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return jobs_.Get(index);
}
inline ::com::nus::dbsystem::falcon::v0::JobStatus* ExecutorStatus::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return jobs_.Mutable(index);
}
inline ::com::nus::dbsystem::falcon::v0::JobStatus* ExecutorStatus::add_jobs() {
  // @@protoc_insertion_point(field_add:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return jobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus >*
ExecutorStatus::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return &jobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::nus::dbsystem::falcon::v0::JobStatus >&
ExecutorStatus::jobs() const {
  // @@protoc_insertion_point(field_list:com.nus.dbsystem.falcon.v0.ExecutorStatus.jobs)
  return jobs_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::nus::dbsystem::falcon::v0::StatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::nus::dbsystem::falcon::v0::StatusType>() {
  return ::com::nus::dbsystem::falcon::v0::StatusType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_status_2eproto__INCLUDED
