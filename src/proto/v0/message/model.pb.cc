// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace nus {
namespace dbsystem {
namespace falcon {
namespace v0 {

namespace {

const ::google::protobuf::Descriptor* ModelPublishRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelPublishRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelPublishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelPublishResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_model_2eproto() {
  protobuf_AddDesc_model_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model.proto");
  GOOGLE_CHECK(file != NULL);
  ModelPublishRequest_descriptor_ = file->message_type(0);
  static const int ModelPublishRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelPublishRequest, model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelPublishRequest, initiator_party_id_),
  };
  ModelPublishRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelPublishRequest_descriptor_,
      ModelPublishRequest::default_instance_,
      ModelPublishRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModelPublishRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelPublishRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelPublishRequest, _is_default_instance_));
  ModelPublishResponse_descriptor_ = file->message_type(1);
  static const int ModelPublishResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelPublishResponse, model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelPublishResponse, initiator_party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelPublishResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelPublishResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelPublishResponse, error_msg_),
  };
  ModelPublishResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelPublishResponse_descriptor_,
      ModelPublishResponse::default_instance_,
      ModelPublishResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModelPublishResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelPublishResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelPublishResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelPublishRequest_descriptor_, &ModelPublishRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelPublishResponse_descriptor_, &ModelPublishResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_2eproto() {
  delete ModelPublishRequest::default_instance_;
  delete ModelPublishRequest_reflection_;
  delete ModelPublishResponse::default_instance_;
  delete ModelPublishResponse_reflection_;
}

void protobuf_AddDesc_model_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_model_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013model.proto\022\032com.nus.dbsystem.falcon.v"
    "0\"C\n\023ModelPublishRequest\022\020\n\010model_id\030\001 \001"
    "(\005\022\032\n\022initiator_party_id\030\002 \001(\005\"\177\n\024ModelP"
    "ublishResponse\022\020\n\010model_id\030\001 \001(\005\022\032\n\022init"
    "iator_party_id\030\002 \001(\005\022\022\n\nis_success\030\003 \001(\005"
    "\022\022\n\nerror_code\030\004 \001(\005\022\021\n\terror_msg\030\005 \001(\tb"
    "\006proto3", 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model.proto", &protobuf_RegisterTypes);
  ModelPublishRequest::default_instance_ = new ModelPublishRequest();
  ModelPublishResponse::default_instance_ = new ModelPublishResponse();
  ModelPublishRequest::default_instance_->InitAsDefaultInstance();
  ModelPublishResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_2eproto {
  StaticDescriptorInitializer_model_2eproto() {
    protobuf_AddDesc_model_2eproto();
  }
} static_descriptor_initializer_model_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelPublishRequest::kModelIdFieldNumber;
const int ModelPublishRequest::kInitiatorPartyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelPublishRequest::ModelPublishRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
}

void ModelPublishRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ModelPublishRequest::ModelPublishRequest(const ModelPublishRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
}

void ModelPublishRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  model_id_ = 0;
  initiator_party_id_ = 0;
}

ModelPublishRequest::~ModelPublishRequest() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  SharedDtor();
}

void ModelPublishRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModelPublishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelPublishRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelPublishRequest_descriptor_;
}

const ModelPublishRequest& ModelPublishRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

ModelPublishRequest* ModelPublishRequest::default_instance_ = NULL;

ModelPublishRequest* ModelPublishRequest::New(::google::protobuf::Arena* arena) const {
  ModelPublishRequest* n = new ModelPublishRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ModelPublishRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModelPublishRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(model_id_, initiator_party_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool ModelPublishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 model_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_initiator_party_id;
        break;
      }

      // optional int32 initiator_party_id = 2;
      case 2: {
        if (tag == 16) {
         parse_initiator_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initiator_party_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  return false;
#undef DO_
}

void ModelPublishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  // optional int32 model_id = 1;
  if (this->model_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->model_id(), output);
  }

  // optional int32 initiator_party_id = 2;
  if (this->initiator_party_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->initiator_party_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
}

::google::protobuf::uint8* ModelPublishRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  // optional int32 model_id = 1;
  if (this->model_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->model_id(), target);
  }

  // optional int32 initiator_party_id = 2;
  if (this->initiator_party_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->initiator_party_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  return target;
}

int ModelPublishRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  int total_size = 0;

  // optional int32 model_id = 1;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());
  }

  // optional int32 initiator_party_id = 2;
  if (this->initiator_party_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->initiator_party_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelPublishRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelPublishRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelPublishRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
    MergeFrom(*source);
  }
}

void ModelPublishRequest::MergeFrom(const ModelPublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.model_id() != 0) {
    set_model_id(from.model_id());
  }
  if (from.initiator_party_id() != 0) {
    set_initiator_party_id(from.initiator_party_id());
  }
}

void ModelPublishRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelPublishRequest::CopyFrom(const ModelPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.ModelPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPublishRequest::IsInitialized() const {

  return true;
}

void ModelPublishRequest::Swap(ModelPublishRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelPublishRequest::InternalSwap(ModelPublishRequest* other) {
  std::swap(model_id_, other->model_id_);
  std::swap(initiator_party_id_, other->initiator_party_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelPublishRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelPublishRequest_descriptor_;
  metadata.reflection = ModelPublishRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelPublishRequest

// optional int32 model_id = 1;
void ModelPublishRequest::clear_model_id() {
  model_id_ = 0;
}
 ::google::protobuf::int32 ModelPublishRequest::model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishRequest.model_id)
  return model_id_;
}
 void ModelPublishRequest::set_model_id(::google::protobuf::int32 value) {
  
  model_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishRequest.model_id)
}

// optional int32 initiator_party_id = 2;
void ModelPublishRequest::clear_initiator_party_id() {
  initiator_party_id_ = 0;
}
 ::google::protobuf::int32 ModelPublishRequest::initiator_party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishRequest.initiator_party_id)
  return initiator_party_id_;
}
 void ModelPublishRequest::set_initiator_party_id(::google::protobuf::int32 value) {
  
  initiator_party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishRequest.initiator_party_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelPublishResponse::kModelIdFieldNumber;
const int ModelPublishResponse::kInitiatorPartyIdFieldNumber;
const int ModelPublishResponse::kIsSuccessFieldNumber;
const int ModelPublishResponse::kErrorCodeFieldNumber;
const int ModelPublishResponse::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelPublishResponse::ModelPublishResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
}

void ModelPublishResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ModelPublishResponse::ModelPublishResponse(const ModelPublishResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
}

void ModelPublishResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_id_ = 0;
  initiator_party_id_ = 0;
  is_success_ = 0;
  error_code_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModelPublishResponse::~ModelPublishResponse() {
  // @@protoc_insertion_point(destructor:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  SharedDtor();
}

void ModelPublishResponse::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ModelPublishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelPublishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelPublishResponse_descriptor_;
}

const ModelPublishResponse& ModelPublishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

ModelPublishResponse* ModelPublishResponse::default_instance_ = NULL;

ModelPublishResponse* ModelPublishResponse::New(::google::protobuf::Arena* arena) const {
  ModelPublishResponse* n = new ModelPublishResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelPublishResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ModelPublishResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModelPublishResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(model_id_, error_code_);
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ModelPublishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 model_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_initiator_party_id;
        break;
      }

      // optional int32 initiator_party_id = 2;
      case 2: {
        if (tag == 16) {
         parse_initiator_party_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initiator_party_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_success;
        break;
      }

      // optional int32 is_success = 3;
      case 3: {
        if (tag == 24) {
         parse_is_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 4;
      case 4: {
        if (tag == 32) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 5;
      case 5: {
        if (tag == 42) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  return false;
#undef DO_
}

void ModelPublishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  // optional int32 model_id = 1;
  if (this->model_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->model_id(), output);
  }

  // optional int32 initiator_party_id = 2;
  if (this->initiator_party_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->initiator_party_id(), output);
  }

  // optional int32 is_success = 3;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_success(), output);
  }

  // optional int32 error_code = 4;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->error_code(), output);
  }

  // optional string error_msg = 5;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->error_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
}

::google::protobuf::uint8* ModelPublishResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  // optional int32 model_id = 1;
  if (this->model_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->model_id(), target);
  }

  // optional int32 initiator_party_id = 2;
  if (this->initiator_party_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->initiator_party_id(), target);
  }

  // optional int32 is_success = 3;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_success(), target);
  }

  // optional int32 error_code = 4;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->error_code(), target);
  }

  // optional string error_msg = 5;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  return target;
}

int ModelPublishResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  int total_size = 0;

  // optional int32 model_id = 1;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());
  }

  // optional int32 initiator_party_id = 2;
  if (this->initiator_party_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->initiator_party_id());
  }

  // optional int32 is_success = 3;
  if (this->is_success() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_success());
  }

  // optional int32 error_code = 4;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // optional string error_msg = 5;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelPublishResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelPublishResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelPublishResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
    MergeFrom(*source);
  }
}

void ModelPublishResponse::MergeFrom(const ModelPublishResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.model_id() != 0) {
    set_model_id(from.model_id());
  }
  if (from.initiator_party_id() != 0) {
    set_initiator_party_id(from.initiator_party_id());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
}

void ModelPublishResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelPublishResponse::CopyFrom(const ModelPublishResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.nus.dbsystem.falcon.v0.ModelPublishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPublishResponse::IsInitialized() const {

  return true;
}

void ModelPublishResponse::Swap(ModelPublishResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelPublishResponse::InternalSwap(ModelPublishResponse* other) {
  std::swap(model_id_, other->model_id_);
  std::swap(initiator_party_id_, other->initiator_party_id_);
  std::swap(is_success_, other->is_success_);
  std::swap(error_code_, other->error_code_);
  error_msg_.Swap(&other->error_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelPublishResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelPublishResponse_descriptor_;
  metadata.reflection = ModelPublishResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelPublishResponse

// optional int32 model_id = 1;
void ModelPublishResponse::clear_model_id() {
  model_id_ = 0;
}
 ::google::protobuf::int32 ModelPublishResponse::model_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishResponse.model_id)
  return model_id_;
}
 void ModelPublishResponse::set_model_id(::google::protobuf::int32 value) {
  
  model_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishResponse.model_id)
}

// optional int32 initiator_party_id = 2;
void ModelPublishResponse::clear_initiator_party_id() {
  initiator_party_id_ = 0;
}
 ::google::protobuf::int32 ModelPublishResponse::initiator_party_id() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishResponse.initiator_party_id)
  return initiator_party_id_;
}
 void ModelPublishResponse::set_initiator_party_id(::google::protobuf::int32 value) {
  
  initiator_party_id_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishResponse.initiator_party_id)
}

// optional int32 is_success = 3;
void ModelPublishResponse::clear_is_success() {
  is_success_ = 0;
}
 ::google::protobuf::int32 ModelPublishResponse::is_success() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishResponse.is_success)
  return is_success_;
}
 void ModelPublishResponse::set_is_success(::google::protobuf::int32 value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishResponse.is_success)
}

// optional int32 error_code = 4;
void ModelPublishResponse::clear_error_code() {
  error_code_ = 0;
}
 ::google::protobuf::int32 ModelPublishResponse::error_code() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_code)
  return error_code_;
}
 void ModelPublishResponse::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_code)
}

// optional string error_msg = 5;
void ModelPublishResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModelPublishResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelPublishResponse::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
}
 void ModelPublishResponse::set_error_msg(const char* value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
}
 void ModelPublishResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
}
 ::std::string* ModelPublishResponse::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelPublishResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelPublishResponse::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:com.nus.dbsystem.falcon.v0.ModelPublishResponse.error_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace falcon
}  // namespace dbsystem
}  // namespace nus
}  // namespace com

// @@protoc_insertion_point(global_scope)
