FROM ubuntu:18.04 as intermediate

LABEL maintainer="Yuncheng Wu <lemonwyc@gmail.com>"

RUN apt-get update && apt-get upgrade -y && \
        apt-get install -y --no-install-recommends \
        git \
        sqlite3 \
        curl \
        sudo \
        unzip \
        vim \
        wget \
        zip \
        ssh

#Accept input argument
ARG SSH_PRIVATE_KEY

#Pass the content of the private key into the container
RUN mkdir /root/.ssh/
RUN echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa

#Github requires a private key with strict permission settings
RUN chmod 600 /root/.ssh/id_rsa

#Add Github to known hosts
RUN touch /root/.ssh/known_hosts
RUN ssh-keyscan github.com >> /root/.ssh/known_hosts

# Clone Falcon and init submodules
WORKDIR /opt
RUN git clone git@github.com:lemonviv/falcon.git && \
    cd falcon/third_party/ && \
    git submodule update --init --recursive

FROM ubuntu:18.04

COPY --from=intermediate /opt/falcon /opt/falcon

RUN apt-get update && apt-get upgrade -y && \
        apt-get install -y --no-install-recommends \
        libgmp-dev \
        libboost-dev \
        libboost-all-dev \
        libboost-system-dev \
        libboost-thread-dev \
        libcurl4-openssl-dev \
        build-essential \
        ca-certificates \
        gdb \
        git \
        libjsoncpp-dev \
        liblog4cpp5-dev \
        libprotobuf-c0-dev \
        libprotobuf-dev \
        libssl-dev \
        libtool \
        m4 \
        protobuf-compiler \
        python \
        python3 \
        python3-pip \
        libgoogle-glog-dev \
        libgtest-dev \
        texinfo \
        yasm \
        automake \
        libsodium-dev \
        libcrypto++-dev \
        libcrypto++-doc \
        libcrypto++-utils \
        autoconf \
        pkg-config \
        wget \
        && \
        pip3 install requests && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*

# Install
RUN dpkg-reconfigure dash

# Upgrade cmake version to 3.19.7
RUN mkdir ~/temp && \
    cd ~/temp && \
    wget https://cmake.org/files/v3.19/cmake-3.19.7.tar.gz && \
    tar -xzvf cmake-3.19.7.tar.gz && \
    cd cmake-3.19.7/ && \
    ./bootstrap && \
    make -j$(nproc) && \
    make install && \
    hash -r && \
    cmake --version

# Install grpc server
WORKDIR /opt
RUN git clone --recurse-submodules -b v1.33.1 https://github.com/grpc/grpc && \
    cd grpc && \
    mkdir -p cmake/build

# Prepare grpc server dependencies
WORKDIR /opt/grpc
RUN export MY_INSTALL_DIR=$HOME/.local && \
    mkdir -p $MY_INSTALL_DIR && \
    export PATH="$PATH:$MY_INSTALL_DIR/bin" && \
    bash -xc "\
    pushd cmake/build; \
    cmake -DgRPC_INSTALL=ON \
          -DgRPC_BUILD_TESTS=OFF \
          -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR \
          ../..; \
    make -j; \
    make install; \
    popd; \
    pwd; \
    "

# Install glog library
WORKDIR /opt
RUN git clone https://github.com/google/glog.git && \
    cd glog && \
    cmake -H. -Bbuild -G "Unix Makefiles" && \
    cmake --build build

# Ln gtest library
RUN cd /usr/src/googletest/googletest && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make && \
    cp libgtest* /usr/lib/ && \
    cd .. && \
    rm -rf build && \
    mkdir /usr/local/lib/googletest && \
    ln -s /usr/lib/libgtest.a /usr/local/lib/googletest/libgtest.a && \
    ln -s /usr/lib/libgtest_main.a /usr/local/lib/googletest/libgtest_main.a

# Install third_party threshold partially homomorphic encryption library
WORKDIR /opt/falcon
RUN cd third_party/libhcs && \
    cmake . && \
    make && \
    make install

# Install third_party MP-SPDZ library
WORKDIR /opt/falcon
RUN cd third_party/MP-SPDZ && \
    mv Math/Setup.h.prod Math/Setup.h && \
    make -j 8 tldr && \
    bash fast-make.sh && \
    Scripts/setup-clients.sh 3 && \
    ./compile.py Programs/Source/logistic_regression.mpc && \
    ln -s /opt/falcon/third_party/MP-SPDZ/local/lib/libmpir* /usr/local/lib/

# Install Go 1.14
RUN wget -q https://golang.org/dl/go1.14.13.linux-amd64.tar.gz -O go114.tar.gz && \
    tar xzf go114.tar.gz -C /usr/local/

# Set environment variables.
ENV GOROOT /usr/local/
ENV GOPATH /gopath
ENV PATH $GOROOT/bin:$GOPATH/bin:$PATH
ENV PATH $HOME/.local/bin:$PATH

# Replace protoc version
RUN cp ~/.local/bin/protoc /usr/bin/ && \
    cd /opt/falcon/src/executor/include/proto && \
    SRC_DIR=v0/ && \
    DST_DIR=../message && \
    protoc -I=$SRC_DIR --cpp_out=$DST_DIR $SRC_DIR/*.proto

WORKDIR /opt/falcon/src/executor/include/proto
RUN SRC_DIR=v0/inference/ && \
    DST_DIR=../message/inference/ && \
    protoc -I=$SRC_DIR --cpp_out=$DST_DIR --grpc_out=$DST_DIR --plugin=protoc-gen-grpc=/root/.local/bin/grpc_cpp_plugin $SRC_DIR/lr_grpc.proto

WORKDIR /opt/falcon
RUN mkdir build && \
    cmake -Bbuild -H. && \
    cd build/ && \
    make

# Define working directory.
WORKDIR /opt
