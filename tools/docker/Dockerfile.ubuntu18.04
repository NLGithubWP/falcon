FROM ubuntu:18.04 as intermediate

LABEL maintainer="Yuncheng Wu <lemonwyc@gmail.com>"

RUN apt-get update && apt-get upgrade -y && \
        apt-get install -y --no-install-recommends \
        git \
        ssh

#Accept input argument from docker-compose.yml
ARG SSH_PRIVATE_KEY

#Pass the content of the private key into the container
RUN mkdir /root/.ssh/
RUN echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa

#Github requires a private key with strict permission settings
RUN chmod 600 /root/.ssh/id_rsa

#Add Github to known hosts
RUN touch /root/.ssh/known_hosts
RUN ssh-keyscan github.com >> /root/.ssh/known_hosts

# Clone Falcon and init submodules
WORKDIR /opt
RUN git clone git@github.com:lemonviv/falcon.git && \
    cd falcon/third_party/ && \
    git submodule update --init --recursive

FROM ubuntu:18.04

COPY --from=intermediate /opt/falcon /opt/falcon

RUN apt-get update && apt-get upgrade -y && \
        apt-get install -y --no-install-recommends \
        libgmp-dev \
        git \
        cmake \
        libboost-dev \
        libboost-all-dev \
        libboost-system-dev \
        libboost-thread-dev \
        libcurl4-openssl-dev \
        build-essential \
        ca-certificates \
        curl \
        gdb \
        golang-go \
        libjsoncpp-dev \
        liblog4cpp5-dev \
        libprotobuf-c0-dev \
        libprotobuf-dev \
        libssl-dev \
        libtool \
        m4 \
        protobuf-compiler \
        python \
        python3 \
        python-pip \
        unzip \
        vim \
        wget \
        zip \
        libgoogle-glog-dev \
        libgtest-dev \
        texinfo \
        ocaml \
        yasm \
        automake \
        sudo \
        libsodium-dev \
        libcrypto++-dev \
        libcrypto++-doc \
        libcrypto++-utils \
        ssh \
        && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*

# Install glog library
WORKDIR /opt
RUN git clone https://github.com/google/glog.git && \
    cd glog && \
    cmake -H. -Bbuild -G "Unix Makefiles" && \
    cmake --build build

# Ln gtest library
RUN cd /usr/src/googletest/googletest && \
    sudo mkdir build && \
    cd build && \
    sudo cmake .. && \
    sudo make && \
    sudo cp libgtest* /usr/lib/ && \
    cd .. && \
    sudo rm -rf build && \
    sudo mkdir /usr/local/lib/googletest && \
    sudo ln -s /usr/lib/libgtest.a /usr/local/lib/googletest/libgtest.a && \
    sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/googletest/libgtest_main.a

# Install third_party threshold partially homomorphic encryption library libhcs
WORKDIR /opt/falcon
RUN cd third_party/libhcs && \
    cmake . && \
    make && \
    sudo make install

# Install third_party MP-SPDZ library
WORKDIR /opt/falcon
RUN cd third_party/MP-SPDZ && \
    mv Math/Setup.h.prod Math/Setup.h && \
    make -j 8 tldr && \
    bash fast-make.sh && \
    ./compile.py Programs/Source/logistic_regression.mpc

# Build falcon executors
WORKDIR /opt/falcon
RUN mv src/executor/CMakeLists.txt.prod src/executor/CMakeLists.txt && \
    mv test/CMakeLists.txt.prod test/CMakeLists.txt && \
    mkdir build && \
    cmake -Bbuild -H. && \
    cd build/ && \
    make

WORKDIR /opt


